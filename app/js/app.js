/*!
 *
 * Angle - Bootstrap Admin App + AngularJS
 *
 * Author: @themicon_co
 * Website: http://themicon.co
 * License: http://support.wrapbootstrap.com/knowledge_base/topics/usage-licenses
 *
 */
if ("undefined" == typeof $) throw new Error("This application's JavaScript requires jQuery");
// APP START
// -----------------------------------

var App = angular.module("angle", [ "ngRoute", "ngAnimate", "ngStorage", "ngCookies", "pascalprecht.translate", "ui.bootstrap", "ui.router", "oc.lazyLoad", "cfp.loadingBar", "ngSanitize", "ngResource", "ui.utils", "tmh.dynamicLocale", "satellizer", "ui.sortable", "ui.select", "ct.ui.router.extras.core", "ct.ui.router.extras.sticky", "ct.ui.router.extras.dsr", "ct.ui.router.extras.future", "ct.ui.router.extras.previous", "ct.ui.router.extras.statevis", "ct.ui.router.extras.transition" ]), ChartJS = (App.run([ "$rootScope", "$state", "$stateParams", "$window", "$templateCache", "$location", function(a, e, t, o, r, n) {
    // Set reference to access them from any scope
    a.$state = e, a.$stateParams = t, a.$storage = o.localStorage, 
    // Uncomment this to disable template cache
    /*$rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams) {
        if (typeof(toState) !== 'undefined'){
          $templateCache.remove(toState.templateUrl);
        }
    });*/
    // Scope Globals
    // -----------------------------------
    a.app = {
        name: "Ruteando",
        description: "",
        year: new Date().getFullYear(),
        layout: {
            isFixed: !0,
            isCollapsed: !1,
            isBoxed: !1,
            isRTL: !1,
            horizontal: !1,
            isFloat: !1,
            asideHover: !1,
            theme: null
        },
        useFullLayout: !1,
        hiddenFooter: !1,
        viewAnimation: "ng-fadeInUp"
    }, a.user = {
        name: "John",
        job: "ng-developer",
        picture: "app/img/user/02.jpg"
    }, a.$on("$locationChangeSuccess", function() {
        a.actualLocation = n.path();
    }), a.$watch(function() {
        return n.path();
    }, function(e, t) {
        a.locationChange = {
            newState: e,
            oldState: t
        };
        /*
     console.log("newLocation " + newLocation);
     console.log("oldLocation " + oldLocation);
      if($rootScope.actualLocation === newLocation) {
        alert('Why did you use history back?');
      }*/
    });
} ]), 
/**=========================================================
 * Module: config.js
 * App routes and resources configuration
 =========================================================*/
App.config([ "$stateProvider", "$locationProvider", "$urlRouterProvider", "RouteHelpersProvider", function(e, t, a, o) {
    "use strict";
    // Set the following to true to enable the HTML5 Mode
    // You may have to set <base> tag in index and a routing configuration in your server
    t.html5Mode(!1), 
    // default route
    a.otherwise("/access/login"), 
    //
    // Application Routes
    // -----------------------------------
    e.state("access", {
        url: "^/access",
        templateUrl: "app/views/pages/access.html",
        resolve: o.resolveFor("bootstrap", "modernizr", "icons"),
        controller: [ "$rootScope", function(e) {
            e.app.layout.isBoxed = !1;
        } ]
    })
    /*
                .state('access.login', {
                url: '/login',
                templateUrl: 'app/views/pages/login.html',
                controller : "LoginController"
              })
*/.state("access.login", {
        url: "/login",
        templateUrl: "app/views/pages/login2.html",
        controller: "LoginController"
    }).state("access.register", {
        url: "/register",
        templateUrl: "app/views/pages/register.html",
        //        resolve: angular.extend(helper.resolveFor('ngDialog'),{
        //          tpl: function() { return { path: helper.basepath('templates/register_dialog.html') }; }
        //        }),
        controller: "RegisterController"
    }).state("access.registerTwo", {
        url: "/registerTwo",
        templateUrl: o.basepath("pages/access/register_two.html"),
        resolve: o.resolveFor("parsley")
    }).state("access.recovery", {
        url: "/recovery",
        templateUrl: "app/views/pages/recover.html",
        controller: "RecoveryController"
    }).state("access.reset", {
        url: "/reset/:token",
        templateUrl: "app/views/pages/reset.html",
        controller: "ResetController"
    }).state("access.activate", {
        url: "/activate/:token",
        templateUrl: "app/views/pages/access/activate.html",
        controller: "ActivateController"
    }).state("app", {
        url: "/app",
        abstract: !0,
        templateUrl: o.basepath("app.html"),
        controller: "AppController",
        resolve: o.resolveFor("bootstrap", "fastclick", "modernizr", "icons", "screenfull", "animo", "slimscroll", "classyloader", "toaster", "whirl", "openLayer", "openLayerSwitcher", "jsPDF", "jsPDF.plugins", "alasql_excel", "ngDialog", "ui.select")
    }).state("app.home", {
        url: "/home/:tknrefresh",
        templateUrl: o.basepath("home.html")
    }).state("app.submenu", {
        url: "/submenu",
        templateUrl: o.basepath("submenu.html")
    }).state("app.maps", {
        url: "/maps",
        templateUrl: "app/views/pages/maps.html",
        resolve: o.resolveFor("openLayer", "openLayerSwitcher")
    }).state("app.maps.index", {
        url: "/index",
        templateUrl: o.basepath("pages/maps/map_index.html"),
        controller: "MapsController"
    }).state("app.maps.address", {
        url: "/editAddress",
        templateUrl: o.basepath("pages/maps/map_address.html"),
        controller: "MapGenLatLongController",
        params: {
            map_mode_use: "address",
            address: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.maps.geocoding", {
        url: "/geocoding",
        templateUrl: o.basepath("pages/maps/map_geocoding.html"),
        controller: "MapGenLatLongController",
        params: {
            map_mode_use: "geocoding",
            geocoding: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.maps.journey", {
        url: "/journey",
        templateUrl: o.basepath("pages/maps/map_journey.html"),
        controller: "MapGenLatLongController",
        params: {
            map_mode_use: "journey",
            journey: {},
            options: {},
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.maps.route", {
        url: "/route",
        templateUrl: o.basepath("pages/maps/map_route.html"),
        controller: "MapGenLatLongController",
        params: {
            map_mode_use: "route",
            geoJson: null,
            routeId: null,
            place: null,
            packages: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.maps.assigned", {
        url: "/assigned",
        templateUrl: o.basepath("pages/maps/map_assigned.html"),
        controller: "MapGenLatLongController",
        params: {
            map_mode_use: "assigned",
            address: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.visits", {
        url: "/visits",
        abstract: !0,
        templateUrl: o.basepath("pages/visits/visits.html")
    }).state("app.visits.detail", {
        url: "/detail",
        templateUrl: o.basepath("pages/visits/visit_detail.html")
    }).state("app.visits.list", {
        url: "/list",
        templateUrl: o.basepath("pages/visits/visits_list.html"),
        params: {
            packages: null,
            journey: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        controller: "VisitsController"
    }).state("app.journeys", {
        url: "/journeys",
        abstract: !0,
        templateUrl: o.basepath("pages/journeys/journeys.html")
    }).state("app.journeys.add", {
        url: "/add",
        templateUrl: o.basepath("pages/journeys/form.html"),
        controller: "JourneysFormController",
        resolve: o.resolveFor("angularFileUpload", "filestyle"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        }
    }).state("app.journeys.detail", {
        url: "/detail",
        templateUrl: o.basepath("pages/journeys/journey_detail.html"),
        controller: "JourneyDetailController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        }
    }).state("app.journeys.help", {
        url: "/help",
        templateUrl: o.basepath("pages/journeys/journey_fileHelpUpload.html"),
        controller: "JourneyFileHelpController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        }
    }).state("app.journeys.list", {
        url: "/list",
        templateUrl: o.basepath("pages/journeys/journeys_list.html"),
        controller: "JourneysController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.journeys.chart", {
        url: "/chart",
        templateUrl: o.basepath("pages/journeys/journeys_chart.html"),
        controller: "JourneysChartController",
        resolve: o.resolveFor("flot-chart", "flot-chart-plugins")
    }).state("app.itinerary", {
        url: "/itinerary",
        abstract: !0,
        templateUrl: o.basepath("pages/itinerary/itinerary.html")
    }).state("app.itinerary.list", {
        url: "/list",
        controller: "ItineraryController",
        templateUrl: o.basepath("pages/itinerary/itinerary_list.html"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        resolve: angular.extend(o.resolveFor("ngDialog", "localytics.directives"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html"),
                    optimice: o.basepath("templates/optimice_confirmation.html")
                };
            }
        })
    }).state("app.itinerary.add", {
        url: "/add",
        controller: "ItineraryFormController",
        templateUrl: o.basepath("pages/itinerary/form.html"),
        resolve: o.resolveFor("localytics.directives"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.itinerary.edit", {
        url: "/edit",
        controller: "ItineraryFormController",
        templateUrl: o.basepath("pages/itinerary/form.html"),
        resolve: o.resolveFor("localytics.directives"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.settings", {
        url: "/settings",
        abstract: !0,
        templateUrl: o.basepath("pages/settings/settings.html")
    }).state("app.settings.add", {
        url: "/add",
        templateUrl: o.basepath("pages/settings/form.html"),
        controller: "SettingsFormController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        },
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.settings.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/settings/form.html"),
        controller: "SettingsFormController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        },
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.settings.list", {
        url: "/list",
        templateUrl: o.basepath("pages/settings/settings_list.html"),
        controller: "SettingsController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.vehicleTypes", {
        url: "/vehicleTypes",
        abstract: !0,
        templateUrl: o.basepath("pages/vehicle_types/vehicle_types.html")
    }).state("app.vehicleTypes.add", {
        url: "/add",
        templateUrl: o.basepath("pages/vehicle_types/form.html"),
        controller: "VehicleTypeController",
        params: {
            vehicleType: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.vehicleTypes.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/vehicle_types/form.html"),
        //params: { mode : "edit", vehicleType : null },
        controller: "VehicleTypeController",
        params: {
            vehicleType: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.vehicleTypes.list", {
        url: "/list",
        templateUrl: o.basepath("pages/vehicle_types/vehicle_types_list.html"),
        controller: "VehicleTypesController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.places", {
        url: "/places",
        abstract: !0,
        templateUrl: o.basepath("pages/places/places.html")
    }).state("app.places.add", {
        url: "/add",
        templateUrl: o.basepath("pages/places/form.html"),
        controller: "PlacesFormController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.places.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/places/form.html"),
        controller: "PlacesFormController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.places.list", {
        url: "/list",
        templateUrl: o.basepath("pages/places/places_list.html"),
        controller: "PlacesController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.routes", {
        url: "/routes",
        abstract: !0,
        templateUrl: o.basepath("pages/routes/routes.html"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        resolve: o.resolveFor("openLayer", "openLayerSwitcher")
    }).state("app.routes.detail", {
        url: "/detail",
        templateUrl: o.basepath("pages/routes/route_detail.html"),
        controller: "RouteDetailController",
        params: {
            data: null,
            returnTo: {
                state: null,
                data: null
            }
        }
    }).state("app.routes.list", {
        url: "/list",
        templateUrl: o.basepath("pages/routes/routes_list.html"),
        params: {
            journey: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        controller: "RoutesController"
    }).state("app.assignedServices", {
        url: "/assignedServices",
        abstract: !0,
        templateUrl: o.basepath("pages/assigned_services/assigned_services.html")
    }).state("app.assignedServices.add", {
        url: "/add",
        templateUrl: o.basepath("pages/assigned_services/form.html"),
        controller: "AssignedServicesFormController",
        params: {
            route: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        resolve: o.resolveFor("localytics.directives")
    }).state("app.assignedServices.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/assigned_services/form.html"),
        controller: "AssignedServicesFormController",
        resolve: o.resolveFor("localytics.directives")
    }).state("app.assignedServices.list", {
        url: "/list",
        templateUrl: o.basepath("pages/assigned_services/assigned_services_list.html"),
        controller: "AssignedServicesController"
    }).state("app.vehicles", {
        url: "/vehicles",
        abstract: !0,
        templateUrl: o.basepath("pages/vehicles/vehicles.html")
    }).state("app.vehicles.add", {
        url: "/add",
        templateUrl: o.basepath("pages/vehicles/form.html"),
        controller: "VehicleController",
        params: {
            vehicle: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.vehicles.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/vehicles/form.html"),
        controller: "VehicleController",
        params: {
            vehicle: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.vehicles.list", {
        url: "/list",
        templateUrl: o.basepath("pages/vehicles/vehicles_list.html"),
        controller: "VehiclesController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.visitsUnattended", {
        url: "/visitsUnattended",
        templateUrl: o.basepath("pages/visits_unattended/visits_unattended.html"),
        controller: "VisitsUnattendedController"
    }).state("app.drivers", {
        url: "/drivers",
        templateUrl: o.basepath("pages/drivers/drivers.html")
    }).state("app.drivers.add", {
        url: "/add",
        templateUrl: o.basepath("pages/drivers/form.html"),
        params: {
            driver: null
        },
        controller: "driverController"
    }).state("app.drivers.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/drivers/form.html"),
        params: {
            driver: null
        },
        controller: "driverController"
    }).state("app.drivers.list", {
        url: "/list",
        templateUrl: o.basepath("pages/drivers/drivers_list.html"),
        controller: "driversController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.catalogs", {
        url: "/catalogs",
        templateUrl: o.basepath("pages/catalogs/catalogs.html")
    }).state("app.catalogs.add", {
        url: "/add",
        templateUrl: o.basepath("pages/catalogs/form.html"),
        params: {
            catalog: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        resolve: o.resolveFor("ui.select"),
        controller: "catalogController"
    }).state("app.catalogs.edit", {
        url: "/edit",
        templateUrl: o.basepath("pages/catalogs/form.html"),
        params: {
            catalog: null,
            returnTo: {
                state: null,
                data: {}
            }
        },
        resolve: o.resolveFor("localytics.directives"),
        controller: "catalogController"
    }).state("app.catalogs.list", {
        url: "/list",
        templateUrl: o.basepath("pages/catalogs/catalogs_list.html"),
        controller: "catalogsController",
        resolve: angular.extend(o.resolveFor("ngDialog"), {
            tpl: function() {
                return {
                    path: o.basepath("templates/delete_confirmation.html")
                };
            }
        })
    }).state("app.address", {
        url: "/address",
        abstract: !0,
        templateUrl: o.basepath("pages/address/address.html"),
        controller: "AddressController"
    }).state("app.address.geocoding", {
        url: "/geocoding",
        templateUrl: o.basepath("pages/address/geocoding_form.html"),
        controller: "GeocodingFormController",
        resolve: o.resolveFor("localytics.directives"),
        params: {
            data: null,
            returnTo: {
                state: null,
                data: {}
            }
        }
    }).state("app.test", {
        url: "/test",
        templateUrl: o.basepath("test.html"),
        controller: "TestController",
        resolve: o.resolveFor("openLayer", "openLayerSwitcher", "jsPDF", "jsPDF.plugins", "fakerJS")
    });
} ]).config([ "$ocLazyLoadProvider", "APP_REQUIRES", function(e, t) {
    "use strict";
    // Lazy Load modules configuration
    e.config({
        debug: !0,
        events: !0,
        modules: t.modules
    });
} ]).config([ "$controllerProvider", "$compileProvider", "$filterProvider", "$provide", function(e, t, a, o) {
    "use strict";
    // registering components after bootstrap
    App.controller = e.register, App.directive = t.directive, App.filter = a.register, 
    App.factory = o.factory, App.service = o.service, App.constant = o.constant, 
    App.value = o.value;
} ]).config([ "$translateProvider", function(e) {
    e.useStaticFilesLoader({
        prefix: "app/i18n/",
        suffix: ".json"
    }), e.preferredLanguage("es"), e.useLocalStorage(), e.usePostCompiling(!0);
} ]).config([ "cfpLoadingBarProvider", function(e) {
    e.includeBar = !0, e.includeSpinner = !1, e.latencyThreshold = 500, e.parentSelector = ".wrapper > section";
} ]).config([ "$tooltipProvider", function(e) {
    e.options({
        appendToBody: !0
    });
} ]).config([ "$httpProvider", function(e) {
    e.interceptors.push("authRequestInterceptor"), e.interceptors.push("authResponseInterceptor");
} ]).config([ "$authProvider", "config", function(e, t) {
    e.facebook({
        clientId: t().AppFaceId
    }), e.google({
        clientId: t().AppGoogleId
    });
} ]), 
/**=========================================================
 * Module: constants.js
 * Define constants to inject across the application
 =========================================================*/
App.constant("APP_COLORS", {
    primary: "#5d9cec",
    success: "#27c24c",
    info: "#23b7e5",
    warning: "#ff902b",
    danger: "#f05050",
    inverse: "#131e26",
    green: "#37bc9b",
    pink: "#f532e5",
    purple: "#7266ba",
    dark: "#3a3f51",
    yellow: "#fad732",
    "gray-darker": "#232735",
    "gray-dark": "#3a3f51",
    gray: "#dde6e9",
    "gray-light": "#e4eaec",
    "gray-lighter": "#edf1f2"
}).constant("APP_MEDIAQUERY", {
    desktopLG: 1200,
    desktop: 992,
    tablet: 768,
    mobile: 480
}).constant("ROAD_RESTRICTION_TYPE", {
    TIME: "TIME",
    RESOURCE_TIME: "RESOURCE_TIME",
    FIXED_ROUTES: "FIXED_ROUTES"
}).constant("TYPE_LENGTH_OF_STAY", {
    FIXED: "FIXED",
    DEFINE_ITINERARY: "DEFINE_ITINERARY"
}).constant("APP_REQUIRES", {
    // jQuery based and standalone scripts
    scripts: {
        whirl: [ "vendor/whirl/dist/whirl.css" ],
        classyloader: [ "vendor/jquery-classyloader/js/jquery.classyloader.min.js" ],
        animo: [ "vendor/animo.js/animo.js" ],
        fastclick: [ "vendor/fastclick/lib/fastclick.js" ],
        modernizr: [ "vendor/modernizr/modernizr.js" ],
        animate: [ "vendor/animate.css/animate.min.css" ],
        icons: [ "vendor/skycons/skycons.js", "vendor/fontawesome/css/font-awesome.min.css", "vendor/simple-line-icons/css/simple-line-icons.css", "vendor/weather-icons/css/weather-icons.min.css" ],
        sparklines: [ "app/vendor/sparklines/jquery.sparkline.min.js" ],
        wysiwyg: [ "vendor/bootstrap-wysiwyg/bootstrap-wysiwyg.js", "vendor/bootstrap-wysiwyg/external/jquery.hotkeys.js" ],
        slimscroll: [ "vendor/slimScroll/jquery.slimscroll.min.js" ],
        screenfull: [ "vendor/screenfull/dist/screenfull.js" ],
        "vector-map": [ "vendor/ika.jvectormap/jquery-jvectormap-1.2.2.min.js", "vendor/ika.jvectormap/jquery-jvectormap-1.2.2.css" ],
        "vector-map-maps": [ "vendor/ika.jvectormap/jquery-jvectormap-world-mill-en.js", "vendor/ika.jvectormap/jquery-jvectormap-us-mill-en.js" ],
        loadGoogleMapsJS: [ "app/vendor/gmap/load-google-maps.js" ],
        "flot-chart": [ "vendor/Flot/jquery.flot.js" ],
        "flot-chart-plugins": [ "vendor/flot.tooltip/js/jquery.flot.tooltip.min.js", "vendor/Flot/jquery.flot.resize.js", "vendor/Flot/jquery.flot.pie.js", "vendor/Flot/jquery.flot.time.js", "vendor/Flot/jquery.flot.categories.js", "vendor/flot-spline/js/jquery.flot.spline.min.js" ],
        // jquery core and widgets
        "jquery-ui": [ "vendor/jquery-ui/ui/core.js", "vendor/jquery-ui/ui/widget.js" ],
        // loads only jquery required modules and touch support
        "jquery-ui-widgets": [ "vendor/jquery-ui/ui/core.js", "vendor/jquery-ui/ui/widget.js", "vendor/jquery-ui/ui/mouse.js", "vendor/jquery-ui/ui/draggable.js", "vendor/jquery-ui/ui/droppable.js", "vendor/jquery-ui/ui/sortable.js", "vendor/jqueryui-touch-punch/jquery.ui.touch-punch.min.js" ],
        moment: [ "vendor/moment/min/moment-with-locales.min.js" ],
        inputmask: [ "vendor/jquery.inputmask/dist/jquery.inputmask.bundle.min.js" ],
        flatdoc: [ "vendor/flatdoc/flatdoc.js" ],
        codemirror: [ "vendor/codemirror/lib/codemirror.js", "vendor/codemirror/lib/codemirror.css" ],
        // modes for common web files
        "codemirror-modes-web": [ "vendor/codemirror/mode/javascript/javascript.js", "vendor/codemirror/mode/xml/xml.js", "vendor/codemirror/mode/htmlmixed/htmlmixed.js", "vendor/codemirror/mode/css/css.js" ],
        taginput: [ "vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.css", "vendor/bootstrap-tagsinput/dist/bootstrap-tagsinput.min.js" ],
        bootstrap: [ "vendor/bootstrap/js/bootstrap.js" ],
        filestyle: [ "vendor/bootstrap-filestyle/src/bootstrap-filestyle.js" ],
        parsley: [ "vendor/parsleyjs/dist/parsley.min.js" ],
        fullcalendar: [ "vendor/fullcalendar/dist/fullcalendar.min.js", "vendor/fullcalendar/dist/fullcalendar.css" ],
        gcal: [ "vendor/fullcalendar/dist/gcal.js" ],
        chartjs: [ "vendor/Chart.js/Chart.js" ],
        morris: [ "vendor/raphael/raphael.js", "vendor/morris.js/morris.js", "vendor/morris.js/morris.css" ],
        "loaders.css": [ "vendor/loaders.css/loaders.css" ],
        spinkit: [ "vendor/spinkit/css/spinkit.css" ],
        openLayer: [ "vendor/openLayer3/ol-debug.js", "vendor/openLayer3/ol.css" ],
        openLayerSwitcher: [ "vendor/openLayerSwitcher/ol3-layerswitcher.js", "vendor/openLayerSwitcher/ol3-layerswitcher.css" ],
        // 'ol3-AnimatedCluster':[
        //                         'vendor/ol3-AnimatedCluster/interaction/selectclusterinteraction.js',
        //                         'vendor/ol3-AnimatedCluster/layer/animatedclusterlayer.js'
        //                       ],
        json2html: [ "vendor/json2html/jquery.json2html.js", "vendor/json2html/json2html.js" ],
        jsPDF: [ "vendor/jsPDF/jspdf.min.js" ],
        "jsPDF.plugins": [ "vendor/jsPDF/png.js", "vendor/jsPDF/zlib.js", "vendor/jsPDF/plugins/addimage.js", 
        //'vendor/jsPDF/plugins/addhtml.js',
        /*'vendor/jsPDF/plugins/annotations.js',
                              'vendor/jsPDF/plugins/autoprint.js',
                              'vendor/jsPDF/plugins/canvas.js',
                              'vendor/jsPDF/plugins/cell.js',
                              'vendor/jsPDF/plugins/context2d.js',
                              'vendor/jsPDF/plugins/from_html.js',
                              'vendor/jsPDF/plugins/javascript.js',
                              'vendor/jsPDF/plugins/outline.js',*/
        "vendor/jsPDF/plugins/png_support.js", 
        /*'vendor/jsPDF/plugins/split_text_to_size.js',
                              'vendor/jsPDF/plugins/standard_fonts_metrics.js',
                              'vendor/jsPDF/plugins/svg.js',
                              'vendor/jsPDF/plugins/total_pages.js',*/
        "vendor/jspdf-autotable/dist/jspdf.plugin.autotable.js" ],
        fakerJS: [ "vendor/fakerJS/js/faker.js", "vendor/fakerJS/js/prettyPrint.js", "vendor/fakerJS/locales/es/faker.es.min.js", "vendor/fakerJS/locales/en/faker.en.min.js", "vendor/fakerJS/locales/en_GB/faker.en_GB.min.js" ],
        alasql_excel: [ "vendor/alasql_xlsx/alasql.min.js", "vendor/alasql_xlsx/xlsx.core.min.js" ],
        uiSelect: [ "vendor/angular-ui-select3/src/select3.js", "vendor/angular-ui-select/dist/select.css" ]
    },
    modules: [ {
        name: "toaster",
        files: [ "vendor/angularjs-toaster/toaster.js", "vendor/angularjs-toaster/toaster.css" ]
    }, {
        name: "localytics.directives",
        files: [ "vendor/chosen_v1.2.0/chosen.jquery.min.js", "vendor/chosen_v1.2.0/chosen.min.css", "vendor/angular-chosen-localytics/chosen.js" ]
    }, {
        name: "ngDialog",
        files: [ "vendor/ngDialog/js/ngDialog.min.js", "vendor/ngDialog/css/ngDialog.min.css", "vendor/ngDialog/css/ngDialog-theme-default.min.css" ]
    }, {
        name: "ngWig",
        files: [ "vendor/ngWig/dist/ng-wig.min.js" ]
    }, {
        name: "ngTable",
        files: [ "vendor/ng-table/dist/ng-table.min.js", "vendor/ng-table/dist/ng-table.min.css" ]
    }, {
        name: "ngTableExport",
        files: [ "vendor/ng-table-export/ng-table-export.js" ]
    }, {
        name: "angularBootstrapNavTree",
        files: [ "vendor/angular-bootstrap-nav-tree/dist/abn_tree_directive.js", "vendor/angular-bootstrap-nav-tree/dist/abn_tree.css" ]
    }, {
        name: "htmlSortable",
        files: [ "vendor/html.sortable/dist/html.sortable.js", "vendor/html.sortable/dist/html.sortable.angular.js" ]
    }, {
        name: "xeditable",
        files: [ "vendor/angular-xeditable/dist/js/xeditable.js", "vendor/angular-xeditable/dist/css/xeditable.css" ]
    }, {
        name: "angularFileUpload",
        files: [ "vendor/angular-file-upload/angular-file-upload.js" ]
    }, {
        name: "ngImgCrop",
        files: [ "vendor/ng-img-crop/compile/unminified/ng-img-crop.js", "vendor/ng-img-crop/compile/unminified/ng-img-crop.css" ]
    }, {
        name: "ui.select",
        files: [ "vendor/angular-ui-select/dist/select.js", "vendor/angular-ui-select/dist/select.css" ]
    }, {
        name: "ui.codemirror",
        files: [ "vendor/angular-ui-codemirror/ui-codemirror.js" ]
    }, {
        name: "angular-carousel",
        files: [ "vendor/angular-carousel/dist/angular-carousel.css", "vendor/angular-carousel/dist/angular-carousel.js" ]
    }, {
        name: "ngGrid",
        files: [ "vendor/ng-grid/build/ng-grid.min.js", "vendor/ng-grid/ng-grid.css" ]
    }, {
        name: "infinite-scroll",
        files: [ "vendor/ngInfiniteScroll/build/ng-infinite-scroll.js" ]
    }, {
        name: "ui.bootstrap-slider",
        files: [ "vendor/seiyria-bootstrap-slider/dist/bootstrap-slider.min.js", "vendor/seiyria-bootstrap-slider/dist/css/bootstrap-slider.min.css", "vendor/angular-bootstrap-slider/slider.js" ]
    }, {
        name: "ui.bootstrap.datepicker",
        files: [ "vendor/angular-bootstrap-datepicker/ui-bootstrap-datepicker-tpls-0.14.3.min.js" ]
    }, {
        name: "textAngularSetup",
        files: [ "vendor/textAngular/src/textAngularSetup.js" ]
    }, {
        name: "textAngular",
        files: [ "vendor/textAngular/dist/textAngular-rangy.min.js", "vendor/textAngular/src/textAngular.js", "vendor/textAngular/src/textAngularSetup.js", "vendor/textAngular/src/textAngular.css" ],
        serie: !0
    }, {
        name: "angular-rickshaw",
        files: [ "vendor/d3/d3.min.js", "vendor/rickshaw/rickshaw.js", "vendor/rickshaw/rickshaw.min.css", "vendor/angular-rickshaw/rickshaw.js" ],
        serie: !0
    }, {
        name: "angular-chartist",
        files: [ "vendor/chartist/dist/chartist.min.css", "vendor/chartist/dist/chartist.js", "vendor/angular-chartist.js/dist/angular-chartist.js" ],
        serie: !0
    }, {
        name: "ui.map",
        files: [ "vendor/angular-ui-map/ui-map.js" ]
    }, {
        name: "datatables",
        files: [ "vendor/datatables/media/css/jquery.dataTables.css", "vendor/datatables/media/js/jquery.dataTables.js", "vendor/angular-datatables/dist/angular-datatables.js" ],
        serie: !0
    }, {
        name: "angular-jqcloud",
        files: [ "vendor/jqcloud2/dist/jqcloud.css", "vendor/jqcloud2/dist/jqcloud.js", "vendor/angular-jqcloud/angular-jqcloud.js" ]
    }, {
        name: "angularGrid",
        files: [ "vendor/ag-grid/dist/angular-grid.css", "vendor/ag-grid/dist/angular-grid.js", "vendor/ag-grid/dist/theme-dark.css", "vendor/ag-grid/dist/theme-fresh.css" ]
    }, {
        name: "ng-nestable",
        files: [ "vendor/ng-nestable/src/angular-nestable.js", "vendor/nestable/jquery.nestable.js" ]
    }, {
        name: "akoenig.deckgrid",
        files: [ "vendor/angular-deckgrid/angular-deckgrid.js" ]
    }, {
        name: "satellizer",
        files: [ "vendor/satellizer/satellizer.js" ]
    } ]
}), 
/**=========================================================
 * Module: main.js
 * Main Application Controller
 =========================================================*/
App.controller("AppController", [ "$rootScope", "$scope", "$state", "$translate", "$window", "$localStorage", "$timeout", "toggleStateService", "colors", "browser", "cfpLoadingBar", "oauthHttp", "resincTknRefresh", "tokenStorage", "loadingStatus", "tempStorageData", function(n, a, i, o, s, e, l, t, r, c, u, d, p, g, m, h) {
    "use strict";
    void 0 !== n.$stateParams.tknrefresh && typeof n.$stateParams.tknrefresh ? g.get() || g.getRefreshToken() || void 0 === n.$stateParams.tknrefresh && "" == n.$stateParams.tknrefresh || (g.setRefreshToken(n.$stateParams.tknrefresh), 
    n.$stateParams.tknrefresh = void 0) : console.log(n.$stateParams.tknrefresh);
    var f;
    new p(
    //success
    function() {
        var e, t = "app.home";
        "/access/login" != n.locationChange.newState && (e = n.locationChange.newState, 
        t = "/app/itinerary/list" == e && void 0 === h.data.cachedJourney ? "app.journeys.add" : "/app/maps/route" == e && void 0 === h.data.journeyRoutes || "/app/assignedServices/add" == e && void 0 === h.data.journeyRoutes || "/app/routes/detail" == e && void 0 === h.data.journeyRoutes || "/app/visits/list" == e && void 0 === h.data.journeyRoutes ? "app.routes.list" : function(e) {
            e = e.split("/").join(".");
            "." == e.charAt(0) && (e = e.slice(1));
            "." == e.charAt(e.length - 1) && (e = e.slice(0, -1));
            return e;
        }(e)), i.go(t);
    }, 
    //fail
    function() {
        i.go("access.login");
    });
    n.$on("refresh_token", function(e, t) {
        new d(t).$refreshToken(function(e) {
            g.set(e);
        }, function(e) {
            console.log("refresh_token : faild"), console.log(e);
        });
    }), 
    // Setup the layout mode
    n.app.layout.horizontal = "app-h" == n.$stateParams.layout, n.$on("$stateChangeStart", function(e, t, a, o, r) {
        $(".wrapper > section").length && (// check if bar container exists
        f = l(function() {
            u.start();
        }, 0)), // sets a latency Threshold
        console.log("$stateChangeStart"), console.log("toState"), console.log(t), 
        console.log("toParams"), console.log(a), console.log("fromState"), console.log(o), 
        console.log("fromParams"), console.log(r);
    }), n.$on("$stateChangeSuccess", function(e, t, a, o, r) {
        e.targetScope.$watch("$viewContentLoaded", function() {
            l.cancel(f), u.complete();
        }), console.log("$stateChangeSuccess"), console.log("toState"), console.log(t), 
        console.log("toParams"), console.log(a), console.log("fromState"), console.log(o), 
        console.log("fromParams"), console.log(r), n.app.showingMap = -1 != t.name.indexOf("maps");
    }), 
    // Hook not found
    n.$on("$stateNotFound", function(e, t, a, o) {
        console.log(t.to), // "lazy.state"
        console.log(t.toParams), // {a:1, b:2}
        console.log(t.options);
    }), 
    // Hook error
    n.$on("$stateChangeError", function(e, t, a, o, r, n) {
        console.log(n);
    }), 
    // Hook success
    n.$on("$stateChangeSuccess", function(e, t, a, o, r) {
        // display new view from top
        s.scrollTo(0, 0), 
        // Save the route title
        n.currTitle = i.current.title;
    }), n.currTitle = i.current.title, n.pageTitle = function() {
        var e = n.app.name + " - " + (n.currTitle || n.app.description);
        return document.title = e;
    }, 
    // iPad may presents ghost click issues
    // if( ! browser.ipad )
    // FastClick.attach(document.body);
    // Close submenu when sidebar change from collapsed to normal
    n.$watch("app.layout.isCollapsed", function(e, t) {
        !1 === e && n.$broadcast("closeSidebarMenu");
    }), 
    // Restore layout settings
    angular.isDefined(e.layout) ? a.app.layout = e.layout : e.layout = a.app.layout, 
    n.$watch("app.layout", function() {
        e.layout = a.app.layout;
    }, !0), 
    // Allows to use branding color with interpolation
    // {{ colorByName('primary') }}
    a.colorByName = r.byName, 
    // Internationalization
    // ----------------------
    a.language = {
        // Handles language dropdown
        listIsOpen: !1,
        // list of available languages
        available: {
            en: "English",
            es: "Español"
        },
        // display always the current ui language
        init: function() {
            var e = o.proposedLanguage() || o.use(), t = o.preferredLanguage();
            // we know we have set a preferred one in app.config
            a.language.selected = a.language.available[e || t];
        },
        set: function(e, t) {
            // Set the new idiom
            o.use(e), 
            // save a reference for the current language
            a.language.selected = a.language.available[e], 
            // finally toggle dropdown
            a.language.listIsOpen = !a.language.listIsOpen;
        }
    }, a.language.init(), 
    // Restore application classes state
    t.restoreState($(document.body)), 
    // cancel click event easily
    n.cancel = function(e) {
        e.stopPropagation();
    };
} ]), 
/**=========================================================
 * Module: offsidebar_controller.js
 * controllador para el offsidebar derecho
 =========================================================*/
App.controller("OffsidebarController", [ "$scope", "$rootScope", function(t, e) {
    $body = $("body");
    var a = "offsidebar-open";
    function o(e) {
        for (k in $body.hasClass(a) || $body.addClass(a), t.tabs) t.tabs[k].active = !1;
        t.tabs[e].active = !0;
    }
    t.tabs = {
        route: {
            active: !1,
            name: "route"
        },
        other: {
            active: !1,
            name: "other"
        }
    }, t.$on("offsidebar.route.open", function(e) {
        o("route");
    }), t.$on("offsidebar.other.open", function(e) {
        o("other");
    }), t.$on("offsidebar.close", function(e) {
        $body.hasClass(a) && $body.removeClass(a);
    }), e.$watch("app.showingMap", function() {
        !e.app.showingMap && $body.hasClass(a) && $body.removeClass(a);
    });
} ])
/**=========================================================
 * Module: sidebar-menu.js
 * Handle sidebar collapsible elements
 =========================================================*/, App.controller("SidebarController", [ "$rootScope", "$scope", "$state", "$http", "$timeout", "Utils", "tempStorageData", function(a, o, t, r, e, n, i) {
    function s(e) {
        var a;
        return e && (e.sref && "#" != e.sref ? t.is(e.sref) || t.includes(e.sref) : (a = !1, 
        angular.forEach(e.submenu, function(e, t) {
            s(e) && (a = !0);
        }), a));
    }
    var l = [];
    // demo: when switch from collapse to hover, close all items
    a.$watch("app.layout.asideHover", function(e, t) {
        !1 === t && !0 === e && c(-1);
    });
    function c(e) {
        for (var t in e += "", l) (e < 0 || e.indexOf(t) < 0) && (l[t] = !0);
    }
    // Load menu from json file
    // -----------------------------------
    o.getMenuItemPropClasses = function(e) {
        return (e.heading ? "nav-heading" : "") + (s(e) ? " active" : "");
    }, o.goToRoutes = function() {
        delete i.data.journeyRoutes, void 0 !== i.data.mapRoute && delete i.data.mapRoute, 
        t.go("app.routes.list");
    }, o.loadSidebarMenu = function() {
        var //cambiar esto aqui para colocar la ruta del menu dinamico
        e = "server/sidebar-menu.json?v=" + new Date().getTime(); // jumps cache
        r.get(e).success(function(e) {
            o.menuItems = e;
        }).error(function(e, t, a, o) {
            alert("Failure loading menu");
        });
    }, o.loadSidebarMenu(), 
    // Handle sidebar collapse items
    // -----------------------------------
    o.addCollapse = function(e, t) {
        l[e] = !!a.app.layout.asideHover || !s(t);
    }, o.isCollapse = function(e) {
        return l[e];
    }, o.toggleCollapse = function(e, t) {
        // collapsed sidebar doesn't toggle drodopwn
        return n.isSidebarCollapsed() || a.app.layout.asideHover || (
        // make sure the item index exists
        angular.isDefined(l[e]) ? o.lastEventFromChild || (l[e] = !l[e], c(e)) : t && c(-1), 
        o.lastEventFromChild = "string" == typeof (t = e) && !(t.indexOf("-") < 0)), 
        !0;
    };
} ]), 
/**=========================================================
 * Module: anchor.js
 * Disables null anchor behavior
 =========================================================*/
App.directive("href", function() {
    return {
        restrict: "A",
        compile: function(e, a) {
            return function(e, t) {
                !a.ngClick && "" !== a.href && "#" !== a.href || t.hasClass("dropdown-toggle") || t.on("click", function(e) {
                    e.preventDefault(), e.stopPropagation();
                });
            };
        }
    };
}), 
/**=========================================================
 * Module: animate-enabled.js
 * Enable or disables ngAnimate for element with directive
 =========================================================*/
App.directive("animateEnabled", [ "$animate", function(o) {
    return {
        link: function(e, t, a) {
            e.$watch(function() {
                return e.$eval(a.animateEnabled, e);
            }, function(e) {
                o.enabled(!!e, t);
            });
        }
    };
} ]), App.directive("buttonLoading", function() {
    return {
        restrict: "C",
        scope: {
            loading: "=loadingStatus"
        },
        link: function(e, t, a) {
            t.bind("click", function() {
                e.loading ? t.button("loading") : t.button("reset");
            }), e.$watch("loading", function() {
                e.loading ? t.button("loading") : t.button("reset");
            });
        }
    };
}), App.directive("calendar", function() {
    return {
        restrict: "AEC",
        scope: {
            options: "="
        },
        link: function(e, t, a) {
            $.isFunction($.fn.datepicker) && 
            /*
  $.fn.datepicker.dates['es'] = {
    days: ["Domingo", "Lunes", "Martes", "Miércoles", "Jueves", "Viernes", "Sábado", "Domingo"],
    daysShort: ["Dom", "Lun", "Mar", "Mié", "Jue", "Vie", "Sáb", "Dom"],
    daysMin: ["Do", "Lu", "Ma", "Mi", "Ju", "Vi", "Sa", "Do"],
    months: ["Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio", "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"],
    monthsShort: ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"],
    today: "Hoy"
  };
*/
            t.datepicker(e.options);
        }
    };
}), function(l) {
    return {
        restrict: "A",
        scope: {
            data: "=",
            options: "=",
            id: "@",
            width: "=",
            height: "=",
            resize: "=",
            chart: "@",
            segments: "@",
            responsive: "=",
            tooltip: "=",
            legend: "="
        },
        link: function(a, o) {
            var r, n = o[0].getContext("2d"), i = !1, s = (a.size = function() {
                a.width <= 0 ? (o.width(o.parent().width()), n.canvas.width = o.width()) : (n.canvas.width = a.width || n.canvas.width, 
                i = !0), a.height <= 0 ? (o.height(o.parent().height()), n.canvas.height = n.canvas.width / 2) : (n.canvas.height = a.height || n.canvas.height, 
                i = !0);
            }, a.$watch("data", function(e, t) {
                r && r.destroy(), 
                // if data not defined, exit
                e && (a.chart && (l = a.chart), i && (a.size(), s = new Chart(n)), 
                (a.responsive || a.resize) && (a.options.responsive = !0), void 0 !== a.responsive && (a.options.responsive = a.responsive), 
                (r = s[l](a.data, a.options)).update(), a.legend) && angular.element(o[0]).parent().after(r.generateLegend());
            }, !0), a.$watch("tooltip", function(e, t) {
                r && r.draw(), void 0 === e || !r.segments || !isFinite(e) || e >= r.segments.length || e < 0 || ((e = r.segments[e]).save(), 
                e.fillColor = e.highlightColor, r.showTooltip([ e ]), e.restore());
            }, !0), a.size(), new Chart(n));
        }
    };
}), myApp = (
/* Aliases for various chart types */
App.directive("chartjs", function() {
    return ChartJS();
}), App.directive("linechart", function() {
    return ChartJS("Line");
}), App.directive("barchart", function() {
    return ChartJS("Bar");
}), App.directive("radarchart", function() {
    return ChartJS("Radar");
}), App.directive("polarchart", function() {
    return ChartJS("PolarArea");
}), App.directive("piechart", function() {
    return ChartJS("Pie");
}), App.directive("doughnutchart", function() {
    return ChartJS("Doughnut");
}), App.directive("donutchart", function() {
    return ChartJS("Doughnut");
}), 
/**=========================================================
 * Module: classy-loader.js
 * Enable use of classyloader directly from data attributes
 =========================================================*/
App.directive("classyloader", [ "$timeout", "Utils", function(n, i) {
    "use strict";
    var s = $(window), l = "js-is-in-view"; // a classname to detect when a chart has been triggered after scroll
    return {
        restrict: "A",
        link: function(e, a, t) {
            function o(e, t) {
                !e.hasClass(l) && i.isInView(e, {
                    topoffset: -20
                }) && r(e, t);
            }
            function r(e, t) {
                e.ClassyLoader(t).addClass(l);
            }
            // run after interpolation  
            n(function() {
                var e = $(a), t = e.data();
                // At lease we need a data-percentage attribute
                t && 
                // if the element starts already in view
                (t.triggerInView ? (s.scroll(function() {
                    o(e, t);
                }), o) : r)(e, t);
            }, 0);
        }
    };
} ]), 
/**=========================================================
 * Module: clear-storage.js
 * Removes a key from the browser storage via element click
 =========================================================*/
App.directive("resetKey", [ "$state", "$rootScope", function(a, o) {
    "use strict";
    return {
        restrict: "A",
        scope: {
            resetKey: "="
        },
        link: function(e, t, a) {
            e.resetKey = a.resetKey;
        },
        controller: [ "$scope", "$element", function(t, e) {
            e.on("click", function(e) {
                e.preventDefault(), t.resetKey ? (delete o.$storage[t.resetKey], 
                a.go(a.current, {}, {
                    reload: !0
                })) : $.error("No storage key specified for reset.");
            });
        } ]
    };
} ]), 
/**=========================================================
 * Module: filestyle.js
 * Initializes the fielstyle plugin
 =========================================================*/
App.directive("filestyle", function() {
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            var a = t.data();
            // old usage support
            a.classInput = t.data("classinput") || a.classInput, a.input = !0, t.filestyle(a);
        } ]
    };
}), 
/**=========================================================
 * Module: flatdoc.js
 * Creates the flatdoc markup and initializes the plugin
 =========================================================*/
App.directive("flatdoc", [ "$location", function(e) {
    return {
        restrict: "EA",
        template: "<div role='flatdoc'><div role='flatdoc-menu'></div><div role='flatdoc-content'></div></div>",
        link: function(e, t, a) {
            Flatdoc.run({
                fetcher: Flatdoc.file(a.src)
            });
            var o = $("html, body");
            $(document).on("flatdoc:ready", function() {
                var t = $('[role="flatdoc-menu"]');
                t.find("a").on("click", function(e) {
                    e.preventDefault(), e.stopPropagation();
                    e = $(this);
                    t.find("a.active").removeClass("active"), e.addClass("active"), 
                    o.animate({
                        scrollTop: $(this.getAttribute("href")).offset().top - ($(".topnavbar").height() + 10)
                    }, 800);
                });
            });
        }
    };
} ]), 
/**=========================================================
 * Module: flot.js
 * Initializes the Flot chart plugin and handles data refresh
 =========================================================*/
App.directive("flot", [ "$http", "$timeout", function(s, l) {
    "use strict";
    return {
        restrict: "EA",
        template: "<div></div>",
        scope: {
            dataset: "=?",
            options: "=",
            series: "=",
            callback: "=",
            src: "="
        },
        link: function(t, e, a) {
            var r, o, n;
            function i(e) {
                if (r && e) {
                    var t, o = r.getData();
                    for (t in e) angular.forEach(e[t], function(a) {
                        return function(e, t) {
                            o[t] && o[t][a] && (o[t][a].show = e);
                        };
                    }(t));
                    r.setData(o), r.draw();
                }
            }
            r = null, n = a.width || "100%", a = a.height || 220, (o = $(e.children()[0])).css({
                width: n,
                height: a
            }), t.$watchCollection("dataset", function(e) {
                return r ? (r.setData(e), r.setupGrid(), r.draw()) : (r = function() {
                    var e;
                    if (t.dataset && t.options) return e = $.plot(o, t.dataset, t.options), 
                    t.$emit("plotReady", e), t.callback && t.callback(e, t), e;
                }(), i(t.series), r);
            }, !0), t.$watch("series", i, !0), t.$watch("src", function(e) {
                e && s.get(e).success(function(e) {
                    l(function() {
                        t.dataset = e;
                    });
                }).error(function() {
                    $.error("Flot chart: Bad request.");
                });
            });
        }
    };
} ]), 
/**=========================================================
 * Module: form-wizard.js
 * Handles form wizard plugin and validation
 =========================================================*/
App.directive("formWizard", [ "$parse", function(r) {
    "use strict";
    return {
        restrict: "A",
        scope: !0,
        link: function(e, t, a) {
            var o = r(a.validateSteps)(e), a = new n(a.steps, !!o, t);
            e.wizard = a.init();
        }
    };
    function n(e, t, a) {
        var o = this;
        o.quantity = parseInt(e, 10), o.validate = t, o.element = a, o.init = function() {
            // always start at fist step
            return o.createsteps(o.quantity), o.go(1), o;
        }, o.go = function(e) {
            if (angular.isDefined(o.steps[e])) {
                if (o.validate && 1 !== e) {
                    var t = $(o.element), a = t.children().children("div").get(e - 2);
                    if (!1 === t.parsley().validate(a.id)) return !1;
                }
                o.cleanall(), o.steps[e] = !0;
            }
        }, o.active = function(e) {
            return !!o.steps[e];
        }, o.cleanall = function() {
            for (var e in o.steps) o.steps[e] = !1;
        }, o.createsteps = function(e) {
            o.steps = [];
            for (var t = 1; t <= e; t++) o.steps[t] = !1;
        };
    }
} ]), 
/**=========================================================
 * Module: fullscreen.js
 * Toggle the fullscreen mode on/off
 =========================================================*/
App.directive("toggleFullscreen", function() {
    "use strict";
    return {
        restrict: "A",
        link: function(e, t, a) {
            t.on("click", function(e) {
                e.preventDefault(), screenfull.enabled ? (screenfull.toggle(), 
                // Switch icon indicator
                screenfull.isFullscreen ? $(this).children("em").removeClass("fa-expand").addClass("fa-compress") : $(this).children("em").removeClass("fa-compress").addClass("fa-expand")) : $.error("Fullscreen not enabled");
            });
        }
    };
}), App.directive("keyboardPoster", [ "$parse", function(o) {
    return function(e, t, a) {
        angular.element(t)[0].onsearch = function() {
            o(a.postFunction)(e);
        };
    };
} ])
/**=========================================================
 * Module: load-css.js
 * Request and load into the current page a css file
 =========================================================*/, App.directive("loadCss", function() {
    "use strict";
    return {
        restrict: "A",
        link: function(e, t, a) {
            t.on("click", function(e) {
                t.is("a") && e.preventDefault();
                e = a.loadCss;
                e ? function(e) {
                    var t = "autoloaded-stylesheet", a = $("#" + t).attr("id", t + "-old");
                    $("head").append($("<link/>").attr({
                        id: t,
                        rel: "stylesheet",
                        href: e
                    })), a.length && a.remove();
                    return $("#" + t);
                }(e) || $.error("Error creating stylesheet link element.") : $.error("No stylesheet location defined.");
            });
        }
    };
}), 
/**=========================================================
 * Module: masked,js
 * Initializes the masked inputs
 =========================================================*/
App.directive("masked", function() {
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            t = $(t);
            $.fn.inputmask && t.inputmask();
        } ]
    };
}), 
/**=========================================================
 * Module: morris.js
 * AngularJS Directives for Morris Charts
 =========================================================*/
!function() {
    "use strict";
    function e(o) {
        return function() {
            return {
                restrict: "EA",
                scope: {
                    morrisData: "=",
                    morrisOptions: "="
                },
                link: function(a, e, t) {
                    // start ready to watch for changes in data
                    a.$watch("morrisData", function(e, t) {
                        e && (a.morrisInstance.setData(e), a.morrisInstance.redraw());
                    }, !0), 
                    // the element that contains the chart
                    a.morrisOptions.element = e, 
                    // If data defined copy to options
                    a.morrisData && (a.morrisOptions.data = a.morrisData), 
                    // Init chart
                    a.morrisInstance = new Morris[o](a.morrisOptions);
                }
            };
        };
    }
    App.directive("morrisBar", e("Bar")), App.directive("morrisDonut", e("Donut")), 
    App.directive("morrisLine", e("Line")), App.directive("morrisArea", e("Area"));
}(), 
/**=========================================================
 * Module: navbar-search.js
 * Navbar search toggler * Auto dismiss on ESC key
 =========================================================*/
App.directive("searchOpen", [ "navSearch", function(a) {
    "use strict";
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            t.on("click", function(e) {
                e.stopPropagation();
            }).on("click", a.toggle);
        } ]
    };
} ]).directive("searchDismiss", [ "navSearch", function(a) {
    "use strict";
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            $('.navbar-form input[type="text"]').on("click", function(e) {
                e.stopPropagation();
            }).on("keyup", function(e) {
                27 == e.keyCode && // ESC
                a.dismiss();
            }), 
            // click anywhere closes the search
            $(document).on("click", a.dismiss), 
            // dismissable options
            t.on("click", function(e) {
                e.stopPropagation();
            }).on("click", a.dismiss);
        } ]
    };
} ]), 
/**=========================================================
 * Module: notify.js
 * Directive for notify plugin
 =========================================================*/
App.directive("notify", [ "$window", "Notify", function(e, o) {
    return {
        restrict: "A",
        scope: {
            options: "=",
            message: "="
        },
        link: function(t, e, a) {
            e.on("click", function(e) {
                e.preventDefault(), o.alert(t.message, t.options);
            });
        }
    };
} ]), 
/**=========================================================
 * Module: now.js
 * Provides a simple way to display the current time formatted
 =========================================================*/
App.directive("now", [ "dateFilter", "$interval", function(n, i) {
    return {
        restrict: "E",
        link: function(e, t, a) {
            var o = a.format;
            function r() {
                var e = n(new Date(), o);
                t.text(e);
            }
            r(), i(r, 1e3);
        }
    };
} ]), App.directive("geoPagination", [ "$parse", function(e) {
    return {
        restrict: "AE",
        replace: !0,
        template: '<ul class="pagination pagination-sm" ng-repeat="item in paginations.visiblePages"><li><a class="itemAndres" ng-click="">{{item}}</a></li></ul>',
        controller: [ "$scope", function(e) {
            /*
    	$scope.andres = function() {
    		alert("aqui toy");
    	}
*/} ],
        scope: {
            itemperpage: "=?",
            totalpages: "=?",
            currentpage: "=?",
            totalitems: "=?",
            changepage: "&"
        },
        link: function(t, e, a) {
            console.log("element"), console.log(e), console.log("scope"), console.log(t), 
            /*
      $("a.itemAndres").on('click', function() {
        alert("aqui toy");

      })
      */
            $("a").on("click", function() {
                alert($(this).text());
            }), t.paginations = {
                currentPage: 1,
                first: "«",
                last: "»",
                pages: [],
                visiblePages: [],
                totalItems: t.totalitems,
                totalPages: 10,
                maxSize: 3,
                itemPerPage: t.itemperpage,
                setPages: function(e) {
                    for (key in this.visiblePages = [], this.visiblePages.push(this.first), 
                    e) this.visiblePages.push(e[key]);
                    this.visiblePages.push(this.last), t.changepage();
                },
                changedTotalPages: function() {
                    var e = Math.ceil(this.totalItems / this.itemPerPage);
                    if (1 < e) {
                        for (var t = 1; t <= e; t++) this.pages.push(t);
                        var a = this.pages.slice(0, this.maxSize);
                        this.setPages(a);
                    }
                },
                changePage: function(e) {
                    alert("aqui toy");
                    var t, a, o = this.visiblePages.slice(1, this.maxSize + 1);
                    e == this.first ? (t = this.pages.indexOf(o[0]), o[0] == this.currentPage ? 0 !== t && 0 < (a = this.pages.slice(t - 1, t + 2)).length && (this.setPages(a), 
                    this.currentPage--) : this.currentPage--) : e == this.last ? (t = this.pages.indexOf(o[o.length - 1])) !== this.pages.length - 1 && (o[o.length - 1] == this.currentPage ? 0 < (a = this.pages.slice(t - 1, t + 2)).length && (this.setPages(a), 
                    this.currentPage++) : this.currentPage++) : this.currentPage = e;
                }
            }, t.$watch("paginations.totalitems", function() {
                t.paginations.changedTotalPages();
            });
        }
    };
} ])
/**=========================================================
 * Module panel-tools.js
 * Directive tools to control panels. 
 * Allows collapse, refresh and dismiss (remove)
 * Saves panel state in browser storage
 =========================================================*/, App.directive("paneltool", [ "$compile", "$timeout", function(i, t) {
    var s = {
        /* jshint multistr: true */
        collapse: "<a href='#' panel-collapse='' tooltip='Collapse Panel' ng-click='{{panelId}} = !{{panelId}}'>                 <em ng-show='{{panelId}}' class='fa fa-plus'></em>                 <em ng-show='!{{panelId}}' class='fa fa-minus'></em>               </a>",
        dismiss: "<a href='#' panel-dismiss='' tooltip='Close Panel'>               <em class='fa fa-times'></em>             </a>",
        refresh: "<a href='#' panel-refresh='' data-spinner='{{spinner}}' tooltip='Refresh Panel'>               <em class='fa fa-refresh'></em>             </a>"
    };
    return {
        restrict: "E",
        scope: !1,
        link: function(o, r, e) {
            var n = o.panelTools || e;
            t(function() {
                var e, t, a;
                r.html((e = r, a = "", (t = (t = n) || {}).toolCollapse && (a += s.collapse.replace(/{{panelId}}/g, e.parent().parent().attr("id"))), 
                t.toolDismiss && (a += s.dismiss), t.toolRefresh && (a += s.refresh.replace(/{{spinner}}/g, t.toolRefresh)), 
                a)).show(), i(r.contents())(o), r.addClass("pull-right");
            });
        }
    };
} ])
/**=========================================================
 * Dismiss panels * [panel-dismiss]
 =========================================================*/.directive("panelDismiss", [ "$q", "Utils", function(i, s) {
    "use strict";
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(n, e) {
            e.on("click", function() {
                // find the first parent panel
                var e, t, a = $(this).closest(".panel");
                // Run the animation before destroy the panel
                function o() {
                    s.support.animation ? a.animo({
                        animation: "bounceOut"
                    }, r) : r();
                }
                function r() {
                    var e = a.parent();
                    a.remove(), 
                    // remove the parent if it is a row and is empty and not a sortable (portlet)
                    e.filter(function() {
                        var e = $(this);
                        return e.is('[class*="col-"]:not(.sortable)') && 0 === e.children("*").length;
                    }).remove(), 
                    // Communicate event destroyed panel
                    n.$emit("panel-removed", a.attr("id"));
                }
                e = i.defer(), t = e.promise, 
                // Communicate event destroying panel
                n.$emit("panel-remove", a.attr("id"), e), t.then(o);
            });
        } ]
    };
} ])
/**=========================================================
 * Collapse panels * [panel-collapse]
 =========================================================*/.directive("panelCollapse", [ "$timeout", function(a) {
    "use strict";
    var n, i = "panelState";
    return {
        restrict: "A",
        scope: !1,
        controller: [ "$scope", "$element", function(o, e) {
            // Prepare the panel to be collapsible
            var // find the first parent panel
            r = $(e).closest(".panel").attr("id"), t = (n = o.$storage, function(e) {
                if (!e) return !1;
                var t = angular.fromJson(n[i]);
                if (t) return t[e];
            }(r));
            void 0 !== t && a(function() {
                o[r] = t;
            }, 10), 
            // bind events to switch icons
            e.bind("click", function() {
                var e, t = r, a = !o[r];
                t && ((e = (e = angular.fromJson(n[i])) || {})[t] = a, n[i] = angular.toJson(e));
            });
        } ]
    };
} ])
/**=========================================================
 * Refresh panels
 * [panel-refresh] * [data-spinner="standard"]
 =========================================================*/.directive("panelRefresh", [ "$q", function(e) {
    "use strict";
    return {
        restrict: "A",
        scope: !1,
        controller: [ "$scope", "$element", function(a, e) {
            // catch clicks to toggle panel refresh
            e.on("click", function() {
                var e = $(this), t = e.parents(".panel").eq(0), e = e.data("spinner") || "standard";
                // start showing the spinner
                t.addClass("whirl " + e), 
                // Emit event when refresh clicked
                a.$emit("panel-refresh", t.attr("id"));
            }), 
            // listen to remove spinner
            a.$on("removeSpinner", 
            // method to clear the spinner when done
            function(e, t) {
                t && (t = "#" == t.charAt(0) ? t : "#" + t, angular.element(t).removeClass("whirl"));
            });
        } ]
    };
} ]), 
/**=========================================================
 * Module: play-animation.js
 * Provides a simple way to run animation with a trigger
 * Requires animo.js
 =========================================================*/
App.directive("animate", [ "$window", "Utils", function(e, l) {
    "use strict";
    var c = $(window).add("body, .wrapper");
    return {
        restrict: "A",
        link: function(e, t, a) {
            // Parse animations params and attach trigger to scroll
            var o = $(t), r = o.data("offset"), n = o.data("delay") || 100, // milliseconds
            i = o.data("play") || "bounce";
            // Test an element visibilty and trigger the given animation
            function s(e) {
                !e.hasClass("anim-running") && l.isInView(e, {
                    topoffset: r
                }) && (e.addClass("anim-running"), setTimeout(function() {
                    e.addClass("anim-done").animo({
                        animation: i,
                        duration: .7
                    });
                }, n));
            }
            // Run click triggered animations
            void 0 !== r && (
            // test if the element starts visible
            s(o), 
            // test on scroll
            c.scroll(function() {
                s(o);
            })), o.on("click", function() {
                var e = $(this), t = e.data("target"), e = e.data("play") || "bounce", t = $(t);
                t && t.length && t.animo({
                    animation: e
                });
            });
        }
    };
} ]), 
/**=========================================================
 * Module: scroll.js
 * Make a content box scrollable
 =========================================================*/
App.directive("scrollable", function() {
    return {
        restrict: "EA",
        link: function(e, t, a) {
            t.slimScroll({
                height: a.height || 250
            });
        }
    };
}), 
/**=========================================================
 * Module: sidebar.js
 * Wraps the sidebar and handles collapsed state
 =========================================================*/
App.directive("sidebar", [ "$rootScope", "$window", "Utils", function(n, e, r) {
    var i, s, l = $(e), c = $("body");
    n.$state.current.name;
    return {
        restrict: "EA",
        template: '<nav class="sidebar" ng-transclude></nav>',
        transclude: !0,
        replace: !0,
        link: function(e, t, a) {
            i = e, s = t;
            var t = r.isTouch() ? "click" : "mouseenter", o = $();
            s.on(t, ".nav > li", function() {
                (r.isSidebarCollapsed() || n.app.layout.asideHover) && (o.trigger("mouseleave"), 
                o = 
                // Handles hover to open items under collapsed menu
                // ----------------------------------- 
                function(e) {
                    d();
                    var t = e.children("ul");
                    if (!t.length) return $();
                    if (e.hasClass("open")) return u(e), $();
                    var a = $(".aside"), o = $(".aside-inner"), o = parseInt(o.css("padding-top"), 0) + parseInt(a.css("padding-top"), 0), r = t.clone().appendTo(a), t = (u(e), 
                    e.position().top + o - s.scrollTop()), a = l.height();
                    return r.addClass("nav-floating").css({
                        position: i.app.layout.isFixed ? "fixed" : "absolute",
                        top: t,
                        bottom: r.outerHeight(!0) + t > a ? 0 : "auto"
                    }), r.on("mouseleave", function() {
                        u(e), r.remove();
                    }), r;
                }($(this)), $("<div/>", {
                    class: "dropdown-backdrop"
                }).insertAfter(".aside-inner").on("click mouseenter", function() {
                    d();
                }));
            }), e.$on("closeSidebarMenu", function() {
                d();
            }), 
            // Normalize state when resize to mobile
            l.on("resize", function() {
                r.isMobile() || c.removeClass("aside-toggled");
            }), 
            // Adjustment on route changes
            n.$on("$stateChangeStart", function(e, t, a, o, r) {
                t.name, 
                // Hide sidebar automatically on mobile
                $("body.aside-toggled").removeClass("aside-toggled"), n.$broadcast("closeSidebarMenu");
            }), 
            // Allows to close
            angular.isDefined(a.sidebarAnyclickClose) && $(".wrapper").on("click.sidebar", function(e) {
                // don't check if sidebar not visible
                !c.hasClass("aside-toggled") || $(e.target).parents(".aside").length || c.removeClass("aside-toggled");
                // if not child of sidebar
            });
        }
    };
    // Open the collapse sidebar submenu items when on touch devices 
    // - desktop only opens on hover
    function u(e) {
        e.siblings("li").removeClass("open").end().toggleClass("open");
    }
    function d() {
        $(".dropdown-backdrop").remove(), $(".sidebar-subnav.nav-floating").remove(), 
        $(".sidebar li.open").removeClass("open");
    }
} ]), 
/**=========================================================
 * Module: skycons.js
 * Include any animated weather icon from Skycons
 =========================================================*/
App.directive("skycon", function() {
    return {
        restrict: "A",
        link: function(e, t, a) {
            var o = new Skycons({
                color: a.color || "white"
            });
            t.html('<canvas width="' + a.width + '" height="' + a.height + '"></canvas>'), 
            o.add(t.children()[0], a.skycon), o.play();
        }
    };
}), 
/**=========================================================
 * Module: sparkline.js
 * SparkLines Mini Charts
 =========================================================*/
App.directive("sparkline", [ "$timeout", "$window", function(t, e) {
    "use strict";
    return {
        restrict: "EA",
        controller: [ "$scope", "$element", function(e, a) {
            t(function() {
                var e, t;
                (t = (e = a).data()).type = t.type || "bar", // default chart is bar
                t.disableHiddenCheck = !0, e.sparkline("html", t), t.resize && $(window).resize(function() {
                    e.sparkline("html", t);
                });
            });
        } ]
    };
} ]), 
/**=========================================================
 * Module: table-checkall.js
 * Tables check all checkbox
 =========================================================*/
App.directive("checkAll", function() {
    "use strict";
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            t.on("change", function() {
                var e = $(this), t = e.index() + 1, a = e.find('input[type="checkbox"]');
                // Make sure to affect only the correct checkbox column
                e.parents("table").find("tbody > tr > td:nth-child(" + t + ') input[type="checkbox"]').prop("checked", a[0].checked);
            });
        } ]
    };
}), 
/**=========================================================
 * Module: tags-input.js
 * Initializes the tag inputs plugin
 =========================================================*/
App.directive("tagsinput", [ "$timeout", function(r) {
    return {
        restrict: "A",
        require: "ngModel",
        link: function(e, t, a, o) {
            t.on("itemAdded itemRemoved", function() {
                // check if view value is not empty and is a string
                // and update the view from string to an array of tags
                o.$viewValue && o.$viewValue.split && (o.$setViewValue(o.$viewValue.split(",")), 
                o.$render());
            }), r(function() {
                t.tagsinput();
            });
        }
    };
} ]), 
/**=========================================================
 * Module: toggle-state.js
 * Toggle a classname from the BODY Useful to change a state that 
 * affects globally the entire layout or more than one item 
 * Targeted elements must have [toggle-state="CLASS-NAME-TO-TOGGLE"]
 * User no-persist to avoid saving the sate in browser storage
 =========================================================*/
App.directive("toggleState", [ "toggleStateService", function(r) {
    "use strict";
    return {
        restrict: "A",
        link: function(e, t, a) {
            var o = $("body");
            $(t).on("click", function(e) {
                e.preventDefault();
                e = a.toggleState;
                e && (o.hasClass(e) ? (o.removeClass(e), a.noPersist || r.removeState(e)) : (o.addClass(e), 
                a.noPersist || r.addState(e)));
            });
        }
    };
} ]), 
/**=========================================================
 * Module: trigger-resize.js
 * Triggers a window resize event from any element
 =========================================================*/
App.directive("triggerResize", [ "$window", "$timeout", function(o, r) {
    return {
        restrict: "A",
        link: function(e, t, a) {
            t.on("click", function() {
                r(function() {
                    o.dispatchEvent(new Event("resize"));
                });
            });
        }
    };
} ]), 
/**=========================================================
 * Module: validate-form.js
 * Initializes the validation plugin Parsley
 =========================================================*/
App.directive("validateForm", function() {
    return {
        restrict: "A",
        controller: [ "$scope", "$element", function(e, t) {
            t = $(t);
            $.fn.parsley && t.parsley();
        } ]
    };
}), 
/**=========================================================
 * Module: vector-map.js.js
 * Init jQuery Vector Map plugin
 =========================================================*/
App.directive("vectorMap", [ "vectorMap", function(r) {
    "use strict";
    var n = {
        markerColor: "#23b7e5",
        // the marker points
        bgColor: "transparent",
        // the background
        scaleColors: [ "#878c9a" ],
        // the color of the region in the serie
        regionFill: "#bbbec6"
    };
    return {
        restrict: "EA",
        link: function(e, t, a) {
            var o = a.height || "300", a = {
                markerColor: a.markerColor || n.markerColor,
                bgColor: a.bgColor || n.bgColor,
                scale: a.scale || 1,
                scaleColors: a.scaleColors || n.scaleColors,
                regionFill: a.regionFill || n.regionFill,
                mapName: a.mapName || "world_mill_en"
            };
            t.css("height", o), r.init(t, a, e.seriesData, e.markersData);
        }
    };
} ]), App.service("addressHttp", [ "$http", "$q", "config", function(t, a, o) {
    return {
        geoCoding: function(e) {
            return console.log("corregir parametro url addressHttp.js"), t({
                method: "post",
                data: e,
                //                      url: 'http://52.26.129.237:9001/hanoit/api/v1/geocoding'
                url: o().path.api.geocoding
            }).then(r, n);
        }
    };
    function r(e) {
        return e;
    }
    function n(e) {
        return a.reject(e);
    }
} ]), 
/**=========================================================
 * Module: address_model.js
 * modelo para el manejo de direcciones
 =========================================================*/
App.factory("Address", [ "$q", "$http", "JourneyHttp", function(t, e, a) {
    var o = {
        id: "",
        address: "",
        city: "",
        volume: "",
        weight: "",
        lengthOfStay: "",
        minTime: "",
        maxTime: "",
        zone: "",
        x: 0,
        y: 0,
        recipienName: "",
        senderName: "",
        itineraryId: "",
        phoneNumber: "",
        status: !1,
        recipientGuide: "",
        alias: "",
        observations: "",
        deliveryTime: ""
    };
    function r(e) {
        // body...
        e ? this.setData(e) : this.setData(o);
    }
    return r.prototype = {
        setData: function(e) {
            $.extend(!0, this, o, e);
        }
        /*,

      getLatitude : function () {
        return this.lat;
      },

      getLongitude : function () {
        return this.lon;
      },

      setLatitude : function (lat) {
        this.lat = lat;
      },

      setLongitude : function (lon) {
        this.lon = lon;
      },

      getAddress : function () {
        return this.address;
      },

      setAddress : function (address) {
        this.address = address;
      }*/
    }, r.getAddressesJourney = function(e) {
        /*
      JourneyHttp.getPlaces().then(function(result){
        var data = (journeyId)? result.places : [];
        deferred.resolve(data)
      }, function(result) {
        deferred.reject(result);
      })
*/
        return t.defer().promise;
    }, r;
} ]), 
/**=========================================================
 * Module: drivers_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("AssignedServicesHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.assignedServices, {
        id: "@id",
        ids: "@ids"
    }, actions = {
        save: {
            method: "POST"
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    });
} ]), App.service("oauthHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.signup, {}, {
        validateUser: {
            method: "POST",
            url: o().path.login,
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            params: {
                client_id: o().clientId,
                scope: "read write",
                grant_type: "password",
                username: "@username",
                password: "@password",
                client_secret: o().clientSecret
            }
        },
        refreshToken: {
            method: "POST",
            url: o().path.login,
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            params: {
                client_id: o().clientId,
                grant_type: "refresh_token",
                refresh_token: "@refresh_token",
                client_secret: o().clientSecret
            }
        },
        signup: {
            method: "POST",
            url: o().path.signup,
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            params: {
                username: "@username",
                password: "@password",
                password_repeat: "@password_repeat"
            }
        },
        activate: {
            method: "POST",
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            url: o().path.signup + "/activate",
            params: {
                token: "@token"
            }
        },
        forgotPassword: {
            method: "POST",
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            url: o().path.forgotPassword,
            params: {
                email: "@email"
            }
        },
        resetPassword: {
            method: "POST",
            headers: {
                Authorization: "Basic SEFOT0lULUFQUDoxMjM0NTY="
            },
            url: o().path.forgotPassword + "/reset",
            params: {
                token: "@token",
                password: "@password",
                "password-repeat": "@password_repeat"
            }
        }
    });
} ]), App.factory("authRequestInterceptor", [ "tokenStorage", function(t) {
    return {
        request: function(e) {
            //    	console.log(config);
            //      config.headers.Authorization = 'Basic SEFOT0lULUFQUDoxMjM0NTY=';
            return null == e.headers.Authorization && (e.headers = e.headers || {}, 
            void 0 === t.get() && null === t.get() || (e.headers.Authorization = "Bearer " + t.get())), 
            e;
        }
    };
} ]), App.service("authResponseInterceptor", [ "$q", "$timeout", "$location", "tokenStorage", "message", "$rootScope", "$window", function(t, e, a, o, r, n, i) {
    return {
        response: function(e) {
            return e;
        },
        responseError: function(e) {
            return 0 == e.status ? (alert("Verifique su conexión a Internet"), 
            //        messageStorage.add("warning", "Verifique su conexión a Internet");
            console.info("==== error 1"), t.reject(e.status)) : void 0 !== e.data.error ? (console.info("==== error 2"), 
            "invalid_token" !== e.data.error || n.updatingToken ? (console.info("==== error 2.2"), 
            console.dir(e), t.reject(e)) : (o.resetToken(), r.show("error", "acceso denegado"), 
            a.path("access/login"), console.info("==== error 2.1"), t.reject(null))) : void 0 !== e.data ? (console.info("==== error 3"), 
            t.resolve(e.data)) : (console.info("==== error 4"), t.resolve(e));
        }
    };
} ]), 
/**=========================================================
 * Module: browser.js
 * Browser detection
 =========================================================*/
App.service("browser", function() {
    "use strict";
    var e, t, a;
    return t = (t = window.navigator.userAgent).toLowerCase(), a = /(opr)[\/]([\w.]+)/.exec(t) || /(chrome)[ \/]([\w.]+)/.exec(t) || /(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(t) || /(webkit)[ \/]([\w.]+)/.exec(t) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(t) || /(msie) ([\w.]+)/.exec(t) || 0 <= t.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(t) || t.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(t) || [], 
    t = /(ipad)/.exec(t) || /(iphone)/.exec(t) || /(android)/.exec(t) || /(windows phone)/.exec(t) || /(win)/.exec(t) || /(mac)/.exec(t) || /(linux)/.exec(t) || /(cros)/i.exec(t) || [], 
    e = {}, (a = {
        browser: a[3] || a[1] || "",
        version: a[2] || "0",
        platform: t[0] || ""
    }).browser && (e[a.browser] = !0, e.version = a.version, e.versionNumber = parseInt(a.version)), 
    a.platform && (e[a.platform] = !0), 
    // These are all considered mobile platforms, meaning they run a mobile browser
    (e.android || e.ipad || e.iphone || e["windows phone"]) && (e.mobile = !0), 
    // These are all considered desktop platforms, meaning they run a desktop browser
    (e.cros || e.mac || e.linux || e.win) && (e.desktop = !0), 
    // Chrome, Opera 15+ and Safari are webkit based browsers
    (e.chrome || e.opr || e.safari) && (e.webkit = !0), 
    // IE11 has a new token so we will assign it msie to avoid breaking changes
    e.rv && (a.browser = "msie", e.msie = !0), 
    // Opera 15+ are identified as opr
    e.opr && (a.browser = "opera", e.opera = !0), 
    // Stock Android browsers are marked as Safari on Android.
    e.safari && e.android && (e[a.browser = "android"] = !0), 
    // Assign the name and platform variable
    e.name = a.browser, e.platform = a.platform, e;
}), 
/**=========================================================
 * Module: drivers_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("CatalogsHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.catalogs, {
        id: "@id"
    }, actions = {
        getList: {
            method: "GET",
            isArray: !0
        },
        save: {
            method: "POST"
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        }
    });
} ]), 
/**=========================================================
 * Module: colors.js
 * Services to retrieve global colors
 =========================================================*/
App.factory("colors", [ "APP_COLORS", function(t) {
    return {
        byName: function(e) {
            return t[e] || "#fff";
        }
    };
} ]), App.factory("Decoder", [ function() {
    function a(e) {
        // array that holds the points
        e = e.replace(/\\\\/g, "\\");
        window.navigator.vendor;
        /*if (browser.search("Google") == 0 || browser.search("Opera") == 0)
       {
       encoded = encoded.replace(/\\\\/g, '\\');
       } 
       else if(window.navigator.appCodeName==="Mozilla")
       {
       encoded = encoded.replace(/\\\\/g, '\\');
       }*/
        for (var t = [], a = 0, o = e.length, r = 0, n = 0; a < o; ) {
            for (var i, s = 0, l = 0; //finds ascii and substract it by 63
            l |= (31 & (i = e.charAt(a++).charCodeAt(0) - 63)) << s, s += 5, 32 <= i; );
            var c = 0 != (1 & l) ? ~(l >> 1) : l >> 1;
            for (r += c, l = s = 0; l |= (31 & (i = e.charAt(a++).charCodeAt(0) - 63)) << s, 
            s += 5, 32 <= i; );
            //change here 1E5 --> 1E6
            t.push({
                latitude: r / 1e6,
                longitude: (n += 0 != (1 & l) ? ~(l >> 1) : l >> 1) / 1e6
            });
        }
        return t;
    }
    return {
        decodePoints: a,
        decodePaths: function(e) {
            var t = [];
            return angular.isArray(e) && angular.forEach(e, function(e) {
                this.push(a(e));
            }, t), t;
        }
    };
} ])
/**=========================================================
 * Module: drivers_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/, App.service("DriversHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.drivers, {
        id: "@id",
        ids: "@ids"
    }, actions = {
        getList: {
            method: "GET",
            isArray: !0
        },
        save: {
            method: "POST"
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    });
} ]), 
/**=========================================================
 * Module: geocoding_adapter.js
 * adaptador para el servicio de geocoding en el mapa
 =========================================================*/
App.factory("Geocoding", [ function(e) {
    var t = {
        result: {
            longitude: 0,
            latitude: 0,
            address: "",
            status: !1
        },
        address: "address",
        longitude: "longitude",
        latitude: "latitude",
        status: "status"
    };
    function a(e) {
        e ? this.setData(e) : this.setData(t);
    }
    return a.prototype.setData = function(e) {
        $.extend(!0, this, t, e); // body...
    }, a.prototype._setter = function(e, t) {
        this.result.hasOwnProperty(e) && (this.result[e] = t);
    }, a.prototype._getter = function(e) {
        if (this.result.hasOwnProperty(e)) return this.result[e];
    }, a.prototype.setLatitude = function(e) {
        this._setter(this.latitude, e);
    }, a.prototype.setLongitude = function(e) {
        this._setter(this.longitude, e);
    }, a.prototype.setAddress = function(e) {
        this._setter(this.address, e);
    }, a.prototype.setStatus = function(e) {
        this._setter(this.status, e);
    }, a.prototype.getLatitude = function(e) {
        var t = Number(this._getter(this.latitude));
        return NaN === t ? 0 : t;
        // return this._getter(this.latitude);
    }, a.prototype.getLongitude = function(e) {
        var t = Number(this._getter(this.longitude));
        return NaN === t ? 0 : t;
        //return this._getter(this.longitude);
    }, a.prototype.getAddress = function(e) {
        return this._getter(this.address);
    }, a.prototype.getStatus = function(e) {
        return this._getter(this.status);
    }, a.prototype.getResult = function() {
        return this.result;
    }, a;
} ]), 
/**=========================================================
 * Module: geocoding_services.js
 * servicios para geocodificacion y la geocodificacion inversa
 =========================================================*/
App.factory("GeocodingServices", [ "$http", "$q", "config", function(a, r, n) {
    return {
        reverse: function(e, t) {
            var o = r.defer(), e = {
                location: {
                    x: e,
                    y: t
                }
            };
            return a.post(n().path.api.reverse_geocoding, e).success(function(e, t) {
                o.resolve(e);
            }).error(function(e, t) {
                console.info("=====********======="), console.dir(arguments);
                var a = {};
                a.status = e.status, a.message = e.message, o.reject(a);
            }), o.promise;
        }
    };
} ]), 
/**=========================================================
 * Module: geolocation_service.js
 * servicio de geolocalizacion para la aplicaion
 =========================================================*/
App.factory("GeoLocation", [ "$q", function(t) {
    function o(e) {
        e.reject({
            latitude: 0,
            longitude: 0
        });
    }
    return {
        getLocation: function() {
            var a, e = t.defer();
            return a = e, navigator.geolocation ? navigator.geolocation.getCurrentPosition(function(e) {
                e = {
                    latitude: e.coords.latitude,
                    longitude: e.coords.longitude
                };
                a.resolve(e);
            }, function(e) {
                var t = "";
                switch (e.code) {
                  case e.PERMISSION_DENIED:
                    t = "User denied the request for Geolocation.";
                    break;

                  case e.POSITION_UNAVAILABLE:
                    t = "Location information is unavailable.";
                    break;

                  case e.TIMEOUT:
                    t = "The request to get user location timed out.";
                    break;

                  case e.UNKNOWN_ERROR:
                    t = "An unknown error occurred.";
                }
                console.log(t), o(a);
            }) : o(a), e.promise;
        }
    };
} ]), 
/**=========================================================
 * Module: itinerary_model.js
 * modelo para manejo de itinerarios y sus direcciones
 =========================================================*/
App.factory("Itinerary", [ "$q", "$http", "Address", function(n, e, o) {
    "use strict";
    var t = {
        id: "",
        journey: "",
        addresses: [],
        initAddress: ""
    }, r = 0;
    function a(e) {
        e ? this.setData(e) : this.setData(t);
    }
    return a.prototype = {
        setData: function(e) {
            $.extend(!0, this, t, e);
        },
        load: function() {
            return this.loadAddresses(1); // cambiar esto para no cambiar datos por defecto
            //return this.loadAddresses(this.id);
        },
        loadAddresses: function(e) {
            var a = this;
            return o.getAddressesJourney(e).then(function(e) {
                return angular.forEach(e, function(e, t) {
                    r = e.id > r ? e.id : r, a.addresses.push(new o(e));
                }), !0;
            }, function(e) {
                return console.error("=== Error Itinerary :", e), !1;
            });
        },
        setAddresses: function(e) {
            var a;
            angular.isArray(e) && (this.addresses.clear(), a = this, angular.forEach(e, function(e, t) {
                e.itineraryId = a.id, a.addresses.push(new o(e));
            }));
        },
        getAddresses: function() {
            return this.addresses;
        },
        uploadItinerary: function(e) {
            // TODO: subir el itinerario al servidor y hacer lo qeu diga en le parametro doThat
            var t, a, o, r = this;
            return this.addresses, t = n.defer(), a = Math.floor(99999 * Math.random()), 
            o = {
                id: a,
                name: "Journey-" + a,
                settingId: 1,
                routes: Math.floor(100 * Math.random())
            }, setTimeout(function() {
                t.resolve(o);
            }, 3e3), t.promise.then(function(e) {
                return r.journeyId = e.id, r.save(), e;
            });
        },
        save: function() {
            // body...
            console.log("=== save Itinerary: ", this);
        },
        addAddress: function(e) {
            return this._retrivieInstance(e);
        },
        removeAddress: function(e) {
            e = this._search(e.id);
            if (e) return this.addresses.splice(e, 1);
        },
        updateAddress: function(e) {
            return this._retrivieInstance(e);
        },
        _search: function(e) {
            for (var t = 0; t < this.addresses.length; t++) if (e == this.addresses[t].id) return this.addresses[t];
        },
        _retrivieInstance: function(e) {
            var t = this._search(e.id);
            return t ? t.setData(e) : ((t = new o(e)).id = ++r, this.addresses.push(t)), 
            t;
        }
    }, a;
} ]), 
/**=========================================================
 * Module: journeys_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("JourneyHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    o = o().path.api.journeys;
    //        var url = 'http://52.26.129.237:9001/hanoit/api/v1/journeys';
    //        var url = 'http://192.168.1.42:9000/hanoit/api/v1/journeys';
    return a(o, {
        id: "@id",
        ids: "@ids"
    }, {
        getList: {
            url: o + "/summary",
            method: "GET",
            isArray: !0
        },
        detail: {
            method: "GET"
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    }, {});
    //return $resource(url);
} ]), 
/**=========================================================
 * Module: journey_model.js
 * modelo para el manejo de trayectos
 =========================================================*/
App.factory("Journey", [ "Itinerary", function(e) {
    var t = {
        id: "",
        name: "",
        setting: {
            id: ""
        },
        routes: 0,
        file: ""
    };
    function a(e) {
        e ? this.setData(e) : this.setData(t);
    }
    return a.prototype = {
        setData: function(e) {
            $.extend(!0, this, t, e);
        }
    }, a;
} ]), App.service("loadingStatus", function() {
    return {
        visible: !1,
        show: function() {
            this.visible = !0;
        },
        hide: function() {
            this.visible = !1;
        }
    };
}), 
/**=========================================================
 * Modudule: mapping_services.js
 * servicio para mapear campos de las peticiones y respuestas
 =========================================================*/
App.factory("Mapping", [ function() {
    return {
        mapping: 
        /**
   * @param  {object}   src         objecto de origen de valores
   * @param  {object}   model       campos a mapear del objeto de origen 
   * @param  {boolean}  inverse     mapeo de datos inversos desde el origen 
   *                                (false : src -> dst, true: dst -> src)
   * @return {object}   result      objecto con los campos mapeados desde el origen
   */
        function(e, t, a) {
            var a = a || !1, o = "", r = "", n = {};
            if (e && t) {
                for (var i = 0; i < t.length; ++i) o = a ? (r = t[i].dst, t[i].src) : (r = t[i].src, 
                t[i].dst), e.hasOwnProperty(r) && (n[o] = e[r]);
                return n;
            }
            console.log(r);
        },
        model: {
            addressModel: [ {
                src: "id",
                dst: "id"
            }, {
                src: "_desc",
                dst: "address"
            }, {
                src: "latitude",
                dst: "y"
            }, {
                src: "longitude",
                dst: "x"
            }, {
                src: "weight",
                dst: "weigth"
            }, {
                src: "volume",
                dst: "volume"
            }, {
                src: "unloadingTime",
                dst: "lengthOfStay"
            }, {
                src: "city",
                dst: "city"
            } ]
        }
    };
} ]), App.factory("message", [ "$timeout", function(e) {
    var t = {
        messages: [],
        show: function(e, t) {
            null !== t && (toastr.options.closeButton = !0, toastr.options.positionClass = "toast-top-center", 
            toastr.options.progressBar = !0, toastr.options.preventDuplicates = !0, 
            //toastr[type](message, '');
            "check" == e ? toastr.info(t) : "success" == e ? toastr.success(t) : "warning" == e ? toastr.warning(t) : "error" == e && toastr.error(t));
        }
    };
    return t;
} ]), 
/**=========================================================
 * Module: nav-search.js
 * Services to share navbar search functions
 =========================================================*/
App.service("navSearch", function() {
    var a = "form.navbar-form";
    return {
        toggle: function() {
            var e = $(a), t = (e.toggleClass("open"), e.hasClass("open"));
            e.find("input")[t ? "focus" : "blur"]();
        },
        dismiss: function() {
            $(a).removeClass("open").find('input[type="text"]').blur().val("");
        }
    };
}), 
/**=========================================================
 * Module: notify.js
 * Create a notifications that fade out automatically.
 * Based on Notify addon from UIKit (http://getuikit.com/docs/addons_notify.html)
 =========================================================*/
App.service("Notify", [ "$timeout", function(a) {
    this.alert = 
    ////////////////
    function(e, t) {
        e && a(function() {
            $.notify(e, t || {});
        });
    };
} ]), 
/**
 * Notify Addon definition as jQuery plugin
 * Adapted version to work with Bootstrap classes
 * More information http://getuikit.com/docs/addons_notify.html
 */
!function(t) {
    function e(e) {
        return "string" == t.type(e) && (e = {
            message: e
        }), arguments[1] && (e = t.extend(e, "string" == t.type(arguments[1]) ? {
            status: arguments[1]
        } : arguments[1])), new a(e).show();
    }
    function a(e) {
        this.options = t.extend({}, a.defaults, e), this.uuid = "ID" + new Date().getTime() + "RAND" + Math.ceil(1e5 * Math.random()), 
        this.element = t([ 
        // @geedmo: alert-dismissable enables bs close icon
        '<div class="uk-notify-message alert-dismissable">', '<a class="close">&times;</a>', "<div>" + this.options.message + "</div>", "</div>" ].join("")).data("notifyMessage", this), 
        // status
        this.options.status && (this.element.addClass("alert alert-" + this.options.status), 
        this.currentstatus = this.options.status), this.group = this.options.group, 
        r[this.uuid] = this, o[this.options.pos] || (o[this.options.pos] = t('<div class="uk-notify uk-notify-' + this.options.pos + '"></div>').appendTo("body").on("click", ".uk-notify-message", function() {
            t(this).data("notifyMessage").close();
        }));
    }
    var o = {}, r = {};
    t.extend(a.prototype, {
        uuid: !1,
        element: !1,
        timout: !1,
        currentstatus: "",
        group: !1,
        show: function() {
            var t, e;
            if (!this.element.is(":visible")) return o[(t = this).options.pos].show().prepend(this.element), 
            e = parseInt(this.element.css("margin-bottom"), 10), this.element.css({
                opacity: 0,
                "margin-top": -1 * this.element.outerHeight(),
                "margin-bottom": 0
            }).animate({
                opacity: 1,
                "margin-top": 0,
                "margin-bottom": e
            }, function() {
                var e;
                t.options.timeout && (e = function() {
                    t.close();
                }, t.timeout = setTimeout(e, t.options.timeout), t.element.hover(function() {
                    clearTimeout(t.timeout);
                }, function() {
                    t.timeout = setTimeout(e, t.options.timeout);
                }));
            }), this;
        },
        close: function(e) {
            function t() {
                a.element.remove(), o[a.options.pos].children().length || o[a.options.pos].hide(), 
                delete r[a.uuid];
            }
            var a = this;
            this.timeout && clearTimeout(this.timeout), e ? t() : this.element.animate({
                opacity: 0,
                "margin-top": -1 * this.element.outerHeight(),
                "margin-bottom": 0
            }, function() {
                t();
            });
        },
        content: function(e) {
            var t = this.element.find(">div");
            return e ? (t.html(e), this) : t.html();
        },
        status: function(e) {
            return e ? (this.element.removeClass("alert alert-" + this.currentstatus).addClass("alert alert-" + e), 
            this.currentstatus = e, this) : this.currentstatus;
        }
    }), a.defaults = {
        message: "",
        status: "normal",
        timeout: 5e3,
        group: null,
        pos: "top-center"
    }, t.notify = e, t.notify.message = a, t.notify.closeAll = function(e, t) {
        if (e) for (var a in r) e === r[a].group && r[a].close(t); else for (var a in r) r[a].close(t);
    };
}(jQuery, (window, document)), 
/**=========================================================
 * Module: osrm_http.js
 * service para las conexiones con los servicios de ruteo.
 =========================================================*/
App.service("osrmHttp", [ "$http", "$q", "$filter", "config", function(i, e, t, a) {
    return {
        OptimalRouteOfPointCloud: function(e) {
            var t = s(e.setting.finishTime), a = s(e.setting.initTime);
            a = t < a ? Math.round((s("23:59") - a) / 1e3) + Math.round((t - s("00:00")) / 1e3) : Math.round((s(e.setting.finishTime) - s(e.setting.initTime)) / 1e3);
            //      var maxiumTime = Math.round( (parseTime(Journey.setting.finishTime) - parseTime(Journey.setting.initTime)) / 1000);
            for (var o = {
                nameJourney: e.name,
                routeRestrictionType: e.setting.roadRestrictionType,
                cargoInput: [],
                configuration: {
                    maxiumTime: a,
                    startTime: e.setting.initTime + ":00",
                    backToDepot: e.setting.backToStartPoint,
                    resource: [ {} ],
                    depot: {
                        name: e.place.name,
                        address: e.place.address,
                        latitude: e.place.latitude,
                        longitude: e.place.longitude
                    },
                    restriction: [ {} ]
                },
                date: l(e.date),
                numberOfRoutes: e.setting.fixedRoutes,
                transport: [ {} ]
            }, r = 0; r < e.itinerary.length; r++) {
                var n = "FIXED" == e.setting.typeLengthOfStay ? e.setting.lengthOfStay : e.itinerary[r].timeState;
                o.cargoInput.push({
                    id: e.itinerary[r].id,
                    _desc: e.itinerary[r].address,
                    latitude: e.itinerary[r].latitude,
                    longitude: e.itinerary[r].longitude,
                    timeState: e.itinerary[r].timeState,
                    guideNumber: e.itinerary[r].guideNumber,
                    weight: e.itinerary[r].weight,
                    volume: e.itinerary[r].volume,
                    unloadingTime: 60 * n,
                    city: "BOGOTA"
                });
            }
            return i({
                method: "post",
                data: o,
                url: "http://app.ruteando.co:9000/hanoit/v2/delivery/optimalRouteOfPointCloud"
            });
        },
        optimisationForMessenger: function(e) {
            var t = s(e.setting.finishTime), a = s(e.setting.initTime);
            a = t < a ? Math.round((s("23:59") - a) / 1e3) + Math.round((t - s("00:00")) / 1e3) : Math.round((s(e.setting.finishTime) - s(e.setting.initTime)) / 1e3);
            //      var maxiumTime = Math.round( (parseTime(Journey.setting.finishTime) - parseTime(Journey.setting.initTime)) / 1000);
            for (var o = {
                nameJourney: e.name,
                routeRestrictionType: e.setting.roadRestrictionType,
                cargoInput: [],
                configuration: {
                    maxiumTime: a,
                    startTime: e.setting.initTime + ":00",
                    backToDepot: e.setting.backToStartPoint,
                    resource: [ {} ],
                    depot: {
                        name: e.place.name,
                        address: e.place.address,
                        latitude: e.place.latitude,
                        longitude: e.place.longitude
                    },
                    restriction: [ {} ]
                },
                date: l(e.date),
                numberOfRoutes: e.setting.fixedRoutes,
                transport: [ {} ]
            }, r = 0; r < e.itinerary.length; r++) {
                var n = "FIXED" == e.setting.typeLengthOfStay ? e.setting.lengthOfStay : e.itinerary[r].timeState;
                o.cargoInput.push({
                    id: e.itinerary[r].id,
                    _desc: e.itinerary[r].address,
                    latitude: e.itinerary[r].latitude,
                    longitude: e.itinerary[r].longitude,
                    weight: e.itinerary[r].weight,
                    volume: e.itinerary[r].volume,
                    unloadingTime: 60 * n,
                    city: "BOGOTA"
                });
            }
            return i({
                method: "post",
                data: o,
                url: "http://app.ruteando.co:9000/hanoit/v2/delivery/optimisationForMessenger"
            });
        },
        optimisationForPackages: function(e) {
            var t = s(e.setting.finishTime), a = s(e.setting.initTime);
            a = t < a ? Math.round((s("23:59") - a) / 1e3) + Math.round((t - s("00:00")) / 1e3) : Math.round((s(e.setting.finishTime) - s(e.setting.initTime)) / 1e3);
            //      var maxiumTime = Math.round( (parseTime(Journey.setting.finishTime) - parseTime(Journey.setting.initTime)) / 1000);
            for (var o = {
                nameJourney: e.name,
                routeRestrictionType: e.setting.roadRestrictionType,
                cargoInput: [],
                configuration: {
                    maxiumTime: a,
                    startTime: e.setting.initTime + ":00",
                    backToDepot: e.setting.backToStartPoint,
                    resource: [],
                    depot: {
                        name: e.place.name,
                        address: e.place.address,
                        latitude: e.place.latitude,
                        longitude: e.place.longitude
                    },
                    restriction: []
                },
                date: l(e.date),
                numberOfRoutes: e.setting.fixedRoutes,
                transport: [ {} ]
            }, r = 0; r < e.itinerary.length; r++) {
                var n = "FIXED" == e.setting.typeLengthOfStay ? e.setting.lengthOfStay : e.itinerary[r].timeState;
                o.cargoInput.push({
                    id: e.itinerary[r].id,
                    _desc: e.itinerary[r].address,
                    latitude: e.itinerary[r].latitude,
                    longitude: e.itinerary[r].longitude,
                    weight: e.itinerary[r].weigth,
                    volume: e.itinerary[r].volume,
                    unloadingTime: 60 * n,
                    city: "BOGOTA"
                });
            }
            if (e.setting.evaluateWeight && e.setting.evaluateVolume) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.resource.push({
                name: e.setting.settingResource[r].typeVehicle.name,
                maxiumVolume: e.setting.settingResource[r].typeVehicle.volume,
                maxiumWeight: e.setting.settingResource[r].typeVehicle.weight,
                quantity: e.setting.settingResource[r].quantity
            }); else if (e.setting.evaluateWeight) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.resource.push({
                name: e.setting.settingResource[r].typeVehicle.name,
                maxiumWeight: e.setting.settingResource[r].typeVehicle.weight,
                quantity: e.setting.settingResource[r].quantity
            }); else if (e.setting.evaluateVolume) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.resource.push({
                name: e.setting.settingResource[r].typeVehicle.name,
                maxiumVolume: e.setting.settingResource[r].typeVehicle.volume,
                quantity: e.setting.settingResource[r].quantity
            }); else o.configuration.resource = null;
            if (e.setting.evaluateRestrictionPackage) {
                if (e.setting.evaluateWeight && e.setting.evaluateVolume) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.restriction.push({
                    name: e.setting.settingResource[r].typeVehicle.name,
                    nameOfResources: [ e.setting.settingResource[r].typeVehicle.name ],
                    upperWeightLimit: e.setting.settingResource[r].typeVehicle.restriction.maxWeight,
                    lowerWeightLimit: e.setting.settingResource[r].typeVehicle.restriction.minWeight,
                    upperVolumeLimit: e.setting.settingResource[r].typeVehicle.restriction.maxVolume,
                    lowerVolumeLimit: e.setting.settingResource[r].typeVehicle.restriction.minVolume
                }); else if (e.setting.evaluateWeight) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.restriction.push({
                    name: e.setting.settingResource[r].typeVehicle.name,
                    nameOfResources: [ e.setting.settingResource[r].typeVehicle.name ],
                    upperWeightLimit: e.setting.settingResource[r].typeVehicle.restriction.maxWeight,
                    lowerWeightLimit: e.setting.settingResource[r].typeVehicle.restriction.minWeight
                }); else if (e.setting.evaluateVolume) for (r = 0; r < e.setting.settingResource.length; r++) o.configuration.restriction.push({
                    name: e.setting.settingResource[r].typeVehicle.name,
                    nameOfResources: [ e.setting.settingResource[r].typeVehicle.name ],
                    upperVolumeLimit: e.setting.settingResource[r].typeVehicle.restriction.maxVolume,
                    lowerVolumeLimit: e.setting.settingResource[r].typeVehicle.restriction.minVolume
                });
            } else o.configuration.restriction = null;
            return console.log(o), i({
                method: "post",
                data: o,
                url: "http://app.ruteando.co:9000/hanoit/v2/delivery/optimisationForPackages"
            });
        }
    };
    function s(e) {
        var e = e.split(":"), t = new Date();
        return t.setHours(e[0]), t.setMinutes(e[1]), t;
    }
    function l(e) {
        return t("date")(e, "yyyy-MM-dd");
        /*      
      var year = date.getYear();
      var month = date.getMonth();
      var day = date.getDay();
      return year + "-" + month + "-" + day;
      */
    }
} ]), 
/**=========================================================
 * Module: address_model.js
 * modelo para el manejo de direcciones
 =========================================================*/
App.factory("PdfExporter", [ "$filter", function(g) {
    function t(e, t) {
        var a, o = new Image();
        o.onError = function() {
            throw new Error('Cannot load image: "' + e + '"');
        }, o.onload = function() {
            var e = document.createElement("canvas");
            document.body.appendChild(e), e.width = o.width, e.height = o.height, 
            e.getContext("2d").drawImage(o, 0, 0), 
            // Grab the image as a jpeg encoded in base64, but only the data
            a = e.toDataURL("image/jpeg").slice("data:image/jpeg;base64,".length), 
            // Convert the data to binary form
            a = atob(a), document.body.removeChild(e), "function" == typeof t && t(a);
        }, o.src = e;
    }
    var r = {
        url: "app/img/logo_ruteando2.jpg",
        image: null
    }, n = {
        xs: 8,
        sm: 10,
        mds: 12,
        md: 14,
        mdl: 16,
        lg: 18,
        xl: 20
    }
    /*  HELP FORT STYLES
  {
      cellPadding: 5,         // number (pt unit)
      fontSize: 10,           // number (pt unit)
      font: "helvetica",      // helvetica, times, courier
      lineColor: 200,         // number( 0 -255 gray scale) , array(R,G,B)
      lineWidth: 0.1,         // number( 0 -255 gray scale) , array(R,G,B)
      fontStyle: 'normal',    // normal, bold, italic, bolditalic
      overflow: 'ellipsize',  // visible, hidden, ellipsize or linebreak
      fillColor: 255,         // number o array(R,G,B)
      textColor: 20,          // number o array(R,G,B)
      halign: 'left',         // left, center, right
      valign: 'middle',       // top, middle, bottom
      fillStyle: 'F',         // 'S', 'F' or 'DF' (stroke, fill or fill then stroke)
      rowHeight: 20,
      columnWidth: 'auto'     // 'auto', 'wrap' or a number
  }
  */, c = {
        // Styling
        theme: "striped",
        // 'striped', 'grid' or 'plain'
        styles: {
            columnWidth: "auto",
            overflow: "linebreak",
            font: "arial",
            fontStyle: "normal",
            fontSize: n.xs
        },
        headerStyles: {
            font: "arial",
            fontStyle: "bold",
            halign: "center",
            valign: "bottom"
        },
        bodyStyles: {
            rowHeight: 20,
            halign: "center",
            valign: "top",
            fillColor: 255,
            fillStyle: "S",
            cellPadding: 3
        },
        /*alternateRowStyles: {},
    columnStyles: {},*/
        // Properties
        startY: 144,
        // false (indicates margin top value) or a number
        margin: {
            top: 72,
            left: 28,
            right: 28,
            botton: 56
        },
        //  a number, array or object
        pageBreak: "auto",
        // 'auto', 'avoid' or 'always'
        tableWidth: "auto"
    }, u = {
        //tableWidth: 'wrap',
        styles: {
            columnWidth: 100,
            overflow: "linebreak",
            cellPadding: 2,
            font: "arial",
            fontStyle: "normal"
        },
        headerStyles: {
            rowHeight: 15,
            font: "arial",
            fontStyle: "bold",
            fontSize: 10
        },
        bodyStyles: {
            rowHeight: 16,
            fontSize: 10,
            valign: "middle"
        },
        margin: {
            top: 72,
            left: 56,
            right: 56,
            botton: 56
        },
        startY: 120
    }, i = {
        tableWidth: "auto",
        styles: {
            columnWidth: "auto",
            overflow: "linebreak",
            cellPadding: 2,
            font: "arial",
            fontStyle: "normal"
        },
        headerStyles: {
            rowHeight: 15,
            font: "arial",
            fontStyle: "bold",
            fontSize: 10
        },
        bodyStyles: {
            rowHeight: 16,
            fontSize: 8,
            valign: "middle"
        },
        pageBreak: "avoid"
    }, d = {
        routeInfo: {
            title: "INFORMACION DE RUTA",
            defaultName: "route_info-",
            properties: {
                distance: "Distancia recorrida:",
                estimatedTime: "Tiempo estimado:",
                numVisits: "Clientes atendidos:",
                avgTimeVisit: "Promedio de tiempo de visita:",
                initTime: "Hora de salida:",
                finalTime: "Hora de finalizacion:",
                weightUse: "Peso usado:",
                volumeUse: "Volumen usado:",
                cost: "Gasolina:"
            },
            minMarginTop: 144,
            // unidades en milimetros
            minMarginLeft: 72,
            // unidades en milimetros
            rowHight: 14,
            // unidades en milimetros
            columnWidth: 216
        },
        visitList: {
            title: "ESTIMACIÓN DE ITINERARIO DE RUTA",
            defaultName: "route_visit_list-",
            columns: []
        },
        vehiclesList: {
            title: "REPORTE DE TIPOS DE VEHICULOS",
            defaultName: "route_visit_list-",
            columns: [ {
                title: "Nombre",
                dataKey: "name"
            }, {
                title: "Peso",
                dataKey: "weight"
            }, {
                title: "Capacidad",
                dataKey: "capability"
            } ]
        },
        info: {
            columns: [ {
                title: "Informacion basica",
                dataKey: "key"
            }, {
                title: " ",
                dataKey: "value"
            } ]
        }
    };
    function a() {
        var e;
        return e = angular.isUndefined(e) ? r.url : e, t(e, function(e) {
            r.image = e;
        }), !0;
    }
    function e(e) {
        this.options = {}, this.options.orientation = e || "p", this.report = null, 
        this.dataLoaded = a(), jsPDF ? this.doc = new jsPDF(this.options.orientation, "pt") : (alert("no se ha cargado jsPDF"), 
        this.doc = null);
    }
    t(r.url, function(e) {
        r.image = e;
    }), e.prototype.drawLogo = function(e, t, a, o) {
        r.image && this.doc.addImage(r.image, "JPEG", e, t, a, o, "logo");
    }, e.prototype.drawTitle = function(e, t) {
        this.report && (this.doc.setFontSize(n.xl), this.doc.text(e, t, this.report.title));
    }, e.prototype.getReportRouteInfo = function(e) {
        var t, a, o, r;
        this.report = d.routeInfo, a = this.report, this.doc && angular.isDefined(e) && (t = this.doc, 
        this.drawLogo(56, 36, 184, 56), this.drawTitle(56, 76), t.setFontSize(n.md), 
        r = a.minMarginTop + 0 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.distance, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text(e.distance + " Mtrs.", o, r), 
        r = a.minMarginTop + +a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.estimatedTime, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text(e.estimatedTime + " Min.", o, r), 
        r = a.minMarginTop + 2 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.numVisits, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text("" + e.numVisits, o, r), 
        r = a.minMarginTop + 3 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.avgTimeVisit, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text("" + e.avgTimeVisit, o, r), 
        r = a.minMarginTop + 4 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.initTime, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text("" + e.initTime, o, r), 
        r = a.minMarginTop + 5 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.finalTime, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text("" + e.finalTime, o, r), 
        r = a.minMarginTop + 6 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.weightUse, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text(e.weightUse + "%", o, r), 
        r = a.minMarginTop + 7 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.volumeUse, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text(e.volumeUse + "%", o, r), 
        r = a.minMarginTop + 8 * a.rowHight, o = a.minMarginLeft, t.setFont("arial", "bold").text(a.properties.cost, o, r), 
        o = a.minMarginLeft + a.columnWidth, t.setFont("arial", "normal").text(e.cost + " Gal.", o, r), 
        t.output("dataurlnewwindow"));
    }, e.prototype.getReportVisitList = function(e) {
        a = !1, angular.forEach(e.packages, function(e, t) {
            null !== e.zone && "null" !== e.zone && void 0 !== e.zone && (a = !0);
        });
        var a, t, o, r, n, i = a, s = (d.visitList.columns = 1 == i ? [ {
            title: "ID",
            dataKey: "visitNumber"
        }, {
            title: "Salida",
            dataKey: "departureAddress"
        }, {
            title: "Llegada",
            dataKey: "arrivalAddress"
        }, {
            title: "Nº Guia",
            dataKey: "guideNumber"
        }, {
            title: "Ciudad",
            dataKey: "city"
        }, {
            title: "Zona",
            dataKey: "zone"
        }, {
            title: "T. de LLegada",
            dataKey: "timeArrival"
        }, {
            title: "Estadia (min)",
            dataKey: "timeState"
        }, {
            title: "Distancia",
            dataKey: "distanceArrival"
        } ] : [ {
            title: "ID",
            dataKey: "visitNumber"
        }, {
            title: "Salida",
            dataKey: "departureAddress"
        }, {
            title: "Llegada",
            dataKey: "arrivalAddress"
        }, {
            title: "Nº Guia",
            dataKey: "guideNumber"
        }, {
            title: "Ciudad",
            dataKey: "city"
        }, {
            title: "T. de LLegada",
            dataKey: "timeArrival"
        }, {
            title: "Estadia (min)",
            dataKey: "timeState"
        }, {
            title: "Distancia",
            dataKey: "distanceArrival"
        } ], this.report = d.visitList, this.drawLogo(56, 36, 184, 56), this.drawTitle(250, 76), 
        i = [], o = "", s = (t = e).startRouteDate.hour + ":" + t.startRouteDate.minute + ":" + t.startRouteDate.second, 
        l = t.finishRouteDate.hour + ":" + t.finishRouteDate.minute + ":" + t.finishRouteDate.second, 
        r = parseInt(t.duration / 3600), n = parseInt((t.duration - 3600 * r) / 60), 
        o = r + " h " + n + " min.", i[0] = [ {
            key: "Nombre",
            value: t.name || "NA"
        }, {
            key: "Fecha",
            value: t.date || "NA"
        }, {
            key: "Total de Visitas",
            value: "" + t.packages.length
        }, 
        // {key: 'Hora de inicio',     value:  $filter('date')(srd, 'HH:mm' ) },
        // {key: 'Hora de fin',        value: $filter('date')(frd, 'HH:mm' )}
        {
            key: "Hora de inicio",
            value: s
        }, {
            key: "Hora de fin",
            value: l
        } ], r = "FIXED_ROUTES" == t.routeRestrictionType ? "No Aplica" : m.kilogram(t.weightUsed), 
        n = "FIXED_ROUTES" == t.routeRestrictionType ? "No Aplica" : m.cubicMeter(t.volumeUsed), 
        i[1] = [ {
            key: "Prom. Estadia",
            value: m.minutes(t.avgStayTime)
        }, {
            key: "Distancia",
            value: m.kilometer(t.distanceTraveled)
        }, {
            key: "Peso usado",
            value: r
        }, {
            key: "Volumen Usado",
            value: n
        }, {
            key: "Duración",
            value: o
        } ], i), l = (this.report = d.info, this.doc.autoTable(this.report.columns, s[0], u), 
        angular.copy(u));
        l.margin = {
            left: 305
        }, this.doc.autoTable(this.report.columns, s[1], l), this.report = d.visitList, 
        c.startY = this.doc.autoTableEndPosY() + 30, this.doc.autoTable(this.report.columns, p(e), c), 
        this.doc.output("dataurlnewwindow");
    }, e.prototype.getReportVehicleTypeList = function(e) {
        this.report = d.vehiclesList, this.drawLogo(56, 36, 184, 56), this.drawTitle(250, 76), 
        this.doc.autoTable(this.report.columns, e, c), this.doc.output("dataurlnewwindow");
    }, e.prototype.getReportVisitList2 = function(e) {
        e = e.packages;
        angular.forEach(e, function(e, t) {
            a = e, e = visitKeys, o = [], angular.forEach(e, function(e) {
                var t;
                a.hasOwnProperty(e.name) && (t = e.title, e = "" + a[e.name], this.push({
                    key: t,
                    value: "null" != e ? e : "NA"
                }));
            }, o);
            var a, o, e = o;
            i.startY = this.doc.autoTableEndPosY() + 10, this.doc.autoTable(this.report.columns, e, i);
        }, this), this.doc.output("dataurlnewwindow");
    };
    var m = {
        minutes: function(e) {
            return 60 <= e ? (e / 60).toFixed(2) + " min." : e + " seg.";
        },
        kilometer: function(e) {
            return 1e3 <= e ? (e / 1e3).toFixed(2) + " Km." : e + " mts";
        },
        cubicMeter: function(e) {
            return 1e5 <= e ? (e / 1e6).toFixed(2) + " m3." : e + " cm3";
        },
        kilogram: function(e) {
            return 1e3 <= e ? (e / 1e3).toFixed(2) + " Kgr." : e + " grm";
        }
    };
    function p(e, s = !0) {
        var t = [], l = "DEPOSITO", c = 0, u = 0, d = 0, p = new Date(e.date), a = (p.setHours(e.startRouteDate.hour), 
        p.setMinutes(e.startRouteDate.minute), p.setSeconds(e.startRouteDate.second), 
        console.log("fechaHora: " + p), angular.forEach(e.packages, function(e, t) {
            //var time =  (parseFloat(pack.timeArrival || 0) + timeState) * 60;
            var a = e.timeArrival + c, o = "arrival=" + e.timeArrival + "\t\testadia=" + c + "\t\t(suma)=" + a, r = "min:" + parseInt(a / 60) + "\t\tseg:" + a % 60, n = "antes: " + g("date")(p, "HH:mm:ss"), i = (p = new Date(p.setSeconds(p.getSeconds() + a)), 
            "despues: " + g("date")(p, "HH:mm:ss")), t = function(e, t, a, o, r = !0) {
                var n = {};
                n.visitNumber = e, n.name = t.name || "", n.departureAddress = a, 
                n.arrivalAddress = t.address || "", n.guideNumber = t.guideNumber || "", 
                n.city = t.city || "", 1 == r && (n.zone = null == t.zone || "");
                return n.timeArrival = g("date")(o, "HH:mm:ss"), n.timeState = m.minutes(t.timeState), 
                n.distanceArrival = m.kilometer(t.distanceArrival), n.longitude = t.longitude, 
                n.latitude = t.latitude, n;
            }(t + 1, e, l, p, s);
            this.push(t), l = e.address, c = e.timeState, u += a, d += e.distanceArrival, 
            sumatoria = "sumatoria: " + u + " seg", console.log(n + "\t\t" + i + "\t\t" + o + "\t\t" + r + "\t\t" + sumatoria);
        }, t), u += c, e.duration - u), o = e.distanceTraveled - d;
        return console.log("ultima estadia:" + c), console.log("timeDepot: " + a + "\t\tduracion: " + e.duration + "\t\tsumatoria: " + u), 
        0 < a && (p = new Date(p.setSeconds(p.getSeconds() + a)), (e = {}).visitNumber = t.length + 1, 
        e.name = "DEPOSITO", e.departureAddress = l, e.arrivalAddress = "DEPOSITO", 
        e.guideNumber = "", e.city = "", 1 == s && (e.zone = ""), e.timeArrival = g("date")(p, "HH:mm:ss"), 
        e.timeState = "", e.distanceArrival = m.kilometer(o), e.longitude = "", 
        e.latitude = "", t.push(e)), t;
    }
    return e.prototype.getVisitsFw = function(e) {
        return p(e);
    }, e;
} ])
/**=========================================================
 * Module: Places_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/, App.service("PlacesHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.places, {
        id: "@id",
        ids: "@ids"
    }, {
        getList: {
            method: "GET",
            isArray: !0
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    }, {});
    //return $resource(url);
} ]), App.factory("resincTknRefresh", [ "tokenStorage", "oauthHttp", "$rootScope", function(o, r, n) {
    return function(t, a) {
        var e;
        !o.get() && o.getRefreshToken() ? (e = new r({
            refresh_token: o.getRefreshToken()
        }), n.updatingToken = !0, e.$refreshToken(function(e) {
            o.set(e), t(), n.updatingToken = !1;
        }, function(e) {
            o.resetToken(), a(), n.updatingToken = !1;
        })) : o.get() ? o.get() && (t(), n.updatingToken = !1) : a();
    };
} ]), 
/**=========================================================
 * Module: helpers.js
 * Provides helper functions for routes definition
 =========================================================*/
App.provider("RouteHelpers", [ "APP_REQUIRES", function(i) {
    "use strict";
    // Set here the base of the relative path
    // for all app views
    this.basepath = function(e) {
        return "app/views/" + e;
    }, 
    // Generates a resolve object by passing script names
    // previously configured in constant.APP_REQUIRES
    this.resolveFor = function() {
        var n = arguments;
        return {
            deps: [ "$ocLazyLoad", "$q", function(a, e) {
                // empty promise
                for (
                // Creates a promise chain for each argument
                var o = e.when(1), t = 0, r = n.length; t < r; t++) o = 
                // creates promise to chain dynamically
                function(t) {
                    // also support a function that returns a promise
                    return "function" == typeof t ? o.then(t) : o.then(function() {
                        // if is a module, pass the name. If not, pass the array
                        var e = 
                        // check and returns required data
                        // analyze module items with the form [name: '', files: []]
                        // and also simple array of script files (for not angular js)
                        function(e) {
                            if (i.modules) for (var t in i.modules) if (i.modules[t].name && i.modules[t].name === e) return i.modules[t];
                            return i.scripts && i.scripts[e];
                        }(t);
                        // simple error check
                        return e ? a.load(e) : $.error("Route resolve: Bad resource name [" + t + "]");
                        // finally, return a promise
                    });
                }(n[t]);
                return o;
            } ]
        };
    }, // resolveFor
    // not necessary, only used in config block for routes
    this.$get = function() {};
} ]), 
/**=========================================================
 * Module: Routes_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
/*
App.service('RoutesHttp',[
	'$http',
	'$q',
	function ($http, $q) {
		return ({
			getRoutes : getRoutes
		});

		function getRoutes() {
	  		var request = $http({
	                method: "get",
//	               url: ENDPOINT + NAMESPACE + "/Routes"
					url : 'json/routes.json'
	                    });
	        return( request.then( handleSuccess, handleError ) );
		}

		function handleError( error ) {
			return ($q.reject(error));
		}
	   
    	function handleSuccess( response ) {
            return( response.data );
        }
	}]);
*/
App.service("RoutesHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.routes, {
        id: "@id"
    }, {
        getList: {
            method: "GET",
            isArray: !0
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        }
    }, {});
    //return $resource(url);
} ]), 
/**=========================================================
 * Module: Settings_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("SettingsHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.settings, {
        id: "@id",
        ids: "@ids"
    }, {
        getList: {
            method: "GET",
            isArray: !0
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "delete"
        }
    }, {});
} ]), App.service("tempStorageData", function() {
    return {
        data: {}
    };
}), 
/**=========================================================
 * Module: toggle-state.js
 * Services to share toggle state functionality
 =========================================================*/
App.service("toggleStateService", [ "$rootScope", function(a) {
    var o = "toggleState", r = {
        hasWord: function(e, t) {
            return new RegExp("(^|\\s)" + t + "(\\s|$)").test(e);
        },
        addWord: function(e, t) {
            if (!this.hasWord(e, t)) return e + (e ? " " : "") + t;
        },
        removeWord: function(e, t) {
            if (this.hasWord(e, t)) return e.replace(new RegExp("(^|\\s)*" + t + "(\\s|$)*", "g"), "");
        }
    };
    // Helper object to check for words in a phrase //
    // Return service public methods
    return {
        // Add a state to the browser storage to be restored later
        addState: function(e) {
            var t = (t = angular.fromJson(a.$storage[o])) ? r.addWord(t, e) : e;
            a.$storage[o] = angular.toJson(t);
        },
        // Remove a state from the browser storage
        removeState: function(e) {
            var t = a.$storage[o];
            // nothing to remove
            t && (t = r.removeWord(t, e), a.$storage[o] = angular.toJson(t));
        },
        // Load the state string and restore the classlist
        restoreState: function(e) {
            var t = angular.fromJson(a.$storage[o]);
            // nothing to restore
            t && e.addClass(t);
        }
    };
} ]), App.service("TokenManager", [ "$window", "$rootScope", function(a, o) {
    return {
        expirationTime: function(e, t) {
            e -= 5e3;
            a.localStorage.hanoitToken = t, setTimeout(function() {
                o.$broadcast("refresh_token", {
                    refresh_Token: a.localStorage.hanoitToken
                });
                //	   			console.log($window.localStorage.hanoitToken );
            }, e);
        }
    };
} ]), App.service("tokenStorage", [ "$window", "$rootScope", function(a, o) {
    return {
        set: function(e) {
            console.log("estoy guardando token"), r = e.access_token, a.localStorage.hanoitToken = e.refresh_token;
            var t = new Date();
            t.setSeconds(parseInt(e.expires_in)), a.localStorage.hanoitTokenExpiresDate = t, 
            function(e) {
                console.log("expirationTime" + e), setTimeout(function() {
                    o.$broadcast("refresh_token", {
                        refresh_token: a.localStorage.hanoitToken
                    });
                }, 1e3 * (e - 5));
            }(e.expires_in);
        },
        setRefreshToken: function(e) {
            a.localStorage.hanoitToken = e;
        },
        get: function() {
            return r;
        },
        getRefreshToken: function() {
            a.localStorage.hanoitTokenExpiresDate < new Date() && e();
            return a.localStorage.hanoitToken;
        },
        resetToken: e
    };
    var r;
    function e() {
        r = "", a.localStorage.removeItem("hanoitToken"), a.localStorage.removeItem("hanoitTokenExpiresDate");
    }
    /*
  function startClock(time) {
    if ( angular.isDefined(refreshJob) ) return;
    refreshJob = $interval(function() {
      dynamicUpdateLayers();
    },5000);
  }

  startJob();

  function stopJob() {
    if (angular.isDefined(refreshJob)) {
      $interval.cancel(refreshJob);
      refreshJob = undefined;
    }
  };
*/
} ]), 
/**=========================================================
 * Module: utils.js
 * Utility library to use across the theme
 =========================================================*/
App.service("Utils", [ "$window", "APP_MEDIAQUERY", function(e, t) {
    "use strict";
    var a = angular.element("html"), i = angular.element(e), o = angular.element("body");
    return {
        // DETECTION
        support: {
            transition: (e = function() {
                var e, t = document.body || document.documentElement, a = {
                    WebkitTransition: "webkitTransitionEnd",
                    MozTransition: "transitionend",
                    OTransition: "oTransitionEnd otransitionend",
                    transition: "transitionend"
                };
                for (e in a) if (void 0 !== t.style[e]) return a[e];
            }()) && {
                end: e
            },
            animation: (e = function() {
                var e, t = document.body || document.documentElement, a = {
                    WebkitAnimation: "webkitAnimationEnd",
                    MozAnimation: "animationend",
                    OAnimation: "oAnimationEnd oanimationend",
                    animation: "animationend"
                };
                for (e in a) if (void 0 !== t.style[e]) return a[e];
            }()) && {
                end: e
            },
            requestAnimationFrame: window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function(e) {
                window.setTimeout(e, 1e3 / 60);
            },
            touch: "ontouchstart" in window && navigator.userAgent.toLowerCase().match(/mobile|tablet/) || window.DocumentTouch && document instanceof window.DocumentTouch || window.navigator.msPointerEnabled && 0 < window.navigator.msMaxTouchPoints || //IE 10
            window.navigator.pointerEnabled && 0 < window.navigator.maxTouchPoints || //IE >=11
            !1,
            mutationobserver: window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver || null
        },
        // UTILITIES
        isInView: function(e, t) {
            var a, o, r, n, e = $(e);
            return !!e.is(":visible") && (a = i.scrollLeft(), o = i.scrollTop(), 
            r = (n = e.offset()).left, n = n.top, t = $.extend({
                topoffset: 0,
                leftoffset: 0
            }, t), n + e.height() >= o) && n - t.topoffset <= o + i.height() && r + e.width() >= a && r - t.leftoffset <= a + i.width();
        },
        langdirection: "rtl" == a.attr("dir") ? "right" : "left",
        isTouch: function() {
            return a.hasClass("touch");
        },
        isSidebarCollapsed: function() {
            return o.hasClass("aside-collapsed");
        },
        isSidebarToggled: function() {
            return o.hasClass("aside-toggled");
        },
        isMobile: function() {
            return i.width() < t.tablet;
        }
    };
} ]), 
/**=========================================================
 * generador de unique id 
 =========================================================*/
App.factory("uuid", [ function() {
    function e() {
        return Math.floor(65536 * (1 + Math.random())).toString(16).substring(1);
    }
    return {
        newuuid: function() {
            for (
            // http://www.ietf.org/rfc/rfc4122.txt
            var e = [], t = "0123456789abcdef", a = 0; a < 36; a++) e[a] = t.substr(Math.floor(16 * Math.random()), 1);
            return e[14] = "4", // bits 12-15 of the time_hi_and_version field to 0010
            e[19] = t.substr(3 & e[19] | 8, 1), // bits 6-7 of the clock_seq_hi_and_reserved to 01
            e[8] = e[13] = e[18] = e[23] = "-", e.join("");
        },
        newguid: function() {
            return e() + e() + "-" + e() + "-" + e() + "-" + e() + "-" + e() + e() + e();
        }
    };
} ])
/**=========================================================
 * Module: vector-map.js
 * Services to initialize vector map plugin
 =========================================================*/, App.service("vectorMap", function() {
    "use strict";
    return {
        init: function(e, t, o, a) {
            e.vectorMap({
                map: t.mapName,
                backgroundColor: t.bgColor,
                zoomMin: 1,
                zoomMax: 8,
                zoomOnScroll: !1,
                regionStyle: {
                    initial: {
                        fill: t.regionFill,
                        "fill-opacity": 1,
                        stroke: "none",
                        "stroke-width": 1.5,
                        "stroke-opacity": 1
                    },
                    hover: {
                        "fill-opacity": .8
                    },
                    selected: {
                        fill: "blue"
                    },
                    selectedHover: {}
                },
                focusOn: {
                    x: .4,
                    y: .6,
                    scale: t.scale
                },
                markerStyle: {
                    initial: {
                        fill: t.markerColor,
                        stroke: t.markerColor
                    }
                },
                onRegionLabelShow: function(e, t, a) {
                    o && o[a] && t.html(t.html() + ": " + o[a] + " visitors");
                },
                markers: a,
                series: {
                    regions: [ {
                        values: o,
                        scale: t.scaleColors,
                        normalizeFunction: "polynomial"
                    } ]
                }
            });
        }
    };
}), 
/**=========================================================
 * Module: vehicles_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("VehiclesHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.vehicles, {
        id: "@id",
        ids: "@ids"
    }, {
        getList: {
            method: "GET",
            isArray: !0
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    });
} ]), App.service("VehicleTypesHttp", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.typeResources, {
        id: "@id",
        ids: "@ids"
    }, actions = {
        getList: {
            method: "GET",
            isArray: !0
        },
        save: {
            method: "POST"
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        },
        deleteIds: {
            method: "DELETE"
        }
    });
    //return $resource(url) paramDefault;
} ]), 
/**=========================================================
 * Module: vehicle_service.js
 * servicio para los datos de Vehiculos.
 =========================================================*/
App.service("VehicleService", [ "$http", "$q", "$resource", "config", function(e, t, a, o) {
    return a(o().path.api.vehicles, {
        id: "@id"
    }, {
        getList: {
            method: "GET",
            isArray: !0
        },
        read: {
            method: "GET"
        },
        update: {
            method: "PUT"
        }
    });
} ]), 
/**=========================================================
 * Module: Visits_http.js
 * service para las conexiones con los servicios web.
 =========================================================*/
App.service("VisitsHttp", [ "$http", "$q", function(e, t) {
    return {
        getVisits: function() {
            return e({
                method: "get",
                //	               url: ENDPOINT + NAMESPACE + "/vehicleType"
                url: "json/visits.json"
            }).then(o, a);
        }
    };
    function a(e) {
        return t.reject(e);
    }
    function o(e) {
        return e.data;
    }
} ]), 
/**=========================================================
 * Module: address_model.js
 * modelo para el manejo de direcciones
 =========================================================*/
App.factory("XlsxExporter", [ "PdfExporter", function(i) {
    var s = {
        visitList: {
            columns: [ {
                title: "ID",
                dataKey: "visitNumber"
            }, 
            //{ title : "Nombre",           dataKey : "name"},
            {
                title: "Salida",
                dataKey: "departureAddress"
            }, {
                title: "Llegada",
                dataKey: "arrivalAddress"
            }, {
                title: "Nº Guia",
                dataKey: "guideNumber"
            }, {
                title: "Ciudad",
                dataKey: "city"
            }, {
                title: "Zona",
                dataKey: "zone"
            }, {
                title: "T. de LLegada (min)",
                dataKey: "timeArrival"
            }, {
                title: "Estadia (min)",
                dataKey: "timeState"
            }, {
                title: "Distancia (mts)",
                dataKey: "distanceArrival"
            }
            /*,
          { title : "Longitud",         dataKey : "longitude"},
          { title : "Latitud",          dataKey : "latitude"}*/
            /*,
          { title : "Hora de llegada",  dataKey : "timePlanningArrival"},
          { title : "Origen",           dataKey : "origin"},
          { title : "Destino",          dataKey : "destination"},
          { title : "Duracion",         dataKey : "duration"},
          { title : "Hora de Salida",   dataKey : "timeDeparture"},
          { title : "Estadia",          dataKey : "timeState"}*/ ]
        }
    };
    function l(e, t) {
        for (var a, o = [], r = 0; r < e.length; r++) {
            for (var n = e[r], i = {}, s = 0; s < t.length; s++) i[(a = t[s]).title] = n[a.dataKey];
            o.push(i);
        }
        return o;
    }
    return {
        getItems: l,
        defaultReportData: s,
        getReportVisitList: function(e) {
            var e = l(new i().getVisitsFw(e), s.visitList.columns), t = "visits_list.xlsx";
            t = t || "report", e && alasql('SELECT * INTO XLSX("' + t + '",{headers:true}) FROM ?', [ e ]);
        },
        getReportJourneyVisitList: function(e) {
            var o = [], r = [], n = !0, e = (angular.forEach(e, function(e, t) {
                var a = l(new i().getVisitsFw(e), s.visitList.columns);
                r.push({
                    sheetid: e.name || "Ruta-" + t,
                    header: n
                }), n = !1, o.push(a);
            }), o), t = "routes_visits_list.xlsx", a = r;
            t = t || "report", e && a && 
            //alasql('SELECT * INTO XLSX("'+name+'",{headers:true}) FROM ?',[items]);
            alasql('SELECT INTO XLSX("' + t + '",?) FROM ?', [ a, e ]);
        }
    };
} ]), App.filter("arrayFilter", function() {
    return function(e, t) {
        var a = [], o = !0;
        for (var r = 0; r < e.length; r++) {
            for (var n in o = !0, t) void 0 !== t[n].value && "" !== t[n].value && o && (o = function(e, t) {
                var a = !1;
                if ("$" == e.key.charAt(0)) {
                    for (var o in t) if (e.precision) {
                        if (t[o] == e.value) {
                            a = !0;
                            break;
                        }
                    } else if (-1 !== ("" + (r = ("" + t[o]).toLowerCase())).toLowerCase().indexOf(("" + e.value).toLowerCase())) {
                        a = !0;
                        break;
                    }
                } else if (angular.isArray(e.value)) {
                    for (var r = ("" + t[e.key]).toLowerCase(), n = 0; n < e.value.length; n++) if (e.precision) {
                        if (t[e.key] == e.value[n]) {
                            a = !0;
                            break;
                        }
                    } else if (-1 !== ("" + r).toLowerCase().indexOf(("" + e.value[n]).toLowerCase())) {
                        a = !0;
                        break;
                    }
                } else e.precision ? t[e.key] == e.value && (a = !0) : -1 !== ("" + (r = ("" + t[e.key]).toLowerCase())).toLowerCase().indexOf(("" + e.value).toLowerCase()) && (a = !0);
                return a;
            }(t[n], e[r]));
            o && a.push(e[r]);
        }
        return a;
    };
}), 
/**
 * AngularJS default filter with the following expression:
 * "person in people | filter: {name: $select.search, age: $select.search}"
 * performs a AND between 'name: $select.search' and 'age: $select.search'.
 * We want to perform a OR.
 */
App.filter("propsFilter", function() {
    return function(e, i) {
        var s = [];
        return angular.isArray(e) ? e.forEach(function(e) {
            for (var t = !1, a = Object.keys(i), o = 0; o < a.length; o++) {
                var r = a[o], n = i[r].toLowerCase();
                if (-1 !== e[r].toString().toLowerCase().indexOf(n)) {
                    t = !0;
                    break;
                }
            }
            t && s.push(e);
        }) : 
        // Let the output be the input untouched
        s = e, s;
    };
}), angular.module("myAppName", [ "angle" ]));

myApp.run([ "$log", function(e) {
    e.log("I'm a line from custom.js");
} ]), myApp.config([ "RouteHelpersProvider", function(e) {
    // Custom Route definition
} ]), myApp.controller("oneOfMyOwnController", [ "$scope", function(e) {
    /* controller code */
    e.holaMundo = function() {
        // body...
        console.log("hola mundo");
    };
} ]), myApp.directive("oneOfMyOwnDirectives", function() {
    /*directive code*/}), myApp.config([ "$stateProvider", function(e /* ... */) {
    /* specific routes here (see file config.js) */} ]), 
/**=========================================================
 * Module: access_controller.js
 * access acount 
 =========================================================*/
App.controller("AccessController", [ "$rootScope", "$scope", function(e, t) {
    e.app.layout.isBoxed = !1, t.hola = "Decir Holas";
} ]), 
/**=========================================================
 * Module: access_controller.js
 * access acount
 =========================================================*/
App.controller("ActivateController", [ "$scope", "$state", "$location", "$stateParams", "oauthHttp", "message", function(e, t, a, o, r, n) {
    //var activate_token = $location.search();
    o = o.token;
    o && new r({
        token: o
    }).$activate(function(e) {
        n.show("success", "usuario confirmado correctamente, ingrese su usuario y contraseña"), 
        t.go("access.login");
    }, function(e) {
        n.show("error", "ocurrió un error al intentar confirmar su usuario"), t.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: access_controller.js
 * access acount
 =========================================================*/
App.controller("LoginController", [ "$scope", "$auth", "$state", "$translate", "config", "oauthHttp", "tokenStorage", "message", function(t, e, a, o, r, n, i, s) {
    i.getRefreshToken() && a.go("app.home"), t.account = {
        username: "enterprise@gmail.com",
        password: "123456"
    }, t.login = function() {
        var e;
        1 != t.account.loading ? (
        //No hay logueo activo
        t.account.loading = !0, e = {
            username: t.account.username,
            password: t.account.password
        }, new n(e).$validateUser(function(e) {
            i.set(e), 
            //message.show("success", "Bienvenido, inicio de sesión exitoso");
            s.show("success", o.instant("access.login.messages_status.success")), 
            t.account.loading = !1, a.go("app.home");
        }, function(e) {
            t.account.loading = !1, "Bad credentials" == e.data.error_description ? 
            //message.show('error','Lo sentimos, Usuario o contraseña incorrecto');
            s.show("error", o.instant("access.login.messages_status.bad_credentials")) : s.show("error", e.data.error_description);
        })) : 
        //hay logueo activo
        //message.show("warning","Ya hay proceso de inicio de sesión activo");
        s.show("warning", o.instant("access.login.messages_status.login_process_sctive"));
    };
} ]), App.controller("LogoutController", [ "$scope", "$state", "tokenStorage", "ngDialog", function(e, t, a, o) {
    e.logout = function() {
        o.openConfirm({
            template: "app/views/templates/logout_confirmation.html",
            className: "ngdialog-theme-default",
            scope: e
        }).then(function(e) {
            a.resetToken(), t.go("access.login");
        });
    };
} ]), 
/**=========================================================
 * Module: recovery_controller.js
 * access acount
 =========================================================*/
App.controller("RecoveryController", [ "$rootScope", "$scope", "$state", "oauthHttp", "message", function(t, e, a, o, r) {
    e.account = {
        model: {
            email: ""
        },
        send: function() {
            t.loadingVisible = !0, new o(e.account.model).$forgotPassword(function(e) {
                t.loadingVisible = !1, r.show("success", "Le enviamos al correo electronico información para restablecer su contraseña."), 
                a.go("access.login");
            }, function(e) {
                t.loadingVisible = !1, r.show("error", e.error_description), a.go("access.login");
            });
        }
    };
} ]), 
/**=========================================================
 * Module: register_controller.js
 * App routes and resources configuration
 =========================================================*/
App.controller("RegisterController", [ "$scope", "$http", "$state", "$translate", "config", "message", "oauthHttp", function(t, e, a, o, r, n, i) {
    var s = !1;
    t.authMsg = "", t.account = {
        model: {
            username: "",
            password: "",
            password_repeat: ""
        },
        agreed: !0,
        register: function() {
            var e;
            return "" == t.account.model.username && "" == t.account.model.password && "" == t.account.model.password_repeat ? (n.show("warning", o.instant("access.register.messages_status.empty_account")), 
            !1) : 1 == s ? (n.show("warning", o.instant("access.register.messages_status.login_process_sctive")), 
            !1) : (e = new i(t.account.model), s = !0, void e.$signup(function(e) {
                n.show("warning", o.instant("access.register.messages_status.success")), 
                s = !1;
            }, function(e) {
                "com.hanoit.oauth.exception.UserDuplicateException" == e.exception ? n.show("warning", e.message) : n.show("warning", o.instant("access.register.messages_status.default_error")), 
                s = !1;
            }));
        },
        cancel: function() {}
    };
} ]), 
/**=========================================================
 * Module: reset_controller.js
 * access acount
 =========================================================*/
App.controller("ResetController", [ "$rootScope", "$scope", "$location", "$state", "$stateParams", "message", "oauthHttp", function(e, t, a, o, r, n, i) {
    r = r.token;
    t.account = {
        model: {
            password: "",
            password_repeat: "",
            token: ""
        },
        send: function() {
            new i(t.account.model).$resetPassword(function(e) {
                o.go("access.login"), n.show("check", "contraseña cambiada exitosamente");
            }, function(e) {
                n.show("error", "ocurrio un error"), o.go("access.login");
            });
        }
    }, t.account.model.token = r;
} ]), 
/**=========================================================
 * Module: assigned_services_controller.js
 * controllador para el modulo Servicios Asignados
 =========================================================*/
App.controller("AssignedServicesController", [ "$scope", "$rootScope", "$filter", "$state", "AssignedServicesHttp", "message", function(t, e, a, o, r, n) {
    t.VISIT_CANCELED = 0, t.VISIT_FINISHED = 1, t.VISIT_ASSIGNED = 2, t.VISIT_IN_ROUTE = 3, 
    t.assignedServices = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        selectAll: function() {
            for (var e in t.assignedServices.selectedAll = !t.assignedServices.selectedAll, 
            t.assignedServices.selectedItems) t.assignedServices.selectedItems[e].check = t.assignedServices.selectedAll;
        },
        add: function() {
            o.go("app.assignedServices.add");
        },
        edit: function() {},
        listView: function(e) {
            o.go("app.visits.list");
        },
        goToMap: function(e) {
            o.go("app.maps.assigned", {
                address: e,
                returnTo: {
                    state: o.current,
                    data: {}
                }
            });
        },
        removeItem: function(e) {
            n.show("error", "form remove item"), console.log(e);
        },
        remove: function() {
            var e = a("arrayFilter")(t.assignedServices.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            alert("remove " + e.length + " Items"), console.log(e);
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: t.assignedServices.filterText,
                precision: !1
            } ];
            t.assignedServices.selectedItems = a("arrayFilter")(t.assignedServices.dataSource, e), 
            t.assignedServices.paginations.totalItems = t.assignedServices.selectedItems.length, 
            t.assignedServices.paginations.currentPage = 1, t.assignedServices.changePage();
        },
        changePage: function() {
            var e = 1 == t.assignedServices.paginations.currentPage ? 0 : t.assignedServices.paginations.currentPage * t.assignedServices.paginations.itemsPerPage - t.assignedServices.paginations.itemsPerPage;
            t.assignedServices.data = t.assignedServices.selectedItems.slice(e, t.assignedServices.paginations.currentPage * t.assignedServices.paginations.itemsPerPage);
        }
    }, r.getAssignedServices().then(function(e) {
        t.assignedServices.selectedItems = e.assignedServices, t.assignedServices.dataSource = e.assignedServices, 
        t.assignedServices.paginations.totalItems = t.assignedServices.selectedItems.length, 
        t.assignedServices.paginations.currentPage = 1, t.assignedServices.changePage();
    });
} ]), 
/**=========================================================
 * Module: assigned_services_form_controller.js
 * controllador para el modulo agregar un servicio
 =========================================================*/
App.controller("AssignedServicesFormController", [ "$scope", "$rootScope", "$state", "$stateParams", "DriversHttp", "VehiclesHttp", "AssignedServicesHttp", "$timeout", "tempStorageData", function(o, e, t, a, r, n, i, s, l) {
    null === a.route && void 0 === l.data.journeyRoutes ? t.go("app.routes.list") : (o.route = a.route, 
    o.assignedService = {
        model: {
            route: {
                id: ""
            },
            vehicle: {
                id: ""
            },
            driver: {
                id: ""
            },
            executionDate: "2015-12-13",
            state: "ACTIVO"
        },
        save: function() {
            o.assignedService.model.route.id = o.route.id, o.assignedService.model.vehicle.id = o.vehicles.selected.id, 
            o.assignedService.model.driver.id = o.drivers.selected.id, new i(o.assignedService.model).$save(function(e) {
                alert("aqui toy"), console.log(e);
            });
        },
        goToBack: function() {
            t.go("app.routes.list", {
                journey: a.returnTo.data.journey
            });
        }
    }, o.vehicles = {
        selected: {},
        add: function() {
            t.go("app.vehicles.add");
        },
        data: [],
        getData: function() {
            n.getList(function(e) {
                o.vehicles.data = e;
            });
        }
    }, o.vehicles.getData(), o.drivers = {
        selected: {},
        add: function() {
            t.go("app.vehicles.add");
        },
        data: [],
        getData: function() {
            r.getList(function(e) {
                for (var t = [], a = 0; a < e.length; a++) t.push(e[a]), t[a].name = e[a].user.firstName + " " + e[a].user.lastName, 
                t[a].login = e[a].user.login, o.drivers.data.push(t[a]);
                o.drivers.data = t;
            });
        }
    }, o.drivers.getData(), l.data.journeyRoutes = a.returnTo.data.journey);
} ]), 
/**=========================================================
 * Module: address_controller.js
 * controllador para el modulo Direcciones
 =========================================================*/
App.controller("AddressController", [ "$scope", "$rootScope", function(e, t) {
    // body...
} ]), 
/**=========================================================
 * Module: address_form_controller.js
 * controllador para el modulo formulario de Direcciones
 =========================================================*/
App.controller("AddressFormController", [ "$scope", "$rootScope", "$state", "$stateParams", "message", "Address", "Geocoding", function(a, e, o, t, r, n, i) {
    "use strict";
    console.log(t.address), a.address = {
        model: {
            /*id : '',
                address : '',
                lengthOfStay : '',
                weight : '',
                volume : '',
                recipientGuide: '',
                alias : '',
                zone : '',
                observations : '',
                deliveryTime : '',
                x :0,
                y : 0*/},
        save: function() {
            a.returnTo.state && (a.returnTo.data.addAddress(this.model), o.go(a.returnTo.state, {
                data: a.returnTo.data
            }));
        },
        update: function() {
            a.returnTo.state && (a.returnTo.data.addAddress(this.model), o.go(a.returnTo.state, {
                data: a.returnTo.data
            }));
        },
        cancel: function() {
            a.returnTo.state && o.go(a.returnTo.state, {
                data: a.returnTo.data
            });
        },
        geocoding: function() {
            var e = {
                state: o.current.name,
                data: {
                    item: a.address.model,
                    address: {}
                }
            };
            o.go("app.address.geocoding", {
                returnTo: e
            });
        },
        goToMap: function() {
            var e = {}, t = (e.state = o.current, e.data = a.returnTo, new i({
                result: a.address.model,
                address: "address",
                latitude: "y",
                longitude: "x",
                status: "status"
            }));
            console.log(t.getLongitude()), console.log(t.getLatitude()), console.log(t.getAddress()), 
            console.log(t.result), o.go("app.maps.geocoding", {
                map_mode_use: "geocoding",
                geocoding: t,
                returnTo: e
            });
        }
    }, a.submitForm = function() {
        a.addressForm.$valid, o.is("app.address.edit") ? a.address.update() : o.is("app.address.add") && a.address.save();
    }, a.returnTo = t.returnTo, a.address.model = t.data || new n();
} ]), 
/**=========================================================
 * Module: geocoding_form_controller.js
 * controllador para el modulo geocodificar direcciones
 =========================================================*/
App.controller("GeocodingFormController", [ "$scope", "$rootScope", "$state", "$stateParams", "addressHttp", function(t, a, o, r, e) {
    t.CORRECT = 1, t.INCORRECT = 2;
    var n = null, i = null, s = null;
    void 0 === r.returnTo && null === r.returnTo || r.returnTo.hasOwnProperty("data") && (r.returnTo.data.hasOwnProperty("place") && r.returnTo.data.place.hasOwnProperty("address") && (n = r.returnTo.data.place.address), 
    r.returnTo.data.hasOwnProperty("package")) && (r.returnTo.data.package.hasOwnProperty("address") && (n = r.returnTo.data.package.address), 
    r.returnTo.data.package.hasOwnProperty("city") && (i = r.returnTo.data.package.city), 
    r.returnTo.data.package.hasOwnProperty("country")) && (s = r.returnTo.data.package.country), 
    t.geocoding = {
        model: {
            id: 0,
            country: null !== s ? s : void 0,
            address: null !== n ? n : void 0,
            city: null !== i ? i : void 0,
            location: {
                x: 0,
                y: 0
            }
        },
        status: 0,
        send: function() {
            t.address_required = void 0 === t.geocoding.model.address, t.city_required = void 0 === t.geocoding.model.city, 
            t.country_required = void 0 === t.geocoding.model.country, t.address_required || t.city_required || t.country_required || (t.geocoding.status = "", 
            a.loadingVisible = !0, e.geoCoding(t.geocoding.model).then(function(e) {
                a.loadingVisible = !1, null == e.data.address ? (t.geocoding.status = t.INCORRECT, 
                t.geocoding.model.location = {
                    x: 0,
                    y: 0
                }) : (t.geocoding.status = t.CORRECT, 
                //$scope.geocoding.model.address = response.data.address;
                t.geocoding.model.address = e.data.standarizedAddress, t.geocoding.model.location = {
                    x: e.data.location.y,
                    y: e.data.location.x
                }, 
                //$scope.geocoding.model.location = response.data.location;
                t.geocoding.model.score = e.data.score, r.returnTo.state && setTimeout(function() {
                    r.returnTo.data.address = t.geocoding.model, o.go(r.returnTo.state, {
                        data: r.returnTo.data
                    });
                }, 2e3));
            }, function(e) {
                a.loadingVisible = !1, t.geocoding.status = t.INCORRECT, console.log(e);
            }));
        },
        cancel: function() {
            null != r.returnTo && r.returnTo.state ? o.go(r.returnTo.state, {
                data: r.returnTo.data
            }) : o.go("default");
        }
    };
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("catalogsController", [ "$scope", "$rootScope", "$filter", "$state", "CatalogsHttp", "resincTknRefresh", "ngDialog", "tpl", function(a, e, t, o, r, n, i, s) {
    a.catalogs = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !1,
        loading: !1,
        selectAll: function() {
            for (var e in a.catalogs.selectedAll = !a.catalogs.selectedAll, a.catalogs.selectedItems) a.catalogs.selectedItems[e].check = a.catalogs.selectedAll;
        },
        add: function() {
            o.go("app.catalogs.add");
        },
        edit: function(e) {
            o.go("app.catalogs.edit", {
                catalog: e
            });
        },
        removeItem: function(t) {
            i.openConfirm({
                template: s.path,
                className: "ngdialog-theme-default",
                scope: a
            }).then(function(e) {
                new r(t).$delete(function(e) {
                    a.catalogs.getData();
                });
            });
        },
        remove: function() {
            var e = t("arrayFilter")(a.catalogs.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            alert("remove " + e.length + " Items"), console.log(e);
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: a.catalogs.filterText,
                precision: !1
            } ];
            a.catalogs.selectedItems = t("arrayFilter")(a.catalogs.dataSource, e), 
            a.catalogs.paginations.totalItems = a.catalogs.selectedItems.length, 
            a.catalogs.paginations.currentPage = 1, a.catalogs.changePage();
        },
        changePage: function() {
            var e = 1 == a.catalogs.paginations.currentPage ? 0 : a.catalogs.paginations.currentPage * a.catalogs.paginations.itemsPerPage - a.catalogs.paginations.itemsPerPage;
            a.catalogs.data = a.catalogs.selectedItems.slice(e, a.catalogs.paginations.currentPage * a.catalogs.paginations.itemsPerPage);
        },
        getData: function() {
            a.catalogs.loading = !0, a.catalogs.noData = !1, r.getList(function(e) {
                a.catalogs.selectedItems = e, a.catalogs.dataSource = e, a.catalogs.paginations.totalItems = a.catalogs.selectedItems.length, 
                a.catalogs.paginations.currentPage = 1, a.catalogs.changePage(), 
                a.catalogs.loading = !1, a.catalogs.dataSource.length < 1 && (a.catalogs.noData = !0);
            });
        }
    };
    new n(function() {
        //success
        a.catalogs.getData();
    }, function() {
        //fail
        o.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("catalogController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "message", "CatalogsHttp", "resincTknRefresh", function(a, e, t, o, r, n, i, s) {
    a.catalog = {
        model: {
            id: "",
            name: "",
            parent: "",
            ancestors: []
        },
        save: function() {
            var e = new i(a.catalog.model);
            o.is("app.catalogs.add") && a.catalogForm.$valid ? e.$save(function(e) {
                o.go("app.catalogs.list");
            }) : o.is("app.catalogs.edit") && a.catalogForm.$valid ? e.$update(function(e) {
                o.go("app.catalogs.list");
            }) : n.show("warning", "formulario invalido");
        },
        cancel: function() {
            null != r.returnTo && r.returnTo.state ? o.go(r.returnTo.state, r.returnTo.data) : o.go("app.catalogs.list");
        }
    }, a.ancestors = {
        current: "",
        add: function() {
            a.catalog.model.ancestors.push(a.ancestors.current);
        }
    }, a.catalogs = {
        data: [],
        getData: function() {
            i.getList(function(e) {
                for (var t = 0; t < e.length; t++) a.catalogs.data.push(e[t].name);
                a.catalog.model = r.catalog || a.catalog.model;
            });
        }
    };
    new s(function() {
        //success
        a.catalogs.getData();
    }, function() {
        //fail
        o.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: Journey_controller.js
 * controllador para el modulo de trajectos
 =========================================================*/
App.controller("ItineraryController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "PlacesHttp", "message", "Itinerary", "SettingsHttp", "ngDialog", "tpl", "ROAD_RESTRICTION_TYPE", "TYPE_LENGTH_OF_STAY", "osrmHttp", "resincTknRefresh", "tempStorageData", function(o, r, a, t, e, n, i, s, l, c, u, d, p, g, m, h) {
    // Disable weekend selection
    o.open = function(e) {
        e.preventDefault(), e.stopPropagation(), o.status.opened = !0;
    }, o.dateOptions = {
        formatYear: "yy",
        startingDay: 1
    }, o.format = "yyyy/MM/dd", o.status = {
        opened: !1
    }, o.Itinerary = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 10,
            currentPage: 1,
            totalItems: 0
        },
        loading: !1,
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        count: {
            corrects: 0,
            incorrects: 0,
            all: 0
        },
        selectAll: function() {
            for (var e in o.Itinerary.selectedAll = !o.Itinerary.selectedAll, o.Itinerary.selectedItems) o.Itinerary.selectedItems[e].check = o.Itinerary.selectedAll;
        },
        routing: function() {},
        optimize: function() {
            var t;
            // console.log("Realizando el proceso de optimizacion");
            // console.log("imprimiendo el journey qye sera enviado al servidor");
            o.place_required = !1, o.setting_required = !1, null == o.Journey.place.id && null == o.Journey.setting.id ? (o.place_required = !0, 
            o.setting_required = !0) : null == o.Journey.place.id ? o.place_required = !0 : null == o.Journey.setting.id ? o.setting_required = !0 : o.Itinerary.dataSource.length < 1 ? i.show("warning", "no se han ingresado registros para optimizar") : (t = a("arrayFilter")(o.Itinerary.dataSource, [ {
                key: "status",
                value: !0,
                precision: !0
            } ]), 0 < o.Itinerary.dataSource.length - t.length ? c.openConfirm({
                template: u.optimice,
                className: "ngdialog-theme-default",
                scope: o
            }).then(function(e) {
                o.Journey.itinerary = t, console.log("Journey = " + o.Journey.itinerary.length), 
                console.log("Datasource = " + o.Itinerary.dataSource.length), v();
            }) : (o.Journey.itinerary = o.Itinerary.dataSource, console.log("Journey = " + o.Journey.itinerary.length), 
            console.log("Datasource = " + o.Itinerary.dataSource.length), v()));
        },
        cancel: function() {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.journeys.add", {
                data: o.Journey
            });
        },
        removePackage: function(a) {
            c.openConfirm({
                template: u.path,
                className: "ngdialog-theme-default",
                scope: o
            }).then(function(e) {
                for (var t = 0; t < o.Itinerary.dataSource.length; t++) if (o.Itinerary.dataSource[t].id == a.id) {
                    o.Itinerary.dataSource.splice(t, 1);
                    break;
                }
                o.Itinerary.filter();
            });
        },
        removeSelectedPakages: function() {
            for (var e = [], t = 0; t < o.Itinerary.dataSource.length; t++) o.Itinerary.dataSource[t].check || e.push(o.Itinerary.dataSource[t]);
            o.Itinerary.dataSource = e, o.Itinerary.filter();
        },
        goToMap: function(e) {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.maps.address", {
                map_mode_use: "address",
                address: {
                    x: e.longitude,
                    y: e.latitude
                },
                returnTo: {
                    state: t.current.name,
                    data: {
                        journey: o.Journey
                    }
                }
            });
        },
        goToAdd: function() {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.itinerary.add", {
                returnTo: {
                    state: t.current.name,
                    data: {
                        journey: o.Journey
                    }
                }
            });
        },
        goToEdit: function(e) {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.itinerary.edit", {
                data: {
                    package: e,
                    journey: o.Journey
                }
            });
        },
        filter: function() {
            var e;
            "ALL" == o.statusFilter.current.status ? (o.Itinerary.selectedItems = o.Itinerary.dataSource, 
            o.Itinerary.paginations.totalItems = o.Itinerary.selectedItems.length, 
            o.Itinerary.paginations.currentPage = 1, o.Itinerary.changePage()) : "MATCH" == o.statusFilter.current.status ? (e = [ {
                key: "statusGeocoding",
                value: "MATCH",
                precision: !0
            } ], o.Itinerary.selectedItems = a("arrayFilter")(o.Itinerary.dataSource, e), 
            o.Itinerary.paginations.totalItems = o.Itinerary.selectedItems.length, 
            o.Itinerary.paginations.currentPage = 1, o.Itinerary.changePage()) : "MEAN" == o.statusFilter.current.status ? (e = [ {
                key: "statusGeocoding",
                value: "MEAN",
                precision: !0
            } ], o.Itinerary.selectedItems = a("arrayFilter")(o.Itinerary.dataSource, e), 
            o.Itinerary.paginations.totalItems = o.Itinerary.selectedItems.length, 
            o.Itinerary.paginations.currentPage = 1, o.Itinerary.changePage()) : "MANUAL" == o.statusFilter.current.status ? (e = [ {
                key: "statusGeocoding",
                value: "MANUAL",
                precision: !0
            } ], o.Itinerary.selectedItems = a("arrayFilter")(o.Itinerary.dataSource, e), 
            o.Itinerary.paginations.totalItems = o.Itinerary.selectedItems.length, 
            o.Itinerary.paginations.currentPage = 1, o.Itinerary.changePage()) : "UNMATCH" == o.statusFilter.current.status && (e = [ {
                key: "statusGeocoding",
                value: "UNMATCH",
                precision: !0
            } ], o.Itinerary.selectedItems = a("arrayFilter")(o.Itinerary.dataSource, e), 
            o.Itinerary.paginations.totalItems = o.Itinerary.selectedItems.length, 
            o.Itinerary.paginations.currentPage = 1, o.Itinerary.changePage()), 
            (e = {
                unmatch: 0,
                match: 0,
                mean: 0,
                manual: 0,
                all: 0
            }).match = a("arrayFilter")(o.Itinerary.dataSource, [ {
                key: "statusGeocoding",
                value: "MATCH",
                precision: !0
            } ]).length, e.mean = a("arrayFilter")(o.Itinerary.dataSource, [ {
                key: "statusGeocoding",
                value: "MEAN",
                precision: !0
            } ]).length, e.manual = a("arrayFilter")(o.Itinerary.dataSource, [ {
                key: "statusGeocoding",
                value: "MANUAL",
                precision: !0
            } ]).length, e.unmatch = a("arrayFilter")(o.Itinerary.dataSource, [ {
                key: "statusGeocoding",
                value: "UNMATCH",
                precision: !0
            } ]).length, e.all = o.Itinerary.dataSource.length, o.statusFilter.data[0].name = "TODAS (" + e.all + ")", 
            o.statusFilter.data[1].name = "UBICADAS (" + e.match + ")", o.statusFilter.data[2].name = "APROXIMADAS (" + e.mean + ")", 
            o.statusFilter.data[3].name = "MANUALES(" + e.manual + ")", o.statusFilter.data[4].name = "NO UBICADAS (" + e.unmatch + ")", 
            o.Itinerary.count = e;
        },
        changePage: function() {
            var e = 1 == o.Itinerary.paginations.currentPage ? 0 : o.Itinerary.paginations.currentPage * o.Itinerary.paginations.itemsPerPage - o.Itinerary.paginations.itemsPerPage;
            o.Itinerary.data = o.Itinerary.selectedItems.slice(e, o.Itinerary.paginations.currentPage * o.Itinerary.paginations.itemsPerPage);
        },
        imprimirCsv: function() {
            var r = o.Itinerary.dataSource, n = "data:text/csv;charset=utf-8,", e = (dataHeadString = "ID_GUIA;LONGITUD;LATITUD;CIUDAD;PAIS;DIRECCION;DIRECCION ESTANDARIZADA;PRECISION;ESTADO DE GEOCODIFICACION;ESTADIA;VOLUMEN;PESO;ZONA;NUM_PIEZAS;CODIGO_POSTAL;REMITENTE;TEL_REMITENTE;DESTINATARIO;TEL_DESTINATARIO;OBSERVACIONES;", 
            n += dataHeadString + "\n", r.forEach(function(e, t) {
                var a = "", o = "", a = ("null" != a && (a = e.guideNumber), "MATCH" == e.statusGeocoding && (o = "UBICADA"), 
                "MEAN" == e.statusGeocoding && (o = "APROXIMADA"), "MANUAL" == e.statusGeocoding && (o = "MANUAL"), 
                "UNMATCH" == e.statusGeocoding && (o = "NO UBICADA"), (dataString = a + ";" + e.longitude + ";" + e.latitude + ";" + e.city + ";" + e.country + ";" + e.address + ";" + e.standarizedAddress + ";" + e.score + ";" + o + ";" + e.timeState + ";" + e.volume + ";" + e.weigth + ";" + e.zone + ";" + e.pieceNumber + ";" + e.postalCode + ";" + e.sender.name + ";" + e.sender.phone + ";" + e.receiver.name + ";" + e.receiver.phone + ";" + e.observation + ";").replace(new RegExp(";null;", "g"), ";;"));
                n += t < r.length ? a + "\n" : a;
            }), encodeURI(n)), t = document.createElement("a");
            t.setAttribute("href", e), t.setAttribute("download", "my_data.csv"), 
            t.click();
        }
    }, o.settings = {
        add: function() {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.settings.add", {
                returnTo: {
                    state: t.current.name,
                    data: {
                        journey: o.Journey
                    }
                }
            });
        },
        data: []
    };
    new m(function() {
        //success
        l.getList(function(e) {
            o.settings.data = e;
        }), n.getList(function(e) {
            o.places.data = e;
        });
    }, function() {
        //fail
        t.go("access.login");
    });
    function f(e) {
        e.status = !0;
        var t = "";
        e.latitude && e.longitude || (t = t + " " + a("translate")("package.form.label.ADDRESS") + ",", 
        e.status = !1), o.Journey.setting.evaluateWeight && null == e.weigth && (t = t + " " + a("translate")("package.form.label.WEIGHT") + ",", 
        e.status = !1), o.Journey.setting.evaluateVolume && null == e.volume && (t = t + " " + a("translate")("package.form.label.VOLUME") + ",", 
        e.status = !1), o.Journey.setting.typeLengthOfStay == p.DEFINE_ITINERARY && null == e.timeState && (t = t + " " + a("translate")("package.form.label.TIME_OF_STAY") + ",", 
        e.status = !1), o.Journey.setting.evaluateItineraryZone && null == e.zone && (t = t + " " + a("translate")("package.form.label.ZONE") + ",", 
        e.status = !1), e.errorMessage = t.substring(0, t.length - 1);
    }
    function v() {
        if (console.log("route restriction type"), console.log(o.Journey.setting.roadRestrictionType), 
        r.loadingVisible = !0, o.Journey.setting.roadRestrictionType == d.TIME) g.optimisationForPackages(o.Journey).then(y, T); else if (o.Journey.setting.roadRestrictionType == d.RESOURCE_TIME) if (o.Journey.setting.evaluateItineraryZone) {
            var e, t = function(e) {
                for (var t = {}, a = 0; a < e.itinerary.length; a++) (null == e.itinerary[a].zone || null == e.itinerary[a].zone ? (null == t[e.name + "_DEFAULT_ZONE"] && (t[e.itinerary[a].zone] = []), 
                t[e.name + "_DEFAULT_ZONE"]) : (null == t[e.name + "_" + e.itinerary[a].zone] && (t[e.name + "_" + e.itinerary[a].zone] = []), 
                t[e.name + "_" + e.itinerary[a].zone])).push(e.itinerary[a]);
                return t;
            }(o.Journey);
            for (e in t) {
                var a = o.Journey;
                a.name = e, a.itinerary = t[e], g.optimisationForPackages(a);
            }
        } else g.optimisationForPackages(o.Journey).then(y, T); else o.Journey.setting.roadRestrictionType == d.FIXED_ROUTES && (1 == o.Journey.setting.fixedRoutes ? g.OptimalRouteOfPointCloud(o.Journey) : g.optimisationForMessenger(o.Journey)).then(y, T);
        //            console.log($scope.Journey);
    }
    function y(e) {
        r.loadingVisible = !1, t.go("app.routes.list", {
            journey: e.data
        });
    }
    function T(e) {
        r.loadingVisible = !1, i.show("error", e.data.message);
    }
    o.places = {
        add: function() {
            o.Journey.itinerary = o.Itinerary.dataSource, t.go("app.places.add", {
                returnTo: {
                    state: t.current.name,
                    data: {
                        journey: o.Journey
                    }
                }
            });
        },
        data: []
    }, o.statusFilter = {
        current: {},
        data: [ {
            status: "ALL",
            name: "TODAS"
        }, {
            status: "MATCH",
            name: "UBICADAS"
        }, {
            status: "MEAN",
            name: "APROXIMADAS"
        }, {
            status: "MANUAL",
            name: "MANUALES"
        }, {
            status: "UNMATCH",
            name: "NO UBICADAS"
        } ]
    }, o.statusFilter.current = o.statusFilter.data[0], o.$watch("Journey.setting", function() {
        if (void 0 !== o.Itinerary) for (var e = 0; e < o.Itinerary.dataSource.length; e++) f(o.Itinerary.dataSource[e]); else if (void 0 !== h.data.cachedJourney && 0 < h.data.cachedJourney.itinerary.length) {
            o.Itinerary.dataSource = h.data.cachedJourney.itinerary;
            for (e = 0; e < o.Itinerary.dataSource.length; e++) f(o.Itinerary.dataSource[e]);
        }
    }), 
    //Ver si hay subidas para setear journey
    void 0 !== e.data && null !== e.data && void 0 !== e.data.journey && (o.Journey = e.data.journey), 
    void 0 !== o.Journey && void 0 !== o.Journey.itinerary ? (o.Itinerary.dataSource = o.Journey.itinerary, 
    null == o.Journey.date && (o.Journey.date = new Date())) : void 0 !== h.data.cachedJourney && (
    //Setear journey con el cachado si hay
    o.Journey = h.data.cachedJourney, 0 < h.data.cachedJourney.itinerary.length) ? (o.Itinerary.dataSource = h.data.cachedJourney.itinerary, 
    null == o.Journey.date && (o.Journey.date = new Date())) : t.go("app.journeys.add"), 
    o.Itinerary.filter();
} ]), 
/**=========================================================
 * Module: Journey_controller.js
 * controllador para el modulo de trajectos
 =========================================================*/
App.controller("ItineraryFormController", [ "$scope", "$rootScope", "$state", "$stateParams", "Notify", "Address", "Geocoding", "uuid", "TYPE_LENGTH_OF_STAY", "$filter", "tempStorageData", function(a, e, o, t, r, n, i, s, l, c, u) {
    "use strict";
    function d() {
        console.log("realizando evaluacion del status de la operación"), a.package.model.status = !0;
        var e = "";
        a.package.model.latitude && a.package.model.longitude || (e = e + " " + c("translate")("package.form.label.ADDRESS") + ",", 
        a.package.model.status = !1), a.journey.setting.evaluateWeight && null == a.package.model.weigth && (e = e + " " + c("translate")("package.form.label.WEIGHT") + ",", 
        //            errorMessage = errorMessage + ' Peso,';
        a.package.model.status = !1), a.journey.setting.evaluateVolume && null == a.package.model.volume && (e = e + " " + c("translate")("package.form.label.VOLUME") + ",", 
        //            errorMessage = errorMessage + ' Volumen,';
        a.package.model.status = !1), a.journey.setting.typeLengthOfStay == l.DEFINE_ITINERARY && null == a.package.model.timeState && (e = e + " " + c("translate")("package.form.label.TIME_OF_STAY") + ",", 
        //            errorMessage = errorMessage + ' Tiempo De Estadia,';
        a.package.model.status = !1), a.journey.setting.evaluateItineraryZone && null == a.package.model.zone && (e = e + " " + c("translate")("package.form.label.ZONE") + ",", 
        //            errorMessage = errorMessage + ' Zona,';
        a.package.model.status = !1), a.package.model.errorMessage = e.substring(0, e.length - 1);
    }
    a.package = {
        model: {
            id: "",
            guideNumber: "",
            // ok
            zone: null,
            // ok
            capability: "volume",
            name: "",
            address: "",
            // ok
            longitude: "",
            // ok
            latitude: "",
            // ok
            deliveryTime: "",
            timeState: null,
            // ok
            pieceNumber: 1,
            // ok
            distanceArrival: 0,
            //NA
            timeArrival: 0,
            //NA
            timePlanningArrival: 0,
            //NA
            visitOrder: "",
            //NA
            weigth: null,
            volume: null,
            measure: {
                height: 0,
                // ok
                width: 0,
                // ok
                depth: 0
            },
            receiver: {
                address: "",
                phoneNumber: "",
                longitude: 0,
                latitude: 0,
                city: ""
            },
            sender: {
                address: "",
                phoneNumber: "",
                longitude: 0,
                latitude: 0,
                city: ""
            },
            status: !1,
            errorMessage: ""
        },
        geocoding: function(e) {
            e = {
                state: o.current.name,
                data: {
                    journey: a.journey,
                    package: a.package.model,
                    field: e,
                    address: {}
                }
            };
            o.go("app.address.geocoding", {
                returnTo: e
            });
        },
        goToMap: function(e) {
            var t = new i({
                result: "address" == e ? a.package.model : a.package.model[e],
                address: "address",
                latitude: "latitude",
                longitude: "longitude",
                status: "status"
            }), e = (console.log(a.package.model), console.log(t), {
                state: o.current.name,
                data: {
                    journey: a.journey,
                    package: a.package.model,
                    field: e,
                    address: {}
                }
            });
            o.go("app.maps.geocoding", {
                map_mode_use: "geocoding",
                geocoding: t,
                returnTo: e
            });
        },
        send: function() {
            if (o.is("app.itinerary.add")) a.package.model.id = 0 == a.journey.itinerary.length ? 1 : a.journey.itinerary[a.journey.itinerary.length - 1].id + 1, 
            a.journey.itinerary.push(a.package.model), o.go("app.itinerary.list", {
                data: {
                    journey: a.journey
                }
            }); else if (o.is("app.itinerary.edit")) {
                for (var e = 0; e < a.journey.itinerary.length; e++) if (a.journey.itinerary[e].id == a.package.model.id) {
                    a.journey.itinerary[e] = a.package.model;
                    break;
                }
                o.go("app.itinerary.list", {
                    data: {
                        journey: a.journey
                    }
                });
            }
        },
        cancel: function() {
            o.go("app.itinerary.list", {
                data: {
                    journey: a.journey
                }
            });
        }
    }, a.$watch("package.model.latitude", d), a.$watch("package.model.longitude", d), 
    a.$watch("package.model.weigth", d), a.$watch("package.model.volume", d), a.$watch("package.model.timeState", d), 
    a.$watch("package.model.zone", d), void 0 === (t = null === t.data && u.hasOwnProperty("stateParamsItineFrm") ? u.stateParamsItineFrm : t).returnTo && null === t.data ? o.go("app.home") : (a.journey = t.returnTo.data.journey, 
    u.stateParamsItineFrm = t), t.data && (void 0 !== t.data.package && (a.package.model = t.data.package, 
    null == a.package.model.capability) && (a.package.model.capability = "volume"), 
    void 0 !== t.data.journey && (a.journey = t.data.journey), void 0 !== t.data.field) && void 0 !== t.data.address && void 0 !== t.data.address.address && ("address" == t.data.field ? (a.package.model.address = t.data.address.address || a.package.model.address, 
    a.package.model.longitude = t.data.address.location.x || a.package.model.longitude, 
    a.package.model.latitude = t.data.address.location.y || a.package.model.latitude) : "sender" == t.data.field ? (a.package.model.sender.address = t.data.address.address || a.package.model.sender.address, 
    a.package.model.sender.longitude = t.data.address.location.x || a.package.model.sender.longitude, 
    a.package.model.sender.latitude = t.data.address.location.y || a.package.model.sender.latitude) : "receiver" == t.data.field && (a.package.model.receiver.address = t.data.address.address || a.package.model.receiver.address, 
    a.package.model.receiver.longitude = t.data.address.location.x || a.package.model.receiver.longitude, 
    a.package.model.receiver.latitude = t.data.address.location.y || a.package.model.receiver.latitude)), 
    a.$watch("package.model.measure.height", function() {
        "measure" == a.package.model.capability && (a.package.model.volume = a.package.model.measure.height * a.package.model.measure.width * a.package.model.measure.depth);
    }), a.$watch("package.model.measure.width", function() {
        "measure" == a.package.model.capability && (a.package.model.volume = a.package.model.measure.height * a.package.model.measure.width * a.package.model.measure.depth);
    }), a.$watch("package.model.measure.depth", function() {
        "measure" == a.package.model.capability && (a.package.model.volume = a.package.model.measure.height * a.package.model.measure.width * a.package.model.measure.depth);
    }), a.$watch("package.model.volume", function(e, t) {
        "volume" == a.package.model.capability && (a.package.model.measure = {
            height: 0,
            width: 0,
            depth: 0
        });
    }), console.log(a.package.model);
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("driversController", [ "$scope", "$rootScope", "$filter", "$state", "DriversHttp", "resincTknRefresh", "ngDialog", "tpl", "message", function(r, e, n, t, i, a, s, l, c) {
    r.openConfirm = function() {}, r.drivers = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !1,
        loading: !1,
        selectAll: function() {
            for (var e in r.drivers.selectedAll = !r.drivers.selectedAll, r.drivers.selectedItems) r.drivers.selectedItems[e].check = r.drivers.selectedAll;
        },
        add: function() {
            t.go("app.drivers.add");
        },
        edit: function(e) {
            t.go("app.drivers.edit", {
                driver: e
            });
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.drivers.getData();
                });
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.drivers.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    c.show("success", n("translate")("drivers.message.deleteConfirm")), 
                    r.drivers.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.drivers.filterText,
                precision: !1
            } ];
            r.drivers.selectedItems = n("arrayFilter")(r.drivers.dataSource, e), 
            r.drivers.paginations.totalItems = r.drivers.selectedItems.length, r.drivers.paginations.currentPage = 1, 
            r.drivers.changePage();
        },
        changePage: function() {
            var e = 1 == r.drivers.paginations.currentPage ? 0 : r.drivers.paginations.currentPage * r.drivers.paginations.itemsPerPage - r.drivers.paginations.itemsPerPage;
            r.drivers.data = r.drivers.selectedItems.slice(e, r.drivers.paginations.currentPage * r.drivers.paginations.itemsPerPage);
        },
        getData: function() {
            r.drivers.data = [], r.drivers.loading = !0, r.drivers.noData = !1, 
            i.getList(function(e) {
                e = e.reverse();
                r.drivers.selectedItems = e, r.drivers.dataSource = e, r.drivers.paginations.totalItems = r.drivers.selectedItems.length, 
                r.drivers.paginations.currentPage = 1, r.drivers.changePage(), r.drivers.loading = !1, 
                r.drivers.dataSource.length < 1 && (r.drivers.noData = !0);
            });
        }
    };
    new a(function() {
        //success
        r.drivers.getData();
    }, function() {
        //fail
        t.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("driverController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "message", "DriversHttp", function(a, e, t, o, r, n, i) {
    a.ADD_STATE = "app.drivers.add", a.EDIT_STATE = "app.drivers.edit", a.currentState = o.current.name, 
    a.driver = {
        model: {
            licenceNumber: "",
            identificationNumber: "",
            phoneNumber: "",
            active: !0,
            user: {
                firstName: "",
                lastName: "",
                login: "",
                password: "",
                active: !0
            }
        },
        save: function() {
            var e;
            s() && (o.is("app.drivers.add") && a.driver.model.user.password !== a.driver.model.user.repeatPassword ? (n.show("error", "Las contraseñas no son iguales"), 
            a.driver.model.user.password = "", a.driver.model.user.repeatPassword = "") : (e = new i(a.driver.model), 
            o.is("app.drivers.add") ? e.$save(function(e) {
                o.go("app.drivers.list");
            }, function(e) {
                console.log(e), n.show("error", e.message);
            }) : o.is("app.drivers.edit") && e.$update(function(e) {
                o.go("app.drivers.list");
            }, function(e) {
                console.log(e), n.show("error", e.message);
            })));
        },
        cancel: function() {
            null != r.returnTo && r.returnTo.state ? o.go(r.returnTo.state, r.returnTo.data) : o.go("app.drivers.list");
        }
    }, a.driver.model = r.driver || a.driver.model, a.$watch("driver.model.licenceNumber", function(e, t) {
        a.licenceNumber_required = null == e || "" == e;
    }), a.$watch("driver.model.user.firstName", function(e, t) {
        a.firstName_required = null == e || "" == e;
    }), a.$watch("driver.model.user.lastName", function(e, t) {
        a.lastName_required = null == e || "" == e;
    }), a.$watch("driver.model.identificationNumber", function(e, t) {
        a.identificationNumber_required = null == e || "" == e;
    }), a.$watch("driver.model.user.password", function(e, t) {
        o.is("app.drivers.add") && (a.password_required = null == e || "" == e);
    }), a.$watch("driver.model.user.login", function(e, t) {
        o.is("app.drivers.add") && (a.login_required = null == e || "" == e);
    }), a.$watch("driver.model.user.repeatPassword", function(e, t) {
        o.is("app.drivers.add") && (a.repeatPassword_required = null == e || "" == e);
    });
    var s = function() {
        var e = !0;
        return null != a.driver.model.licenceNumber && "" != a.driver.model.licenceNumber || (e = !(a.licenceNumber_required = !0)), 
        null != a.driver.model.user.firstName && "" != a.driver.model.user.firstName || (e = !(a.firstName_required = !0)), 
        null != a.driver.model.user.lastName && "" != a.driver.model.user.lastName || (e = !(a.lastName_required = !0)), 
        null != a.driver.model.identificationNumber && "" != a.driver.model.identificationNumber || (e = !(a.identificationNumber_required = !0)), 
        o.is("app.drivers.add") && (null != a.driver.model.user.password && "" != a.driver.model.user.password || (e = !(a.password_required = !0)), 
        null != a.driver.model.user.repeatPassword && "" != a.driver.model.user.repeatPassword || (e = !(a.repeatPassword_required = !0))), 
        e;
    };
} ]), 
/**=========================================================
 * Module: MapsController
 * controlador para el control de los mapas
 =========================================================*/
App.controller("MapsController", [ "$scope", "$rootScope", "$http", "$state", "$stateParams", "MapsServices", "GeoLocation", function(t, e, a, o, r, n, i) {
    "use strict";
    r.next, r.back, r.params;
    function s(e) {
        var t = e.latitude, e = e.longitude;
        n.goToPoint({
            longitude: e,
            latitude: t
        }, !0, !0), n.zoom(18);
    }
    t.mapGoogle, 
    // cuando la vista se carga completamente se dispara este evento
    // el cual utilizamos para agregar el mapa en los div dispuesto para ello
    t.$on("$viewContentLoaded", function(e) {
        t.mapGoogle = n.init({
            container: "map",
            controlId: "olmap"
        }), 
        //MapsServices.center({longitude: -74.12464382600275, latitude: 4.692948474207697});
        i.getLocation().then(s, s);
    });
} ]), 
/**=========================================================
 * Module: MapServices
 * servicio que coordina interacciones con los mapas de OpenLayer
 =========================================================*/
/* globals App, ol, angular */
App.factory("MapsServices", [ "APP_COLORS", "config", function(e, n) {
    "use strict";
    var i, l, s, // capa de dibujo del mapa de openlayer
    c, // capa de dibujo de las rutas
    u, // capa para dibujar el punto selector de coordenadas del mapa
    d, // capa para agregar la posición actual
    p, // capa que define el cluster de los markers
    t, g, // grupo de capas de mapas
    m, // grupo de capas de rutas
    h, // grupo de capas de puntos
    f, v, o = "EPSG:4326", // proyeccion que se utilzan en los datos del geojson
    r = "EPSG:3857", y = {}, T = 18, w = [ "#dc0b0", "#458b74", "#c1cdcd", "#0000ff", "#0000ee", "#00008b", "#8a2be2", "#a52a2a", "#ff4040", "#ee3b3b", "#cd3333", "#8b2323", "#5f9ea0", "#98f5ff", "#8ee5ee", "#7ac5cd", "#53868b", "#7fff00", "#76ee00", "#66cd00", "#458b00", "#d2691e", "#ff7f24", "#ee7621", "#cd661d", "#ff7f50", "#ff7256", "#ee6a50", "#cd5b45", "#8b3e2f", "#6495ed", "#8b8878", "#00ffff", "#00eeee", "#00cdcd", "#008b8b", "#b8860b", "#ffb90f", "#eead0e", "#cd950c", "#a2cd5a", "#6e8b3d", "#ff8c00", "#ff7f00", "#ee7600", "#cd6600", "#8b4500", "#9932cc", "#bf3eff", "#b23aee", "#9a32cd", "#68228b", "#e9967a", "#483d8b", "#00ced1", "#9400d3", "#ff1493", "#ee1289", "#cd1076", "#8b0a50", "#00b2ee", "#009acd", "#00688b", "#1874cd", "#104e8b", "#b22222", "#ff3030", "#ee2c2c", "#cd2626", "#8b1a1a", "#ff69b4", "#ff6eb4", "#ee6aa7", "#cd6090", "#8b3a62", "#8b3a3a", "#00cd00", "#008b00", "#ff6eb4", "#ee6aa7", "#cd6090", "#8b3a62", "#cd5c5c", "#cd5555", "#8b3a3a", "#7cfc00", "#9ac0cd", "#68838b", "#f08080", "#cd8c95", "#8b5f65", "#8b5742", "#20b2aa", "#607b8b", "#8470ff", "#32cd32", "#ff00ff", "#ee00ee", "#cd00cd", "#8b008b", "#b03060", "#ff34b3", "#ee30a7", "#cd2990", "#8b1c62", "#66cdaa", "#66cdaa", "#0000cd", "#ba55d3", "#e066ff", "#d15fee", "#b452cd", "#7a378b", "#9370db", "#9f79ee", "#8968cd", "#5d478b", "#3cb371", "#7b68ee", "#c71585", "#191970", "#8b795e", "#000080", "#8b5a00", "#ff4500", "#ee4000", "#cd3700", "#8b2500", "#da70d6", "#8b475d", "#a020f0", "#663399", "#9b30ff", "#912cee", "#7d26cd", "#551a8b", "#ff0000", "#ee0000", "#cd0000", "#8b0000", "#4169e1", "#4876ff", "#436eee", "#3a5fcd", "#27408b", "#8b4513", "#4a708b", "#6a5acd", "#836fff", "#7a67ee", "#6959cd", "#473c8b", "#4682b4", "#63b8ff", "#5cacee", "#4f94cd", "#36648b", "#4682b4", "#4f94cd", "#36648b", "#8b7b8b", "#ff6347", "#ee5c42", "#cd4f39", "#8b3626", "#00c5cd", "#00868b", "#ee82ee", "#d02090", "#ff3e96", "#ee3a8c", "#cd3278", "#8b2252", "#ffff00" ]; // proyeccion que se utiliza en los mapas
    // DOM contenedores del mapa
    /**
     * calcula la escala para iconos que representan los paquetes en el mapa 
     * @param  {double} increment     [description]
     * @param  {double} maxResolution resolucion maxima permitida en el mapa
     * @return {double}               escala de resolucion del icono
     */
    function b(e, t, a) {
        t = a < t ? 0 : a < 20 * T / 100 ? .25 : e + a * e / T + .05;
        return t;
    }
    /**
     * calcula la escala del ancho de lineas que representan las rutas segun 
     * el zoom aactual del mapa
     * @param  {double} max_value ?¿?¿?
     * @param  {double} _zoom     zoom actual del mapa
     * @return {double}           ancho de la linea de acuerdo a la resolucion del mapa
     */
    /**
    * funcion para crear estilos de los paquetes de acuerdo al zoom del mapa
    * @return {ol.style.Style}         el nuevo estylo del marcador
    */
    function S() {
        return function(e, t) {
            var a, o, r, n, i, s;
            if (l) return o = e.get("features").length, e = e.get("features")[0], 
            r = l.getView().getZoom(), i = .6, s = (s = r) < 2 ? 0 : s < 20 * T / 100 ? .25 : i + s * i / T + .05, 
            i = -16, n = (n = r) < 2 ? 0 : n < 20 * T / 100 ? i + n * i / T : i + n * i / T + .05, 
            i = 0 === s ? "" : e.get("name"), 1 === o ? // realiza un style para un unico feature
            a = "Start" === i ? [ new ol.style.Style({
                image: new ol.style.Icon({
                    anchorOrigin: "top-left",
                    anchorXUnits: "fraction",
                    anchorYUnits: "fraction",
                    anchor: [ .5, 1 ],
                    size: [ 90, 120 ],
                    //opacity: 1.0,
                    src: "app/img/marker-depot.png",
                    scale: b(.17, 2, r)
                })
            }) ] : [ new ol.style.Style({
                image: new ol.style.Icon({
                    anchorOrigin: "top-left",
                    anchorXUnits: "fraction",
                    anchorYUnits: "fraction",
                    anchor: [ .5, 1 ],
                    size: [ 90, 120 ],
                    //opacity: 1.0,
                    src: "app/img/marker-red.png",
                    scale: b(.17, 2, r)
                }),
                text: new ol.style.Text({
                    text: i,
                    scale: s,
                    offsetY: n,
                    textAlign: "center",
                    textBaseline: "middle",
                    font: "bold 12px Arial Narrow",
                    fill: new ol.style.Fill({
                        color: "#152e35",
                        width: 2
                    }),
                    stroke: new ol.style.Stroke({
                        color: "#fff",
                        width: 5
                    }),
                    offsetX: 0,
                    rotation: 0
                })
            }) ] : (// realiza un cluster para un array de features que se estes solpando en el mapa
            a = y[o]) || (a = [ new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 12,
                    stroke: new ol.style.Stroke({
                        color: "#2aabcf",
                        width: 4
                    }),
                    fill: new ol.style.Fill({
                        color: "#FFFFFF"
                    })
                }),
                text: new ol.style.Text({
                    textAlign: "center",
                    textBaseline: "middle",
                    font: "bold 12px Arial Narrow",
                    text: o.toString(),
                    fill: new ol.style.Fill({
                        color: "#152e35"
                    }),
                    stroke: new ol.style.Stroke({
                        color: "#fff",
                        width: 1
                    }),
                    offsetX: 0,
                    offsetY: 0,
                    rotation: 0
                })
            }) ], y[o] = a), a;
        };
    }
    /**
     * trae un estilo de icono para punto de localizacion en el mapa de acuerdo al zoom
     * @return {ol.style.Icon} nuevo estilo de icono
     */
    function $() {
        var e;
        return l && (e = l.getView().getZoom(), e = new ol.style.Style({
            image: new ol.style.Icon({
                anchorOrigin: "bottom-left",
                anchorXUnits: "fraction",
                anchorYUnits: "fraction",
                anchor: [ .5, .5 ],
                size: [ 32, 32 ],
                //opacity: 1.0,
                src: "app/img/marker-location.png",
                scale: b(.4, 2, e)
            })
        })), e;
    }
    /**
     * returna un nuevo estilo para las rutas en el mapa deacuerdo al zoom actual
     * @return {ol.style.Style} nuevo estilo de la ruta
     */
    // Style for selection
    var a = new ol.style.Circle({
        radius: 5,
        stroke: new ol.style.Stroke({
            color: "rgba(0,255,255,1)",
            width: 1
        }),
        fill: new ol.style.Fill({
            color: "rgba(0,255,255,0.3)"
        })
    });
    new ol.style.Style({
        image: a
    }), new ol.style.Style({
        image: a,
        // Draw a link beetween points (or not)
        stroke: new ol.style.Stroke({
            color: "#fff",
            width: 1
        })
    });
    // function getSelectStyleCluster() {
    //     var style = new ol.style.Style({
    //         image: getIconStyleCLuster(),
    //         // Draw a link beetween points (or not)
    //         stroke: new ol.style.Stroke(
    //         {
    //             color: "#fff",
    //             width: 1
    //         })
    //     });
    //
    //     return style;
    // }
    /**
     * Convert Hex color to RGB
     * @param  {string} hex     color en formato hexagesimal 
     * @param  {double} opacity opacidad entre [0-1]
     * @return {string}         string en formato: 'rbga(#,#,#,#)'
     */
    function I(e, t) {
        var 
        // Add Opacity to RGB to obtain RGBA
        a;
        return e && (e = e.replace("#", ""), a = "rgba(" + parseInt(e.substring(0, 2), 16) + "," + parseInt(e.substring(2, 4), 16) + "," + parseInt(e.substring(4, 6), 16) + "," + t + ")"), 
        a;
    }
    /**
     * selecciona un color aleatorio desde el array de setColorsHex
     * @return {string} string en formato: 'rbga(#,#,#,#)'
     */
    /**
   * returna una nueva feature en el punto [x,y]
   * @param  {Array<x,y>} point array de coordenadas [x,y] donde esta uvicada la nueva feature en el mapa
   * @return {ol.Feature}       nueva feature en las coordenadas indicadas por point
   */
    function A(e, t) {
        return new ol.Feature({
            geometry: new ol.geom.Point(e),
            name: t.toString()
        });
    }
    /**
    * funcion de incializacion del mapa en la vista
    * @param  {Object} options     {key:value} de opciones del inicializacion del mapa
    *                              mapId : id del DOM element donde se agrega el mapa
    *                              controlId : id los controles del mapa (aqui utilizado para cargar
    *                              los mapa de openlayer como controles en en el mapa de google map)
    *                              container : id del div que servira de contenedor para el mapa
    *                              onClickMap : callback que maneja el evento singleClick dispoarado
    *                              por el mapa
    * @return {ol.Map}         el mapa creado con las opciones espesificadas
    */
    /**
    * callback para actualizar los estilos de las features deacuerdo a la resolucion del mapa
    * @return {[type]} [description]
    */
    function k() {
        u.setStyle = S(), d.setStyle = $(), c.getSource().forEachFeature(function(e) {
            l && (// se comprueba que la referencia al mapa de openlayer haya sido instanciada
            t = l.getView().getZoom(), t = new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: v,
                    width: (t = t) < 2 ? .2 : t < 3 ? .6 : t < 4 ? .8 : t < 6 ? 1 : t < 8 ? 2 : t < 10 ? 4 : t < 12 ? 6 : t < 14 ? 7 : t < 16 ? 10 : t < 18 ? 14 : 16,
                    opacity: .5
                })
            }));
            var t, a = t;
            e.setStyle(a);
        });
    }
    /**
    * registra un nuevo manejador de eventos en el mapa
    * @param  {string} onEvent         evento al cual se registra el manejador
    * @param  {callabck} handlerCallback callback para menajr el evento
    * @return {void}                 [description]
    */
    /**
    * helper apra transformar coordenadas polares a coordenadas cartecianas
    * @param  {Object} coordinate objeto con las coordenadas {latitude:y , longitude:x}
    * @param  {object} options    opciones de la proueccion de las coordenadas de origen y destino
    * @return {Array<logitude, latitude>}            array con las nuevas coordenadas cartecianas [x,y]
    */
    function P(e, t) {
        var t = t || {}, a = t.src || o, t = t.dst || r;
        return ol.proj.transform([ e.longitude, e.latitude ], a, t);
    }
    function j(e) {
        var t = {
            src: r,
            dst: o
        }, e = _(e);
        return angular.isDefined(e) ? P(e, t) : null;
    }
    function _(e) {
        var t = {
            longitude: null,
            latitude: null
        };
        return t.longitude = e.longitude || e[0], t.latitude = e.latitude || e[1], 
        angular.isNumber(t.longitude) && angular.isNumber(t.latitude) ? t : null;
    }
    /**
    * centra el mapa en las coordenadas espesificas y coloca el apuntador en las mismas coordenadas
    * @param  {Object} coordinate objeto con las coordenadas {latitude:y , longitude:x} el cual se coloca el apuntador
    * @param  {object} options    center: centra tambien el mapa en las coordenadas
    * @return {void}
    */
    function R(e, t, a) {
        var o = d.getSource();
        e && (o.clear(), e = A(t = !0 === t ? P(e) : e, ""), o.addFeature(e), a) && s.setCenter(t);
    }
    /**
    * transforma un array de coordenadas polares [{latitude, longitude},...] a un array de coordenadas cartesianas [[x,y],...]
    * @param  {Array<Object>} pathPoints array con las coordenadas polares
    * @return {Array<Array[x,y]>}      arry con las coordenadas cartesianas            
    */
    /**
    * transforma un array de rutas de coordenadas polares en un array de rutas en coordenadas cartesianas
    * @param  {Array} pathArray array de rutas en coordenadas polares
    * @return {array}           array de rutas en coordenadas cartesianas
    */
    function C(e) {
        var t = [];
        return angular.isArray(e) && angular.forEach(e, function(e) {
            var t;
            this.push((e = e, t = [], angular.isArray(e) && angular.forEach(e, function(e) {
                this.push(P(e));
            }, t), t));
        }, t), t;
    }
    /**
    * crea una nueva feature a partir de una array de corodenadas cartesianas
    * @param  {Array<x,y>}     points  array de puntos cartesianos
    * @param  {Object}     options     id : id de la nueva feature
    *                                  name : nombre de la nueva feature
    * @return {ol.Feature}         nueva feature con la geometria del array de puntos
    */
    /**
    * crea todas las features a partir de un array de rutas
    * @param  {Array} transformPathArray array de rutas (array de puntos)
    * @return {Array}                    array de features
    */
    function D(e) {
        var t = [];
        return angular.forEach(e, function(e) {
            var t;
            this.push((e = e, t = t || {}, e = new ol.Feature({
                geometry: new ol.geom.LineString(e)
            }), angular.isDefined(t.name) && e.setGeometryName(t.name), angular.isDefined(t.id) && e.setId(t.id), 
            e));
        }, t), t;
    }
    /**
    * muestra un array de rutas en el mapa
    * @param  {Array} pathArray array de rutas a mostrar
    * @return {void}           
    */
    return {
        init: function(e) {
            var t, a, o, r;
            if (e && e.container) // se agrega el switcher de capas en el mapa
            return t = e.controlId || "olmap", a = e.container || "map", o = e.onClickMap || null, 
            //function(coordinate){;}; 
            r = e.onDblClickMap || null, (i = document.createElement("div")).id = t, 
            i.className += "olmap", document.getElementById(a).appendChild(i), e = Math.floor(Math.random() * (+w.length + 1)), 
            v = I(w[e], .5), (
            // definicion de la view de mapa
            s = new ol.View({
                center: ol.proj.transform([ 0, 0 ], "EPSG:4326", "EPSG:3857"),
                minZoom: 2.5,
                maxZoom: T
            })).on("change:resolution", k), // capa para el mapa de openlayer
            (// manejador para el cambio de resolucion del mapa
            h = new ol.layer.Tile({
                title: "Map Box",
                type: "base"
            })).setVisible(!0), 
            //osmLayer.setSource(new ol.source.OSM());
            h.setSource(new ol.source.XYZ({
                url: n().mapBoxURL
            })), 
            //Variables temporales para la creación de un vector Layer con cluster de distancia
            p = new ol.source.Vector(), g = new ol.source.Cluster({
                distance: 40,
                source: p
            }), 
            // capa para dibujar los puntos de visitas de una ruta en el mapa con cluster de distancia
            u = new ol.layer.Vector({
                title: "Visitas",
                visible: !0,
                source: g,
                animationDuration: 700,
                style: S()
            }), 
            // capa para dibujar las rutas en el mapa
            c = new ol.layer.Vector({
                title: "Route",
                visible: !0,
                source: new ol.source.Vector()
            }), 
            // capa para dibujar los puntos de packetes en el mapa
            d = new ol.layer.Vector({
                title: "location",
                visible: !0,
                source: new ol.source.Vector(),
                style: $()
            }), 
            // grupo de capas para los mapas
            g = new ol.layer.Group({
                title: "Mapa Base:",
                layers: [ h ]
            }), 
            // grupo de capas que contienen las rutas de un trayecto
            m = new ol.layer.Group({
                title: "Rutas",
                layers: [ c ]
            }), 
            // grupo de capas que contienen los puntos de paquetes y de visitas
            h = new ol.layer.Group({
                title: "Puntos de:",
                layers: [ u, d ]
            }), (f = []).push(g), f.push(m), f.push(h), g = new ol.control.LayerSwitcher({
                tipLabel: "Legende"
            }), 
            //actualiza la posición del mapa al dar click
            (
            // referencia para el mapa de openlayer
            l = new ol.Map({
                layers: f,
                interactions: ol.interaction.defaults({
                    altShiftDragRotate: !1,
                    dragPan: !1,
                    rotate: !1
                }).extend([ new ol.interaction.DragPan({
                    kinetic: null
                }) ]),
                target: i,
                view: s
            })).on("click", function(e) {
                //goToPoint(evt.coordinate, false);
            }), o && l.on("singleclick", function(e) {
                R(e.coordinate, !1);
                e = j(e.coordinate);
                o(e);
            }), r && l.on("dblclick", function(e) {
                R(e.coordinate, !1);
                e = j(e.coordinate);
                r(e);
            }), s.setCenter([ 0, 0 ]), s.setZoom(5), l.addControl(g), l;
            throw "No se puede mostrar el mapa";
        },
        registerEventHandler: function(e, t) {
            l.on(e, t);
        }
        /**
    * retorna la referencia al mapa de openlayer
    * @return {void}
    */,
        getMap: function() {
            return l;
        }
        // function onSelectCluster() {
        //
        //   selectCluster.getFeatures().on(['add'], function (e) {
        //       var c = e.element.get('features');
        //       if (c.length == 1) {
        //           var feature = c[0];
        //           console.log("One feature selected...<br/>(id=" + feature.get('id') + ")");
        //       }
        //       else {
        //           console.log("Cluster (" + c.length + " features)");
        //       }
        //   })
        //
        //   selectCluster.getFeatures().on(['remove'], function (e) {
        //       //$(".infos").html("");
        //   })
        // }
        /**
    * realiza un zoon sobre la ruta espesifica que tenga el feature con id = idRoute
    * @param  {number|string} idRoute id de la feature donde se encuentra la capa
    * @return {void}         
    */,
        zoonToRoute: function(e) {
            var t, a, o;
            t = m.getLayers(), a = e, angular.forEach(t, function(e) {
                e.getSource().getFeatureById(a) && (o = e);
            }), (e = o) && l.getView().fit(e.getSource().getExtent(), l.getSize(), {});
        }
        /**
    * realiza un busqueda sobre las features de las capas de rutas para encontrar la capa con id = idRoute
    * @param  {Array<ol.layer.Vector>} layers  capas de vectores de las rutas
    * @param  {number|string} idRoute id de la ruta a buscar
    * @return {ol.layer.Vector}         capa que contiene la feature con el id = idRoute
    */,
        goToPoint: R,
        showPath: function(e) {
            e = D(C(e)), t = e, (e = c.getSource()).addFeature(t[0]), e = e.getExtent(), 
            l.getView().fit(e, l.getSize(), {});
        }
        /**
    * muestra los puntos de visitas marcados en arrayPoints
    * @param  {Array} arrayPoints array de coordenadas donde se indican todas las visitas
    * @return {voi}             
    */,
        showPoints: function(e, t) {
            var a, o;
            p.clear(), "" !== t && (a = P({
                longitude: parseFloat(t.longitude),
                latitude: parseFloat(t.latitude)
            }), o = A(a, "Start"), p.addFeature(o)), angular.forEach(e, function(e, t) {
                a = P({
                    longitude: parseFloat(e.longitude),
                    latitude: parseFloat(e.latitude)
                }), o = A(a, t + 1), p.addFeature(o);
            });
        },
        zoom: function(e) {
            s.setZoom(e);
        },
        center: function(e) {
            s.setCenter(P(e));
        }
        //showPackages:showPackages,
    };
} ]), App.controller("MapGenLatLongController", [ "$scope", "$rootScope", "$http", "$state", "$stateParams", "MapsServices", "Notify", "message", "Geocoding", "GeoLocation", "GeocodingServices", "tempStorageData", "Decoder", function(c, e, t, a, u, d, o, r, n, p, i, s, g) {
    void 0 === u.map_mode_use && null === u.map_mode_use || "assigned" != u.map_mode_use && "journey" != u.map_mode_use && u.map_mode_use, 
    c.MAP, 
    //recuperar $stateParams.map_mode_use para defirnir intencion del mapa
    uso_mapa = void 0 !== u.map_mode_use || null !== u.map_mode_use ? u.map_mode_use : "no-map-origin";
    var l, m, h = null;
    //adecuar datos para la vista y seteo del object map
    switch (uso_mapa) {
      case "geocoding":
        c.map = {
            coordinates: {
                longitude: -74.12464382600275,
                latitude: 4.692948474207697
            },
            newCoordinates: {
                longitude: "",
                latitude: ""
            },
            address: "",
            newAddress: "",
            zone: "",
            newZone: "",
            save: !1
        }, c.geocoding = {
            model: {
                address: "",
                zone: "",
                location: {
                    x: 0,
                    y: 0
                }
            }
        };
        break;

      case "address":
        c.address, c.map = {
            coordinates: {
                longitude: -74.04487,
                latitude: 4.73162
            },
            newCoordinates: {
                longitude: "",
                latitude: ""
            },
            modific: !1
        };
        break;

      case "assigned":
        c.address, c.map = {
            coordinates: {
                longitude: -74.04487,
                latitude: 4.73162
            }
        };
        var f = u.address || {}, v = void 0 !== f.latitude ? parseFloat(f.latitude) : "", f = void 0 !== f.longitude ? parseFloat(f.longitude) : "";
        f && v && (c.map.coordinates = {
            longitude: f,
            latitude: v
        });
        break;

      case "journey":
        c.map = {
            routes: "",
            idRoute: "",
            MAP: ""
        }, c.journey = u.journey || null;
        break;

      case "route":
        if (null === u.geoJson && void 0 === s.data.mapRoute) return void a.go("app.routes.list");
        null !== u.geoJson && (s.data.mapRoute = {
            geoJson: null,
            routeId: null,
            packages: null,
            place: null,
            returnTo: {}
        }), f = T(u.geoJson, "geoJson"), v = T(u.routeId, "routeId"), l = T(u.packages, "packages"), 
        m = T(u.place, "place"), h = T(u.returnTo, "returnTo"), c.map = {
            geoJson: null !== f ? f : "",
            routeId: null !== v ? v : "",
            packages: null !== l ? l : "",
            place: null !== m ? m : ""
        }, c.showingTab = !0, void 0 !== h.data.journey && (s.data.journeyRoutes = h.data.journey), 
        e.$on("closeTab", function() {
            c.showingTab = !1;
        });
    }
    function y(e) {
        var t, a, o;
        "geocoding" == uso_mapa && (a = void 0 !== (t = u.geocoding || new n()).getLatitude() && 0 != t.getLatitude() ? t.getLatitude() : e.latitude, 
        o = void 0 !== t.getLongitude() && 0 != t.getLongitude() ? t.getLongitude() : e.longitude, 
        t = void 0 !== t.getAddress() ? t.getAddress() : "...", c.map.address = t || "", 
        c.map.newAddress = t || "", c.map.coordinates = {
            longitude: o,
            latitude: a
        }, c.map.newCoordinates = {
            longitude: o,
            latitude: a
        }, d.goToPoint(c.map.coordinates, !0, !0), d.zoom(18)), "address" == uso_mapa && (t = u.address || {}, 
        a = angular.isDefined(t.y) && 0 != t.y ? parseFloat(t.y) : e.latitude, o = angular.isDefined(t.x) && 0 != t.x ? parseFloat(t.x) : e.longitude, 
        c.map.coordinates = {
            longitude: o,
            latitude: a
        }, c.map.newCoordinates = {
            longitude: o,
            latitude: a
        }, d.goToPoint(c.map.coordinates, !0, !0), d.zoom(18));
    }
    function T(e, t) {
        return null !== e ? s.data.mapRoute[t] = e : null !== s.data.mapRoute[t] ? s.data.mapRoute[t] : s.data.mapRoute[t] = null;
    }
    function w(e) {
        e = e, "geocoding" == uso_mapa && (c.map.newCoordinates.longitude = e[0], 
        c.map.newCoordinates.latitude = e[1], c.map.newAddress = "", c.map.save = !1), 
        "address" == uso_mapa && (c.map.newCoordinates.longitude = e[0], c.map.newCoordinates.latitude = e[1], 
        c.map.modific = !0), c.$digest(), c.inverseGeocoding();
    }
    function b(e, t) {
        return Number(Math.round(e + "e" + t) + "e-" + t).toFixed(t);
    }
    c.$on("$viewContentLoaded", function(e) {
        if ("geocoding" == uso_mapa && (c.MAP = d.init({
            container: "map",
            controlId: "olmap",
            onClickMap: w
        }), p.getLocation().then(y, y)), "address" == uso_mapa && (c.MAP = d.init({
            container: "map",
            controlId: "olmap"
        }), p.getLocation().then(y, y)), "assigned" == uso_mapa && (c.MAP = d.init({
            container: "map",
            controlId: "olmap"
        }), d.goToPoint(c.map.coordinates, !0, !0), d.zoom(18)), "journey" == uso_mapa) {
            if (c.map.MAP = d.init({
                container: "map",
                controlId: "olmap"
            }), !c.journey.routes) return;
            for (var t, a, o, r = c.journey.routes, n = [], i = [], s = 0; s < r.length; ++s) if (n.push(r[s].geoJson), 
            a = r[s].packages) for (var l = 0; l < a.length; l++) (o = a[l]) && o.latitude && o.longitude ? i.push({
                latitude: o.latitude,
                longitude: o.longitude
            }) : console.log("== no pack == route[", s, "].packages[", l, "]"); else console.log("== no packages == route[", s, "]");
            t = g.decodePaths(n), d.showPath(t);
        }
        "route" == uso_mapa && (c.MAP = d.init({
            container: "map",
            controlId: "olmap"
        }), c.map.geoJson ? (i = g.decodePoints(c.map.geoJson), d.showPath([ i ]), 
        c.map.packages && d.showPoints(c.map.packages, c.map.place)) : console.log(u));
    }), c.accept = function() {
        "assigned" != uso_mapa && "journey" != uso_mapa || u.returnTo.state && a.go(u.returnTo.state, u.returnTo.data), 
        "route" == uso_mapa && h.state && a.go(h.state, h.data);
    }, c.zoon = function() {
        c.map.idRoute && d.zoonToRoute(c.map.idRoute.id);
    }, c.goToBack = function() {
        "assigned" == uso_mapa && a.go("app.visits.list", {
            journey: u.returnTo.data.journey,
            packages: u.returnTo.data.packages
        }), "route" == uso_mapa && ("app.routes.list" == h.state.name ? a.go("app.routes.list", {
            journey: h.data.journey
        }) : "app.journeys.list" == h.state.name && a.go("app.journeys.list"));
    }, c.showTab = function() {
        c.showingTab = !0;
    }, c.save = function() {
        if ("geocoding" == uso_mapa) {
            if (!c.map.save) return console.log(r), void r.show("warning", "Actualice las coordenadas");
            u.returnTo.state && (c.geocoding.model.address = c.map.newAddress, c.geocoding.model.zone = c.map.newZone, 
            c.geocoding.model.location.x = c.map.newCoordinates.longitude, c.geocoding.model.location.y = c.map.newCoordinates.latitude, 
            u.returnTo.data.address = c.geocoding.model, a.go(u.returnTo.state, {
                data: u.returnTo.data
            }));
        }
        "address" == uso_mapa && c.map.modific && u.returnTo.state && (
        // TODO: falta modificar los datoso con la nueva direccion
        u.address.x = c.map.newCoordinates.longitude, u.address.y = c.map.newCoordinates.latitude, 
        // $stateParams.address.status = true;
        a.go(u.returnTo.state, {
            data: u.returnTo.data
        }));
    }, c.reset = function() {
        "geocoding" == uso_mapa && (c.map.newCoordinates = angular.copy(c.map.coordinates), 
        c.map.newAddress = angular.copy(c.map.address), d.goToPoint(c.map.coordinates, !0), 
        c.map.save = !1), "address" == uso_mapa && (c.map.modific = !1, c.map.newCoordinates = angular.copy(c.map.coordinates), 
        d.goToPoint(c.map.coordinates, !0));
    }, c.cancel = function() {
        "geocoding" == uso_mapa && u.returnTo.state && (c.geocoding.model.address = c.map.address, 
        c.geocoding.model.zone = c.map.zone, c.geocoding.model.location.x = c.map.coordinates.longitude, 
        c.geocoding.model.location.y = c.map.coordinates.latitude, u.returnTo.data.address = c.geocoding.model, 
        a.go(u.returnTo.state, {
            data: u.returnTo.data
        })), "address" == uso_mapa && u.returnTo.state && a.go(u.returnTo.state, {
            data: u.returnTo.data
        }), "assigned" == uso_mapa && (c.address, c.map = {
            coordinates: {
                longitude: -74.04487,
                latitude: 4.73162
            }
        });
    }, c.inverseGeocoding = function() {
        o.alert("Buscando dirección, porfavor espere", {
            status: "info",
            timeout: 5e3
        }), i.reverse(c.map.newCoordinates.longitude, c.map.newCoordinates.latitude).then(function(e) {
            c.map.newAddress = e.address, c.map.newZone = e.zone, c.map.newCoordinates.longitude = b(e.location.x, 6), 
            c.map.newCoordinates.latitude = b(e.location.y, 6), c.map.save = !0, 
            $.notify.closeAll(), o.alert("Direccion localizada", {
                status: "success",
                timeout: 2e3
            });
        }, function(e) {
            c.map.save = !1, $.notify.closeAll(), o.alert("Direccion no localizada", {
                status: "danger",
                timeout: 2e3
            });
        });
    };
} // fin de funcion
 ]), App.config([ "$routeProvider", "$urlRouterProvider", "$httpProvider", "$authProvider", "config", function(e, t, a, o, r) {
    //$routeProvider.otherwise({redirectTo: '/login'});
    //$urlRouterProvider.otherwise('/login');
    a.defaults.useXDomain = !0, 
    //delete $httpProvider.defaults.headers.common['X-Requested-With'];
    o.facebook({
        clientId: r().AppFaceId
    }), o.google({
        clientId: r().AppGoogleId
    });
} ]), 
/**=========================================================
 * Module: custom/config/constant.js
 * App default url path for api and other configurations
 =========================================================*/
App.constant("config", function() {
    // body...
    "use strict";
    // id de aplicaciones
    var e = "http://localhost:3000", t = {
        api: {}
    }, a = {}, o = "http://", r = "hanoit", n = "9000", i = o + r + ":" + n + "/hanoit/api/v1";
    // configuracion de las rutas
    t.login = o + r + ":" + n + "/oauth/token", t.signup = o + r + ":" + n + "/singup", 
    t.forgotPassword = o + r + ":" + n + "/forgotPassword", 
    //    path.login =        url+"/login";
    //    path.signup =       url+"/signup";
    t.register = e + "/register", t.account = e + "/api/account", t.partials = e + "/server/partials/", 
    //path.uploadFile =   url+"/server/upload/"; 
    //    path.uploadFile =   "http://52.26.129.237:9000/hanoit/api/v1/journey/upload"; 
    //url de los recurso del API
    //    path.api.typeResources =     API_URL+"/typeresources";
    t.api.typeResources = i + "/typevehicle/:id", t.api.assignedServices = i + "/assignedservice/:id", 
    t.api.places = i + "/places/:id", t.api.drivers = i + "/driver/:id", t.api.catalogs = i + "/catalogs/:id", 
    t.api.geocoding = i + "/geocoding", t.api.reverse_geocoding = i + "/reverse_geocoding", 
    t.api.optimalRouteOfPointCloud = i + "/optimalRouteOfPointCloud", t.api.optimisationForMessenger = i + "/optimisationForMessenger", 
    t.api.journeys = i + "/journeys/:id", t.api.journeyUploadFile = i + "/journey/upload", 
    t.api.routes = i + "/routes", t.api.settings = i + "/settings/:id", t.api.vehicles = i + "/vehicles/:id", 
    t.api.visits = i + "/visits/:id", 
    // areas o div para elemetos espesificos
    a.mapaGoogle = "mapaGoogle", a.mapaStreetView = "mapaStreetView";
    return {
        path: t,
        areas: a,
        AppFaceId: "760244197414824",
        AppGoogleId: "299346955747-0q7jel6iaok2g36a1hginqta56i7fm08.apps.googleusercontent.com",
        clientSecret: "123456",
        clientId: "HANOIT-APP",
        user: {
            type: {
                ANONIMUS: 0,
                BASIC: 1,
                PREMIER: 2,
                ENTERPRISE: 3
            }
        },
        visits: {
            status: [ {
                key: "VISITED",
                value: 0,
                name: "VISITADOS"
            }, {
                key: "VISIT_PENDING",
                value: 1,
                name: "PENDIENTE"
            }, {
                key: "VISIT_FINISHED",
                value: 2,
                name: "FINALIZADO"
            } ]
        },
        mapBoxURL: "http://api.tiles.mapbox.com/v4/direct.cif4495oq30swsum3eems1dkf/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoiZGlyZWN0IiwiYSI6ImNpZjQ0OTcyZTMxZnJ0aW01dzU5bW9xd2sifQ.aYjmmG1QKi4VYM6ya0kL4Q"
    };
}), 
/**=========================================================
 * Module: journeys_form_controller.js
 * controllador del formulario de trayectos
 =========================================================*/
App.controller("JourneysChartController", [ "$scope", "$rootScope", "JourneyHttp", "ChartData", function(e, t, a, o) {
    // BAR
    e.barData = o.load("json/bar.json"), 
    // ----------------------------------- 
    e.barOptions = {
        series: {
            bars: {
                align: "center",
                lineWidth: 0,
                show: !0,
                barWidth: .6,
                fill: .9
            }
        },
        grid: {
            borderColor: "#eee",
            borderWidth: 1,
            hoverable: !0,
            backgroundColor: "#fcfcfc"
        },
        tooltip: !0,
        tooltipOpts: {
            content: function(e, t, a) {
                return t + " : " + a;
            }
        },
        xaxis: {
            tickColor: "#fcfcfc",
            mode: "categories"
        },
        yaxis: {
            position: e.app.layout.isRTL ? "right" : "left",
            tickColor: "#eee"
        },
        shadowSize: 0
    }, 
    // BAR STACKED
    // ----------------------------------- 
    e.barStackeData = o.load("json/barstacked.json"), e.barStackedOptions = {
        series: {
            stack: !0,
            bars: {
                align: "center",
                lineWidth: 0,
                show: !0,
                barWidth: .6,
                fill: .9
            }
        },
        grid: {
            borderColor: "#eee",
            borderWidth: 1,
            hoverable: !0,
            backgroundColor: "#fcfcfc"
        },
        tooltip: !0,
        tooltipOpts: {
            content: function(e, t, a) {
                return t + " : " + a;
            }
        },
        xaxis: {
            tickColor: "#fcfcfc",
            mode: "categories"
        },
        yaxis: {
            min: 0,
            max: 200,
            // optional: use it for a clear represetation
            position: e.app.layout.isRTL ? "right" : "left",
            tickColor: "#eee"
        },
        shadowSize: 0
    };
} ]).service("ChartData", [ "$resource", function(t) {
    var a = {
        get: {
            method: "GET",
            isArray: !0
        }
    };
    return {
        load: function(e) {
            return t(e, {}, a).get();
        }
    };
} ]), 
/**=========================================================
 * Module: journeys_controller.js
 * controllador para el modulo de trajectos
 =========================================================*/
App.controller("JourneysController", [ "$scope", "$rootScope", "$filter", "$state", "JourneyHttp", "resincTknRefresh", "ngDialog", "tpl", "RouteTabService", "message", "PdfExporter", "XlsxExporter", function(r, o, n, a, i, e, s, l, c, u, t, d) {
    r.journeys = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 10,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        selectAll: function() {
            for (var e in r.journeys.selectedAll = !r.journeys.selectedAll, r.journeys.selectedItems) r.journeys.selectedItems[e].check = r.journeys.selectedAll;
        },
        goToChart: function() {
            a.go("app.journeys.chart");
        },
        goToDetail: function(e) {
            console.log("aqui toy"), console.log(e), a.go("app.journeys.detail", {
                data: e
            });
        },
        goToMap: function(e) {
            o.loadingVisible = !0, new i({
                id: e.id
            }).$detail(function(e) {
                o.loadingVisible = !1;
                var t = [];
                angular.forEach(e.routes, function(e, t) {
                    this.push({
                        id: e.id || "" + t,
                        name: e.name || "Ruta-" + t,
                        geoJson: e.geoJson,
                        packages: e.packages
                    });
                }, t), c.update(e.name, e.place, t), c.open(), a.go("app.maps.route", {
                    map_mode_use: "route",
                    geoJson: t[0].geoJson,
                    routeId: null,
                    place: e.place,
                    packages: t[0].packages,
                    returnTo: {
                        state: a.current,
                        data: {}
                    }
                });
            }, function(e) {
                u.show("error", "Error intentando ir al mapa"), o.loadingVisible = !1;
            });
        },
        goToRoute: function(e) {
            a.go("app.routes.list", {
                journey: e
            });
            //          $state.go("app.routes.list");
        },
        add: function() {
            a.go("app.journeys.add");
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.journeys.getData();
                });
            });
        },
        exportPDf: function(e) {
            //var pdf = new PdfExporter('l');
            //var _route = route;
            //_route.date = $scope.journeys.current.date;
            //_route.routeRestrictionType = $scope.journeys.current.routeRestrictionType;
            // processRoute(_route);
            //pdf.getReportVisitList(_route);
        },
        exportXLSX: function(e) {
            console.log(e), o.loadingVisible = !0, new i({
                id: e.id
            }).$detail(function(e) {
                o.loadingVisible = !1;
                var a = [];
                angular.forEach(e.routes, function(e, t) {
                    p(e), a.push(e);
                }), d.getReportJourneyVisitList(a);
            }, function(e) {
                u.show("error", "Error intentando traer rutas"), o.loadingVisible = !1;
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.journeys.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    u.show("success", n("translate")("journeys.message.deleteConfirm")), 
                    r.journeys.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.journeys.filterText,
                precision: !1
            } ];
            r.journeys.selectedItems = n("arrayFilter")(r.journeys.dataSource, e), 
            r.journeys.paginations.totalItems = r.journeys.selectedItems.length, 
            r.journeys.paginations.currentPage = 1, r.journeys.changePage();
        },
        changePage: function() {
            var e = 1 == r.journeys.paginations.currentPage ? 0 : r.journeys.paginations.currentPage * r.journeys.paginations.itemsPerPage - r.journeys.paginations.itemsPerPage;
            r.journeys.data = r.journeys.selectedItems.slice(e, r.journeys.paginations.currentPage * r.journeys.paginations.itemsPerPage);
        },
        getData: function() {
            r.journeys.data = [], r.journeys.loading = !0, r.journeys.noData = !1, 
            i.getList(function(e) {
                e = e.reverse();
                r.journeys.selectedItems = e, r.journeys.dataSource = e, r.journeys.paginations.totalItems = r.journeys.selectedItems.length, 
                r.journeys.paginations.currentPage = 1, r.journeys.changePage(), 
                r.journeys.loading = !1, r.journeys.dataSource.length < 1 && (r.journeys.noData = !0);
            });
        }
    };
    new e(function() {
        //success
        r.journeys.getData();
    }, function() {
        //fail
        a.go("access.login");
    });
    var p = function(e) {
        for (var t = 0, a = 0, o = 0, r = 0; r < e.instructions.length - 1; r++) {
            var n = e.instructions[r][0];
            9 == n || 15 == n ? (0, 
            /**
                 * Start point
                */
            0 != o && 9 != n && 15 != n || (e.packages[o].distanceArrival = parseInt(a), 
            e.packages[o].timeArrival = (t / 60).toFixed(1)), a = t = 0, o++) : (a += parseInt(e.instructions[r][2]), 
            t += parseInt(e.instructions[r][4]));
        } // end for
    }
    /*
    	JourneyHttp.getJourneys().then(function(result) {

		      $scope.journeys.selectedItems = result.journeys;
		      $scope.journeys.dataSource = result.journeys;
		      $scope.journeys.paginations.totalItems = $scope.journeys.selectedItems.length;
		      $scope.journeys.paginations.currentPage = 1;
		      $scope.journeys.changePage();
    	})
*/;
} ]), 
/**=========================================================
 * Module: journeys_form_controller.js
 * controllador del formulario de trayectos
 =========================================================*/
App.controller("JourneysFormController", [ "$scope", "$rootScope", "$state", "$translate", "$stateParams", "FileUploader", "config", "Journey", "Itinerary", "SettingsHttp", "uuid", "tokenStorage", "message", "tempStorageData", function(r, n, i, s, e, t, a, o, l, c, u, d, p, g) {
    "use strict";
    function m(e, t) {
        return Number(Math.round(e + "e" + t) + "e-" + t).toFixed(t);
    }
    function h(e) {
        f(r.uploader.queue, e);
    }
    function f(e, t) {
        for (var a = 0; a < e.length; a++) t(e[a], a);
    }
    function v(e) {
        return "csv" == e.charAt(e.length - 3) + e.charAt(e.length - 2) + e.charAt(e.length - 1);
    }
    r.journey = {
        model: {
            name: void 0,
            setting: "",
            place: "",
            itinerary: [],
            file_name: "",
            file_prevw: !1,
            file_size: 0
        },
        valid_try_upload: 0,
        goToManually: function() {
            h(function(e, t) {
                e.upload();
            });
            //$state.go('app.itinerary.list', { data: { journey: $scope.journey.model } });
        },
        goToHelp: function() {
            i.go("app.journeys.help", {
                data: r.journey.model
            });
        },
        cancel: function() {
            i.go("app.journeys.list");
        },
        cancelPreview: function() {
            0 < r.uploader.queue.length && h(function(e, t) {
                e.remove();
            }), r.journey.valid_try_upload = 0, $(".bootstrap-filestyle :input").val(""), 
            r.journey.model.file_name = "", r.journey.model.file_prevw = !1, r.journey.model.file_size = 0;
        }
    }, r.uploader = new t({
        url: a().path.api.journeyUploadFile,
        autoUpload: !1,
        headers: {
            // Authorization : 'Basic SEFOT0lULUFQUDoxMjM0NTY='
            Authorization: "Bearer " + d.get()
        },
        removeAfterUpload: !0
    }), 
    // FILTERS
    r.uploader.filters.push({
        name: "checkName",
        fn: function(e) {
            //return !$scope.name_required;
            return null == r.journey.model.name || "" == r.journey.model.name ? r.name_required = !0 : r.name_required = !1, 
            !0;
        }
    }, {
        name: "extensionFilter",
        fn: function(e, t) {
            return !!v(e.name);
        }
    }, {
        name: "sizeFilter",
        fn: function(e, t) {
            return 0 < e.size;
        }
    }, {
        name: "queeReset",
        fn: function(e, t) {
            return !!(0 < e.size && v(e.name)) && (0 < r.uploader.queue.length && h(function(e, t) {
                e.remove();
            }), !0);
        }
    }), r.uploader.onAfterAddingFile = function(e) {
        r.journey.valid_try_upload = 1, r.journey.model.file_name = e.file.name, 
        r.journey.model.file_prevw = !0, r.journey.model.file_size = e.file.size, 
        $(".bootstrap-filestyle :input").val(e.file.name);
    }, r.uploader.onWhenAddingFileFailed = function(e /*{File|FileLikeObject}*/, t, a) {
        var o;
        //console.info('onWhenAddingFileFailed', item, filter, options);
        "extensionFilter" == t.name && p.show("warning", s.instant("journeys.form.messages_filters.INVALID_FILE_TYPE")), 
        "sizeFilter" == t.name && p.show("warning", s.instant("journeys.form.messages_filters.INVALID_FILE_SIZE")), 
        0 == r.uploader.queue.length ? (r.journey.valid_try_upload = 0, 
        //$('.bootstrap-filestyle .badge').remove();
        $(".bootstrap-filestyle :input").val(""), r.journey.model.file_name = "", 
        r.journey.model.file_prevw = !1, r.journey.model.file_size = 0) : (r.journey.valid_try_upload = 1, 
        r.journey.model.file_name = (o = "", h(function(e, t) {
            o = e.file.name;
        }), o));
    }, r.uploader.onCompleteItem = function(e, t, a, o) {
        t.message ? (document.getElementById("filestyle-0").value = "", p.show("error", t.message), 
        n.loadingVisible = !1) : (t = t.routes[0].packages, r.journey.model.itinerary = [], 
        g.data.cachedJourney = [], 
        //$rootScope.cachedJourney = [];
        f(t, function(e, t) {
            (e = e).id = t + 1, e.status = !(!e.latitude || !e.longitude), e.latitude = e.latitude && m(e.latitude, 6), 
            e.longitude = e.longitude && m(e.longitude, 6), r.journey.model.itinerary.push(e);
        }), n.loadingVisible = !1, null == r.journey.model.name || "" == r.journey.model.name ? r.name_required = !0 : (r.name_required = !1, 
        g.data.cachedJourney = r.journey.model, 
        //$rootScope.cachedJourney = $scope.journey.model;
        i.go("app.itinerary.list", {
            data: {
                journey: r.journey.model
            }
        })));
    }, r.uploader.onBeforeUploadItem = function(e) {
        var t;
        n.loadingVisible = !0, r.name_required = !1, e.headers.Authorization = "Bearer " + d.get(), 
        "" !== r.journey.model.name && (t = e.url, e.url = t + "?name=" + encodeURI(r.journey.model.name), 
        r.journey.uploading = !0);
    }, r.journey_name = function() {
        void 0 !== r.journey.model.name && "" !== r.journey.model.name ? r.name_required = !1 : r.name_required = !0;
    }, e.data && (r.journey.model = e.data);
} ]), 
/**=========================================================
 * Module: journeys_form_controller.js
 * controllador del formulario de trayectos
 =========================================================*/
App.controller("JourneyDetailController", [ "$scope", "$rootScope", "$state", "$stateParams", "message", function(e, t, a, o, r) {
    "use strict";
    e.journey = {
        model: {
            name: "",
            date: "",
            countRoutes: 0
        }
    }, console.log(o.data), e.journey.model = o.data;
} ]), 
/**=========================================================
 * Module: journeys_form_controller.js
 * controllador del formulario de trayectos
 =========================================================*/
App.controller("JourneyFileHelpController", [ "$scope", "$rootScope", "$state", "$stateParams", "message", function(e, t, a, o, r) {
    "use strict";
    e.journey = {
        goToBack: function() {
            a.go("app.journeys.add", {
                data: n
            });
        }
    };
    var n = o.data;
} ]), 
/**=========================================================
 * Module: places_controller.js
 * controllador para el modulo lugares
 =========================================================*/
App.controller("PlacesController", [ "$scope", "$rootScope", "$filter", "$state", "PlacesHttp", "resincTknRefresh", "ngDialog", "tpl", "message", function(r, e, n, t, i, a, s, l, c) {
    r.places = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !1,
        loading: !1,
        selectAll: function() {
            for (var e in r.places.selectedAll = !r.places.selectedAll, r.places.selectedItems) r.places.selectedItems[e].check = r.places.selectedAll;
        },
        add: function() {
            t.go("app.places.add");
        },
        edit: function(e) {
            t.go("app.places.edit", {
                data: {
                    place: e
                }
            });
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.places.getData();
                });
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.places.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !1
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    c.show("success", n("translate")("places.message.deleteConfirm")), 
                    r.places.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.places.filterText,
                precision: !1
            } ];
            r.places.selectedItems = n("arrayFilter")(r.places.dataSource, e), r.places.paginations.totalItems = r.places.selectedItems.length, 
            r.places.paginations.currentPage = 1, r.places.changePage();
        },
        changePage: function() {
            var e = 1 == r.places.paginations.currentPage ? 0 : r.places.paginations.currentPage * r.places.paginations.itemsPerPage - r.places.paginations.itemsPerPage;
            r.places.data = r.places.selectedItems.slice(e, r.places.paginations.currentPage * r.places.paginations.itemsPerPage);
        },
        getData: function() {
            r.places.data = [], r.places.loading = !0, r.places.noData = !1, i.getList(function(e) {
                e = e.reverse();
                r.places.dataSource = e, r.places.selectedItems = e, r.places.paginations.totalItems = r.places.selectedItems.length, 
                r.places.paginations.currentPage = 1, r.places.changePage(), r.places.loading = !1, 
                r.places.dataSource.length < 1 && (r.places.noData = !0);
            });
        }
    };
    new a(function() {
        //success
        r.places.getData();
    }, function() {
        //fail
        t.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: address_form_controller.js
 * controllador para el modulo de lugares
 =========================================================*/
App.controller("PlacesFormController", [ "$scope", "$rootScope", "$state", "$stateParams", "PlacesHttp", "Geocoding", "message", function(a, e, o, r, t, n, i) {
    a.locationChange = e.locationChange, a.$watch("locationChange.newState", function() {
        console.log(a.locationChange);
    }), a.place = {
        model: {
            id: "",
            name: "",
            address: "",
            phoneNumber: "",
            latitude: 0,
            longitude: 0
        },
        geocoding: function() {
            var e = {
                state: o.current.name,
                data: {
                    place: a.place.model,
                    returnTo: r.returnTo,
                    address: {}
                }
            };
            o.go("app.address.geocoding", {
                returnTo: e
            });
        },
        save: function() {
            var e = new t(a.place.model);
            o.is("app.places.add") && a.placeForm.$valid ? (delete e.id, e.$save(function(e) {
                a.place.cancel();
            })) : o.is("app.places.edit") && a.placeForm.$valid ? e.$update(function(e) {
                a.place.cancel();
            }) : i.show("warning", "Formulario invalido");
        },
        cancel: function() {
            void 0 !== r.returnTo && r.returnTo.state ? o.go(r.returnTo.state, {
                data: r.returnTo.data
            }) : r.data && void 0 !== r.data.returnTo && r.data.returnTo.state ? o.go(r.data.returnTo.state, {
                data: r.data.returnTo.data
            }) : o.go("app.places.list");
        },
        goToMap: function() {
            var e = new n({
                result: a.place.model,
                address: "address",
                latitude: "latitude",
                longitude: "longitude",
                status: "status"
            }), t = {
                state: o.current.name,
                data: {
                    place: a.place.model,
                    returnTo: r.returnTo,
                    address: {}
                }
            };
            o.go("app.maps.geocoding", {
                map_mode_use: "geocoding",
                geocoding: e,
                returnTo: t
            });
        }
    }, console.log(r), r.data && (void 0 !== r.data.place && (a.place.model = r.data.place), 
    void 0 !== r.data.address) && void 0 !== r.data.address.address && (a.place.model.address = r.data.address.address || a.place.model.address, 
    a.place.model.longitude = r.data.address.location.x || a.place.model.longitude, 
    a.place.model.latitude = r.data.address.location.y || a.place.model.latitude);
} ]), 
/**=========================================================
 * Module: Routes_controller.js
 * controllador para el modulo lugares
 =========================================================*/
App.controller("RoutesController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "RoutesHttp", "JourneyHttp", "resincTknRefresh", "RouteTabService", "$http", "PdfExporter", "XlsxExporter", "tempStorageData", function(o, e, t, a, r, n, i, s, l, c, u, d, p) {
    o.Routes = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 10,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !0,
        selectAll: function() {
            for (var e in o.Routes.selectedAll = !o.Routes.selectedAll, o.Routes.selectedItems) o.Routes.selectedItems[e].check = o.Routes.selectedAll;
        },
        info: function(e) {
            e.date = o.journeys.current.date, e.routeRestrictionType = o.journeys.current.routeRestrictionType, 
            a.go("app.routes.detail", {
                data: e,
                returnTo: {
                    state: a.current.name,
                    data: {
                        journey: o.journeys.current
                    }
                }
            });
        },
        goToMap: function(e) {
            this.showRoutesInMap(), l.open(), a.go("app.maps.route", {
                map_mode_use: "route",
                geoJson: e.geoJson,
                routeId: null,
                place: o.journey_current.place,
                packages: e.packages,
                returnTo: {
                    state: a.current,
                    data: {
                        journey: o.journeys.current
                    }
                }
            });
        },
        share: function() {},
        listVists: function(e) {
            a.go("app.visits.list", {
                packages: e.packages,
                returnTo: {
                    state: a.current,
                    data: {
                        journey: o.journeys.current
                    }
                }
            });
        },
        addService: function(e) {
            a.go("app.assignedServices.add", {
                route: e,
                returnTo: {
                    state: a.current.name,
                    data: {
                        journey: o.journeys.current
                    }
                }
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: o.Routes.filterText,
                precision: !1
            } ];
            o.Routes.selectedItems = t("arrayFilter")(o.Routes.dataSource, e), o.Routes.paginations.totalItems = o.Routes.selectedItems.length, 
            o.Routes.paginations.currentPage = 1, o.Routes.changePage();
        },
        changePage: function() {
            var e = 1 == o.Routes.paginations.currentPage ? 0 : o.Routes.paginations.currentPage * o.Routes.paginations.itemsPerPage - o.Routes.paginations.itemsPerPage;
            o.Routes.data = o.Routes.selectedItems.slice(e, o.Routes.paginations.currentPage * o.Routes.paginations.itemsPerPage);
        },
        setData: function(e) {
            if (void 0 !== e && 0 < e.length) {
                for (var t = e, a = 0; a < t.length; a++) t[a].name = "Ruta-" + a;
                o.Routes.dataSource = t, o.Routes.selectedItems = t, o.Routes.paginations.totalItems = o.Routes.selectedItems.length, 
                o.Routes.paginations.currentPage = 1, o.Routes.changePage();
            } else o.Routes.noData = !0, o.Routes.clearData();
        },
        clearData: function() {
            o.Routes.dataSource = [], o.Routes.selectedItems = [], o.Routes.paginations.totalItems = 0, 
            o.Routes.paginations.currentPage = 1, o.Routes.changePage();
        },
        showRoutesInMap: function() {
            var e = o.journey_current, t = [];
            angular.forEach(e.routes, function(e, t) {
                this.push({
                    id: e.id || "" + t,
                    name: e.name || "Ruta-" + t,
                    geoJson: e.geoJson,
                    packages: e.packages
                });
            }, t), l.update(o.journey_current.name, o.journey_current.place, t);
        },
        exportPDf: function(e) {
            var t = new u("l");
            e.date = o.journeys.current.date, e.routeRestrictionType = o.journeys.current.routeRestrictionType, 
            // processRoute(_route);
            t.getReportVisitList(e);
        },
        exportXLSX: function(e) {
            g(e), d.getReportVisitList(e);
        }
    };
    var g = function(e) {
        for (var t = 0, a = 0, o = 0, r = 0; r < e.instructions.length - 1; r++) {
            //console.log(route.instructions[index]);
            var n = e.instructions[r][0];
            9 == n || 15 == n ? (0, 
            /**
                 * Start point
                */
            0 != o && 9 != n && 15 != n || (e.packages[o].distanceArrival = parseInt(a), 
            e.packages[o].timeArrival = (t / 60).toFixed(1)), a = 
            //                doc.text(15, startPosPDF, 'Visita ' + nextPointIndex + ": ");
            //  doc.text(35, startPosPDF, directionFrom + ' a ' + directionTo);
            //              doc.text(25, startPosPDF, 'Resumen');
            //                doc.text(40, startPosPDF, 'Distancia: ' + (distNextPoint / 1000).toFixed(2) + ' km');
            //                var timeDist=Math.round(timeNextPoint / 60);
            //                doc.text(70, startPosPDF, 'Duración: ' + timeDist + ' min');
            //                startTime=startTime+timeNextPoint;
            //                doc.text(100, startPosPDF, 'Hora Llegada: ' +  gcApi.formatHour(startTime).substring(0,5));
            //                startTime=startTime + unloadTime;
            //                doc.text(135, startPosPDF, 'Hora Salida: ' +  gcApi.formatHour(startTime).substring(0,5) );
            //                doc.text(165, startPosPDF, 'Estadia: ' +  Math.round(unloadTime/60)+" min" );
            //                startPosPDF = startPosPDF + 7;
            t = 0, o++) : (a += parseInt(e.instructions[r][2]), t += parseInt(e.instructions[r][4]));
        } // end for
    };
    o.journeys = {
        current: {},
        add: function() {
            a.go("app.journeys.add");
        },
        data: []
    }, new s(function() {
        //success
        i.getList(function(e) {
            o.journeys.data = e;
            for (var t = 0; t < o.journeys.data.length; t++) if (o.journeys.data[t].id == o.journeys.current.id) {
                o.journeys.current = o.journeys.data[t];
                break;
            }
        });
    }, function() {
        //fail
        a.go("access.login");
    });
    function m() {
        for (var e = 0; e < o.journeys.data.lenght; e++) if (o.journeys.data[e].id == o.journeys.current.id) {
            o.journeys.current = o.journeys.data[e];
            break;
        }
    }
    o.$watch("journeys.current", function() {
        o.journeys.current.id && (o.Routes.noData = !1, o.Routes.loading = !0, o.Routes.clearData(), 
        new i({
            id: o.journeys.current.id
        }).$detail(function(e) {
            o.journey_current = e, o.Routes.loading = !1, o.Routes.setData(e.routes), 
            o.Routes.showRoutesInMap();
        }, function(e) {
            o.Routes.loading = !1;
        }));
    }), r.journey ? (void 0 !== r.journey && (o.journeys.current = r.journey), m()) : void 0 !== p.data.journeyRoutes && (void 0 !== (s = p.data.journeyRoutes) && (o.journeys.current = s), 
    m());
} ]), 
/**=========================================================
 * Module: route_detail_controller.js.js
 * controllador para el detalle de la ruta
 =========================================================*/
App.controller("RouteDetailController", [ "$scope", "$rootScope", "$state", "$stateParams", "PdfExporter", "tempStorageData", function(t, e, a, o, r, n) {
    null === o.data && void 0 === n.data.journeyRoutes ? a.go("app.routes.list") : (t.routeDetail = {
        model: {
            distance: 100,
            estimatedTime: 30,
            numVisits: 35,
            avgTimeVisit: "05:00 min",
            initTime: "08:00 A.M",
            finalTime: "16:35 P.M",
            weightUse: 95,
            volumeUse: 60,
            cost: 8
        },
        exportPDF: function(e) {
            new r().getReportRouteInfo(t.routeDetail.model);
        },
        goToBack: function() {
            a.go("app.routes.list", {
                journey: o.returnTo.data.journey
            });
        }
    }, t.routeDetail.model = o.data || t.routeDetail.model, n.data.journeyRoutes = o.returnTo.data.journey, 
    n = function(e) {
        var t = "";
        {
            var a, o;
            null !== e.startRouteDate && (a = e.startRouteDate.hour + ":" + e.startRouteDate.minute + ":" + e.startRouteDate.second, 
            o = e.finishRouteDate.hour + ":" + e.finishRouteDate.minute + ":" + e.finishRouteDate.second, 
            r = new Date(0, 0, 0, e.startRouteDate.hour, e.startRouteDate.minute, e.startRouteDate.second, 0), 
            n = new Date(0, 0, e.startRouteDate.hour > e.finishRouteDate.hour ? 1 : 0, e.finishRouteDate.hour, e.finishRouteDate.minute, e.finishRouteDate.second, 0), 
            n = parseInt((n.getTime() - r.getTime()) / 1e3), console.log(n), r = parseInt(n / 3600), 
            n = parseInt((n - 3600 * r) / 60), t = r + " h " + n + " min.");
        }
        var r = "FIXED_ROUTES" == e.routeRestrictionType ? "No Aplica" : (e.weightUsed / 1e3).toFixed(2) + " Kgr.", n = "FIXED_ROUTES" == e.routeRestrictionType ? "No Aplica" : (e.volumeUsed / 1e6).toFixed(2) + " m3.";
        return {
            name: e.name,
            date: e.date,
            distance: (e.distanceTraveled / 1e3).toFixed(2) + " Km.",
            estimatedTime: t,
            numVisits: e.visitsNumber,
            avgTimeVisit: (e.avgStayTime / 60).toFixed(2) + " min.",
            initTime: a,
            finalTime: o,
            weightUse: r,
            volumeUse: n,
            cost: e.fuelCost
        };
    }(o.data), t.routeDetail.model = n);
} ]), 
/**=========================================================
 * Module: route_tab_controller.js
 * controllador para la pestaña de mostrar rutas
 =========================================================*/
App.controller("RouteTabController", [ "$scope", "$rootScope", "$state", "$stateParams", "RouteTabService", "Notify", function(t, e, a, o, r, n) {
    t.routeTab = {
        name: "",
        geojson: null,
        routeList: []
    }, t.closeTab = function() {
        e.$broadcast("closeTab", {});
    }, t.routeTab.routeList = r.data.routeList, t.routeTab.name = r.data.name, t.$on("routeTab.update", function() {
        t.routeTab = r.data;
    }), t.showRoute = function(e) {
        0 < t.routeTab.routeList.length ? 
        //console.log(item);
        a.go("app.maps.route", {
            map_mode_use: "route",
            geoJson: e.geoJson,
            routeId: e.id,
            place: t.routeTab.place,
            packages: e.packages,
            returnTo: {
                state: "app.routes.list",
                data: {}
            }
        }) : n.alert({
            message: "Seleccione un trajecto",
            status: "warning",
            timeout: 2e3
        });
    }, t.goToBack = function() {
        "app.routes.list" == o.returnTo.state.name ? a.go("app.routes.list", {
            journey: o.returnTo.data.journey
        }) : "app.journeys.list" == o.returnTo.state.name && a.go("app.journeys.list");
    };
} ]), 
/**=========================================================
 * Module: route_tab_controller.js
 * controllador para la pestaña de mostrar rutas
 =========================================================*/
App.factory("RouteTabService", [ "$rootScope", "MapsServices", function(o, e) {
    var r = {
        name: "",
        geojson: null,
        routeList: []
    };
    return {
        data: r,
        update: function(e, t, a) {
            //data.geojson = newGeojson;
            r.name = e, r.routeList = a, r.place = t, o.$broadcast("routeTab.update", r);
        },
        open: function() {
            o.$broadcast("offsidebar.route.open", {});
        }
    };
} ]), 
/**=========================================================
 * Module: settings_controller.js
 * controllador para el modulo de ajustes
 =========================================================*/
App.controller("SettingsController", [ "$scope", "$rootScope", "$filter", "$state", "SettingsHttp", "resincTknRefresh", "ngDialog", "tpl", "message", function(r, e, n, t, i, a, s, l, c) {
    r.Settings = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        loading: !1,
        noData: !1,
        selectAll: function() {
            for (var e in r.Settings.selectedAll = !r.Settings.selectedAll, r.Settings.selectedItems) r.Settings.selectedItems[e].check = r.Settings.selectedAll;
        },
        add: function() {
            t.go("app.settings.add");
        },
        edit: function(e) {
            t.go("app.settings.edit", {
                data: e
            });
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.Settings.getData();
                });
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.Settings.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    c.show("success", n("translate")("settings.message.deleteConfirm")), 
                    r.Settings.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.Settings.filterText,
                precision: !1
            } ];
            r.Settings.selectedItems = n("arrayFilter")(r.Settings.dataSource, e), 
            r.Settings.paginations.totalItems = r.Settings.selectedItems.length, 
            r.Settings.paginations.currentPage = 1, r.Settings.changePage();
        },
        changePage: function() {
            var e = 1 == r.Settings.paginations.currentPage ? 0 : r.Settings.paginations.currentPage * r.Settings.paginations.itemsPerPage - r.Settings.paginations.itemsPerPage;
            r.Settings.data = r.Settings.selectedItems.slice(e, r.Settings.paginations.currentPage * r.Settings.paginations.itemsPerPage);
        },
        getData: function() {
            r.Settings.loading = !0, r.Settings.noData = !1, r.Settings.data = [], 
            i.getList(function(e) {
                e = e.reverse();
                r.Settings.selectedItems = e, r.Settings.dataSource = e, r.Settings.paginations.totalItems = r.Settings.selectedItems.length, 
                r.Settings.paginations.currentPage = 1, r.Settings.changePage(), 
                r.Settings.loading = !1, r.Settings.dataSource.length < 1 && (r.Settings.noData = !0);
            });
        }
    };
    new a(function() {
        //success
        r.Settings.getData();
    }, function() {
        //fail
        t.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: settings_form_controller.js
 * controllador del formulario de ajustes
 =========================================================*/
/**
 * TODO: falta agregar la plantilla para los vehiculos agregados
 *      agregar el comportamiento de agregar vehiculos
 *      agregar el comportamiento del submit
 **/
App.controller("SettingsFormController", [ "$scope", "$rootScope", "$compile", "$state", "$stateParams", "$filter", "config", "VehicleTypesHttp", "SettingsHttp", "ngDialog", "tpl", "ROAD_RESTRICTION_TYPE", "TYPE_LENGTH_OF_STAY", "message", "resincTknRefresh", function(r, e, t, a, o, n, i, s, l, c, u, d, p, g, m) {
    "use strict";
    r.RESTRICTION_TIME = d.TIME, r.RESTRICTION_RESOURCE_TIME = d.RESOURCE_TIME, 
    r.RESTRICTION_FIXED_ROUTES = d.FIXED_ROUTES, r.TYPE_LENGTH_OF_STAY = {
        FIXED: p.FIXED,
        DEFINE_ITINERARY: p.DEFINE_ITINERARY
    }, console.log(r.TYPE_LENGTH_OF_STAY), r.travelsMode = [ "Vehiculo", "Bicicleta", "Caminata" ], 
    Date.prototype.addHours = function(e) {
        return this.setHours(this.getHours() + e), this;
    };
    var h = new Date(), f = new Date().addHours(6), v = (r.$watch("setting.model.initTime", function(e, t) {
        r.setting.model.roadRestrictionType !== d.FIXED_ROUTES && angular.isDate(e) && (e.getHours() == r.setting.model.finishTime.getHours() && r.setting.model.finishTime.getMinutes() >= e.getMinutes() || e.getHours() == r.setting.model.finishTime.getHours() - 1 && r.setting.model.finishTime.getMinutes() < e.getMinutes()) && (g.show("error", "Minímo una hora de diferencia"), 
        r.setting.model.initTime = t);
    }), r.$watch("setting.model.finishTime", function(e, t) {
        r.setting.model.roadRestrictionType !== d.FIXED_ROUTES && angular.isDate(e) && (e.getHours() == r.setting.model.initTime.getHours() && e.getMinutes() >= r.setting.model.initTime.getMinutes() || e.getHours() - 1 == r.setting.model.initTime.getHours() && e.getMinutes() < r.setting.model.initTime.getMinutes()) && (g.show("error", "Minímo una hora de diferencia"), 
        r.setting.model.finishTime = t);
    }), r.setting = {
        model: {
            description: "",
            travelMode: "",
            backToStartPoint: !1,
            evaluateWeight: !1,
            evaluateVolume: !1,
            evaluateItineraryZone: !1,
            evaluateRestrictionPackage: !1,
            fixedRoutes: null,
            lengthOfStay: null,
            typeLengthOfStay: r.TYPE_LENGTH_OF_STAY.FIXED,
            roadRestrictionType: d.FIXED_ROUTES,
            settingResource: [],
            initTime: h,
            finishTime: f
        },
        resources: {
            model: {
                id: "",
                typeVehicle: {},
                quantity: 1
            },
            data: [],
            error: !1,
            errorMessage: "",
            add: function() {
                if (r.setting.model.evaluateWeight || r.setting.model.evaluateVolume) {
                    var e = {};
                    if (e.id = new Date().getTime(), e.typeVehicle = r.setting.resources.model.typeVehicle, 
                    e.quantity = r.setting.resources.model.quantity, e.quantity < 1) this.error = !0, 
                    this.errorMessage = "Cantidad no puede ser menor que uno"; else if (null == e.typeVehicle.name) this.error = !0, 
                    this.errorMessage = "Debe indicar un tipo de vehículo"; else {
                        this.evaluateVehicleType(e);
                        for (var t = !1, a = 0; a < this.data.length; a++) this.data[a].typeVehicle.id == e.typeVehicle.id && (this.data[a].quantity = this.data[a].quantity + e.quantity, 
                        t = !0);
                        0 == t && this.data.push(e), this.model.typeVehicle = {}, 
                        this.model.quantity = 1, this.error = !1;
                    }
                } else this.error = !0, this.errorMessage = "Debe indicar un tipo de evaluación por peso y/o volumen";
            },
            evaluateVehicleType: function(e) {
                e.status = !0;
                var t = "";
                if (r.setting.model.evaluateWeight || r.setting.model.evaluateVolume) return r.setting.model.evaluateWeight && 0 == e.typeVehicle.weight && (e.status = !1, 
                t = t + " " + n("translate")("settings.form.label.EVALUATE_WEIGHT") + ","), 
                r.setting.model.evaluateVolume && 0 == e.typeVehicle.volume && (e.status = !1, 
                t = t + " " + n("translate")("settings.form.label.EVALUATE_VOLUME") + ","), 
                r.setting.model.evaluateRestrictionPackage && (r.setting.model.evaluateVolume && 0 == e.typeVehicle.restriction.maxVolume && (e.status = !1, 
                t += " MAXVOLUME,"), r.setting.model.evaluateWeight) && 0 == e.typeVehicle.restriction.maxWeight && (e.status = !1, 
                t += " MAXWEIGTH,"), e.errorMessage = t.substring(0, t.length - 1), 
                e.status;
                e.status = !1;
            },
            remove: function(o) {
                c.openConfirm({
                    template: u.path,
                    className: "ngdialog-theme-default",
                    scope: r
                }).then(function(e) {
                    for (var t = [], a = 0; a < r.setting.resources.data.length; a++) r.setting.resources.data[a].id !== o.id && t.push(r.setting.resources.data[a]);
                    r.setting.resources.data = t;
                });
            }
        },
        save: function() {
            var e = {};
            v() && ((e = r.setting.model).initTime = null == r.setting.model.initTime ? n("date")(currentDate, "HH:mm") : n("date")(r.setting.model.initTime, "HH:mm"), 
            r.setting.model.roadRestrictionType == d.FIXED_ROUTES ? e.finishTime = "" : e.finishTime = null == r.setting.model.finishTime ? n("date")(currentDate, "HH:mm") : n("date")(r.setting.model.finishTime, "HH:mm"), 
            e = new l(e), a.is("app.settings.add") ? e.$save(function(e) {
                r.setting.cancel();
            }) : a.is("app.settings.edit") && e.$update(function(e) {
                r.setting.cancel();
            }));
        },
        cancel: function() {
            null != o.returnTo && o.returnTo.state ? a.go(o.returnTo.state, {
                data: o.returnTo.data
            }) : a.go("app.settings.list");
        }
    }, function() {
        r.travelMode_required = !1, r.description_required = !1, r.lengthOfStay_required = !1, 
        r.fixedRoutes_required = !1, r.evaluateWeight_required = !1;
        var e = !(r.evaluateVolume_required = !1);
        return "" == r.setting.model.travelMode && (e = !(r.travelMode_required = !0)), 
        "" == r.setting.model.description && (e = !(r.description_required = !0)), 
        r.setting.model.typeLengthOfStay == p.FIXED && null == r.setting.model.lengthOfStay && (e = !(r.lengthOfStay_required = !0)), 
        r.setting.model.roadRestrictionType == d.FIXED_ROUTES && (null == r.setting.model.fixedRoutes && (e = !(r.fixedRoutes_required = !0)), 
        r.setting.model.settingResource = []), r.setting.model.roadRestrictionType == d.TIME && (r.setting.model.settingResource = []), 
        r.setting.model.roadRestrictionType == d.RESOURCE_TIME && (r.setting.model.evaluateWeight || r.setting.model.evaluateVolume || (r.evaluateWeight_required = !0, 
        e = !(r.evaluateVolume_required = !0)), 0 == r.setting.resources.data.length && (e = !1, 
        g.show("error", "debe tener minímo un recurso")), r.setting.model.settingResource = r.setting.resources.data), 
        e;
    });
    r.resources = [], r.vehicleTypes = {
        data: [],
        add: function() {
            a.go("app.vehicleTypes.add", {
                returnTo: {
                    state: a.current.name,
                    data: r.setting.model
                }
            });
        }
    }, new m(function() {
        //success
        s.getList(function(e) {
            r.vehicleTypes.data = e;
        });
    }, function() {
        //fail
        a.go("access.login");
    });
    function y(e) {
        var e = e.split(":"), t = new Date();
        return t.setHours(e[0]), t.setMinutes(e[1]), t;
    }
    o.data && ((h = o.data).initTime && angular.isString(o.data.initTime) && (h.initTime = y(o.data.initTime)), 
    h.finishTime && angular.isString(o.data.finishTime) && (h.finishTime = y(o.data.finishTime)), 
    r.setting.model = h, r.setting.resources.data = r.setting.model.settingResource), 
    r.$watch("setting.model.evaluateWeight", function() {
        r.setting.model.evaluateWeight && (r.setting.resources.error = !1);
        for (var e = 0; e < r.setting.resources.data.length; e++) r.setting.resources.evaluateVehicleType(r.setting.resources.data[e]);
    }), r.$watch("setting.model.evaluateVolume", function() {
        r.setting.model.evaluateVolume && (r.setting.resources.error = !1);
        for (var e = 0; e < r.setting.resources.data.length; e++) r.setting.resources.evaluateVehicleType(r.setting.resources.data[e]);
    }), r.$watch("setting.model.evaluateRestrictionPackage", function() {
        for (var e = 0; e < r.setting.resources.data.length; e++) r.setting.resources.evaluateVehicleType(r.setting.resources.data[e]);
    });
} ]), 
/**

*servicio para cargar los parciales desde jsono2html

*/
App.factory("PartialLoader", [ "$http", "$log", "$auth", "config", function(e, r, t, a) {
    // body...
    var a = a().path, n = {}, i = {
        settingsBasic: a.partials + "settings_basic.json",
        settingsEnterprise: a.partials + "settings_enterprise.json",
        settingsTime: a.partials + "settings_time.json",
        settingsResourceEnterprice: a.partials + "settings_resource_enterprise.json",
        settingsResourceBasic: a.partials + "settings_resource_basic.json"
    };
    return {
        loadPartial: function(a, o) {
            n[a] && o(n[a]), void 0 === i[a] ? r.error('partial: "' + a + '" no existe!!!') : e.get(i[a], {
                partial: a
            }).success(function(e, t) {
                r.debug(e), r.debug(t), n[a] = e, o(n[a]);
            }).error(function(e, t) {
                r.error(e), r.error(t);
            });
        }
    };
} ]), 
// test controller
App.controller("TestController", [ "$scope", "$rootScope", "$http", "PdfExporter", "RouteTabService", "Decoder", "MapsServices", "Mapping", "GeocodingServices", "XlsxExporter", "JourneyHttp", function(t, e, a, o, r, n, i, s, l, c, u) {
    function d(e, t) {
        for (var a = [], e = e || 0, t = t || "", o = faker.random.number, r = faker.address.streetAddress, n = "visit" == t ? function(e) {
            return {
                id: e,
                origin: r(),
                destination: r(),
                distance: o(100) + " Kms.",
                duration: o(10) + " Min.",
                timeArrival: o(24) + ":" + o(60),
                timeDeparture: o(24) + ":" + o(60),
                lengthStay: o(10) + " Min."
            };
        } : "routeList" == t ? function(e) {
            return {
                id: e,
                name: faker.address.streetAddress()
            };
        } : function(e) {
            return e;
        }, i = 1; i <= e; ++i) a.push(n(i));
        return a;
    }
    t.name = "", t.ran = function(e) {
        t.name = faker.name.firstName(), console.log(d(3, "visit"));
    }, t.listaVisita = function(e) {
        var t = new o(), a = d(100, "visit");
        console.log(a), t.getReportVisitList(a);
    }, t.change = function() {
        /*var cantidad = Math.floor(Math.random()*10);
      var routeList = getData(cantidad, 'routeList');
      console.log(routeList);
      RouteTabService.update(routeList);*/
        a.get("http://localhost:3000/server/path/rutaMixin.geojson").success(function(e, t, a, o) {
            r.update(e);
            //console.log(data);
        }).error(function(e, t, a, o) {
            console.error(t);
        });
    }, t.openRute = function() {
        e.$broadcast("offsidebar.route.open", {});
    }, t.openOther = function() {
        e.$broadcast("offsidebar.other.open", {});
    }, t.testDecode = function(e) {
        a.get("http://localhost:3000/server/response/optimalRouteOfPointCloud.json").success(function(e) {
            e = n.decodePoints(e.route_geometry);
            i.showPath([ e ]);
        });
    }, t.testDecodeMultiple = function(e) {
        a.get("http://localhost:3000/server/response/multiplePathPoints.json").success(function(e) {
            var t = [];
            angular.forEach(e.output, function(e) {
                this.push(e.route_geometry);
            }, t), e = n.decodePaths(t), i.showPath(e);
        });
    }, t.testMapping = function() {
        console.log(s.mapping({
            id: "0",
            latitude: 4.646039742152375,
            longitude: -74.01256556250007,
            weight: 1e6,
            volume: 0,
            transport_id: 0,
            unloadingTime: 300,
            status: null,
            status_message: null,
            startTimeOfDelivery: null,
            endTimeOfDelivery: null,
            city: "Testcity",
            desc: null
        }, s.model.addressModel));
    }, t.testReverse = function(e) {
        var t = -74.04487, a = 4.73162;
        l.reverse(t, a).then(function(e) {
            console.log(e);
        }, function(e) {
            console.log(e);
        });
    }, t.testPoints = function(e) {
        i.showPoints([ {
            longitude: -74.04487,
            latitude: 4.73162
        }, {
            longitude: -78.04487,
            latitude: 8.73162
        }, {
            longitude: -82.04487,
            latitude: 12.73162
        } ]);
    }, t.$on("$viewContentLoaded", function(e) {
        t.mapGoogle = i.init({
            container: "map",
            controlId: "olmap"
        });
    }), t.testExcel = function() {
        u.getList(function(e) {
            e = e.filter(function(e) {
                return "560abf02e4b042e146fe7a99" === e.id;
            })[0];
            c.getReportVisitList(e.routes[0]);
        });
    };
} ]), 
/**=========================================================
 * Module: vehicle_controller.js
 * controllador para el modulo vehiculos
 =========================================================*/
App.controller("VehiclesController", [ "$scope", "$rootScope", "$filter", "$state", "VehiclesHttp", "resincTknRefresh", "VehicleService", "ngDialog", "tpl", "message", function(r, e, n, t, i, a, o, s, l, c) {
    r.vehicles = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !1,
        loading: !1,
        selectAll: function() {
            for (var e in r.vehicles.selectedAll = !r.vehicles.selectedAll, r.vehicles.selectedItems) r.vehicles.selectedItems[e].check = r.vehicles.selectedAll;
        },
        add: function() {
            t.go("app.vehicles.add", {
                next: t.current,
                back: t.current
            });
        },
        edit: function(e) {
            t.go("app.vehicles.edit", {
                vehicle: e,
                next: t.current,
                back: t.current
            });
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.vehicles.getData();
                });
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.vehicles.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    c.show("success", n("translate")("vehicles.message.deleteConfirm")), 
                    r.vehicles.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.vehicles.filterText,
                precision: !1
            } ];
            r.vehicles.selectedItems = n("arrayFilter")(r.vehicles.dataSource, e), 
            r.vehicles.paginations.totalItems = r.vehicles.selectedItems.length, 
            r.vehicles.paginations.currentPage = 1, r.vehicles.changePage();
        },
        changePage: function() {
            var e = 1 == r.vehicles.paginations.currentPage ? 0 : r.vehicles.paginations.currentPage * r.vehicles.paginations.itemsPerPage - r.vehicles.paginations.itemsPerPage;
            r.vehicles.data = r.vehicles.selectedItems.slice(e, r.vehicles.paginations.currentPage * r.vehicles.paginations.itemsPerPage);
        },
        getData: function() {
            r.vehicles.data = [], r.vehicles.loading = !0, r.vehicles.noData = !1, 
            i.getList(function(e) {
                e = e.reverse();
                r.vehicles.selectedItems = e, r.vehicles.dataSource = e, r.vehicles.paginations.totalItems = r.vehicles.selectedItems.length, 
                r.vehicles.paginations.currentPage = 1, r.vehicles.changePage(), 
                r.vehicles.loading = !1, r.vehicles.dataSource.length < 1 && (r.vehicles.noData = !0);
            });
        }
    };
    new a(function() {
        //success
        r.vehicles.getData();
    }, function() {
        //fail
        t.go("access.login");
    });
} ]), 
/**=========================================================
 * Module: vehicle_controller.js
 * controllador para el modulo vehiculos
 =========================================================*/
App.controller("VehicleController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "VehicleTypesHttp", "VehiclesHttp", "resincTknRefresh", function(t, e, a, o, r, n, i, s) {
    r.next;
    var l, c = r.back || "app.vehicles.list";
    t.vehicleType_required = !1, t.$watch("vehicle.model.name", function() {
        null == t.vehicle.model.name || "" == t.vehicle.model.name ? t.name_required = !0 : t.name_required = !1;
    }), t.$watch("vehicle.model.licencePlate", function() {
        null == t.vehicle.model.licencePlate || "" == t.vehicle.model.licencePlate ? t.licencePlate_required = !0 : t.licencePlate_required = !1;
    }), t.$watch("vehicleTypes.current", function() {
        null == t.vehicleTypes.current.name ? t.vehicleType_required = !0 : t.vehicleType_required = !1;
    }), t.vehicle = {
        model: {
            licencePlate: "",
            name: "",
            typeResource: {
                id: ""
            }
        },
        save: function() {
            var e;
            t.name_required || t.licencePlate_required || t.vehicleType_required || (e = new i(t.vehicle.model), 
            o.is("app.vehicles.add") ? e.$save(function(e) {
                r.returnTo.state ? o.go(r.returnTo.state, {
                    data: r.returnTo.data
                }) : o.go("app.vehicles.list");
            }) : o.is("app.vehicles.edit") && e.$update(function(e) {
                r.returnTo.state ? o.go(r.returnTo.state, {
                    data: r.returnTo.data
                }) : o.go("app.vehicles.list");
            }));
        },
        setTypeResource: function(e) {
            t.vehicle.model.typeResource.id = e.id;
        }
    }, t.vehicleTypes = {
        current: {},
        add: function() {
            o.go("app.vehicleTypes.add");
        },
        data: []
    }, console.log(r.vehicle), l = r.vehicle || {}, t.vehicle.model.id = l.id, t.vehicle.model.licencePlate = angular.isUndefined(l.licencePlate) ? "" : l.licencePlate, 
    t.vehicle.model.name = angular.isUndefined(l.name) ? "" : l.name, l.typeResource && (t.vehicle.model.typeResource.id = angular.isUndefined(l.typeResource.id) ? "" : l.typeResource.id), 
    new s(function() {
        //success
        n.getList(function(e) {
            t.vehicleTypes.data = e, t.vehicleTypes.current = function(e, t) {
                var a;
                if (t) for (a = 0; a < e.length; a++) if (e[a].id == t) return e[a];
                return {};
            }(t.vehicleTypes.data, t.vehicle.model.typeResource.id);
        });
    }, function() {
        //fail
        o.go("access.login");
    });
    t.cancelForm = function() {
        o.go(c);
    };
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("VehicleTypesController", [ "$scope", "$rootScope", "$filter", "$state", "VehicleTypesHttp", "resincTknRefresh", "ngDialog", "tpl", "PdfExporter", "message", function(r, e, n, t, i, a, s, l, o, c) {
    r.vehicleTypes = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        noData: !1,
        loading: !1,
        selectAll: function() {
            for (var e in r.vehicleTypes.selectedAll = !r.vehicleTypes.selectedAll, 
            r.vehicleTypes.selectedItems) r.vehicleTypes.selectedItems[e].check = r.vehicleTypes.selectedAll;
        },
        add: function() {
            t.go("app.vehicleTypes.add");
        },
        edit: function(e) {
            t.go("app.vehicleTypes.edit", {
                vehicleType: e
            });
        },
        removeItem: function(t) {
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                new i(t).$delete(function(e) {
                    r.vehicleTypes.getData();
                });
            });
        },
        remove: function() {
            var o = n("arrayFilter")(r.vehicleTypes.selectedItems, [ {
                key: "check",
                value: !0,
                precision: !0
            } ]);
            s.openConfirm({
                template: l.path,
                className: "ngdialog-theme-default",
                scope: r
            }).then(function(e) {
                for (var t = "", a = 0; a < o.length; a++) t += o[a].id + ",";
                "" !== t && (t = t.substring(0, t.length - 1)), new i({
                    ids: t
                }).$deleteIds(function(e) {
                    c.show("success", n("translate")("vehicleTypes.message.deleteConfirm")), 
                    r.vehicleTypes.getData();
                });
            });
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: r.vehicleTypes.filterText,
                precision: !1
            } ];
            r.vehicleTypes.selectedItems = n("arrayFilter")(r.vehicleTypes.dataSource, e), 
            r.vehicleTypes.paginations.totalItems = r.vehicleTypes.selectedItems.length, 
            r.vehicleTypes.paginations.currentPage = 1, r.vehicleTypes.changePage();
        },
        changePage: function() {
            var e = 1 == r.vehicleTypes.paginations.currentPage ? 0 : r.vehicleTypes.paginations.currentPage * r.vehicleTypes.paginations.itemsPerPage - r.vehicleTypes.paginations.itemsPerPage;
            r.vehicleTypes.data = r.vehicleTypes.selectedItems.slice(e, r.vehicleTypes.paginations.currentPage * r.vehicleTypes.paginations.itemsPerPage);
        },
        getData: function() {
            r.vehicleTypes.data = [], r.vehicleTypes.loading = !0, r.vehicleTypes.noData = !1, 
            i.getList(function(e) {
                e = e.reverse();
                r.vehicleTypes.selectedItems = e, r.vehicleTypes.dataSource = e, 
                r.vehicleTypes.paginations.totalItems = r.vehicleTypes.selectedItems.length, 
                r.vehicleTypes.paginations.currentPage = 1, r.vehicleTypes.changePage(), 
                r.vehicleTypes.loading = !1, r.vehicleTypes.dataSource.length < 1 && (r.vehicleTypes.noData = !0);
            });
        }
    };
    new a(function() {
        //success
        r.vehicleTypes.getData();
    }, function() {
        //fail
        t.go("access.login");
    });
    r.exportPDf = function() {
        new o().getReportVehicleTypeList(r.vehicleTypes.dataSource);
    };
} ]), 
/**=========================================================
 * Module: vehicle_type_controller.js
 * controllador para el modulo de tipos de vehiculos
 =========================================================*/
App.controller("VehicleTypeController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "VehicleTypesHttp", "message", function(a, e, o, t, r, n, i) {
    var s;
    a.vehicleType = {
        model: {
            id: "",
            name: "",
            weight: 0,
            volume: 0,
            capability: "volume",
            measure: {
                height: 0,
                width: 0,
                depth: 0
            },
            restriction: {
                minWeight: 0,
                minVolume: 0,
                maxWeight: 0,
                maxVolume: 0
            }
        },
        save: function() {
            var e = a.vehicleType.model;
            return !!a.name_required || !!a.weight_required || !!a.volume_required || (e = {
                id: e.id,
                name: e.name,
                weight: 1e3 * e.weight,
                volume: e.volume,
                capability: e.capability,
                measure: {
                    height: e.measure.height,
                    width: e.measure.width,
                    depth: e.measure.depth
                },
                restriction: {
                    minWeight: 1e3 * e.restriction.minWeight,
                    minVolume: e.restriction.minVolume,
                    maxWeight: 1e3 * e.restriction.maxWeight,
                    maxVolume: e.restriction.maxVolume
                }
            }, e = new n(e), void (t.is("app.vehicleTypes.add") ? e.$save(function(e) {
                r.returnTo.state ? t.go(r.returnTo.state, {
                    data: r.returnTo.data
                }) : t.go("app.vehicleTypes.list");
            }) : t.is("app.vehicleTypes.edit") && e.$update(function(e) {
                r.returnTo.state ? t.go(r.returnTo.state, {
                    data: r.returnTo.data
                }) : t.go("app.vehicleTypes.list");
            })));
        },
        cancel: function() {
            r.returnTo.state ? t.go(r.returnTo.state, {
                data: r.returnTo.data
            }) : t.go("app.vehicleTypes.list");
        }
    }, a.$watch("vehicleType.model.measure.height", function() {
        "measure" == a.vehicleType.model.capability && (a.vehicleType.model.volume = a.vehicleType.model.measure.height * a.vehicleType.model.measure.width * a.vehicleType.model.measure.depth);
    }), a.$watch("vehicleType.model.measure.width", function() {
        "measure" == a.vehicleType.model.capability && (a.vehicleType.model.volume = a.vehicleType.model.measure.height * a.vehicleType.model.measure.width * a.vehicleType.model.measure.depth);
    }), a.$watch("vehicleType.model.measure.depth", function() {
        "measure" == a.vehicleType.model.capability && (a.vehicleType.model.volume = a.vehicleType.model.measure.height * a.vehicleType.model.measure.width * a.vehicleType.model.measure.depth);
    }), a.$watch("vehicleType.model.weight", function(e, t) {
        a.weight_required = 0 == e || null == e;
    }), a.$watch("vehicleType.model.volume", function(e, t) {
        "volume" == a.vehicleType.model.capability && (a.vehicleType.model.measure = {
            height: 0,
            width: 0,
            depth: 0
        }), a.volume_required = 0 == e || null == e;
    }), a.$watch("vehicleType.model.restriction.minWeight", function(e, t) {
        e > a.vehicleType.model.restriction.maxWeight && (i.show("error", o("translate")("vehicleTypes.errorMessage.minWeight>maxWeight")), 
        a.vehicleType.model.restriction.minWeight = t);
    }), a.$watch("vehicleType.model.restriction.maxWeight", function(e, t) {
        e > a.vehicleType.model.weight ? (i.show("error", o("translate")("vehicleTypes.errorMessage.maxWeight>weight")), 
        a.vehicleType.model.restriction.maxWeight = t) : e < a.vehicleType.model.restriction.minWeight && (i.show("error", o("translate")("vehicleTypes.errorMessage.maxWeight<minWeight")), 
        a.vehicleType.model.restriction.maxWeight = t);
    }), a.$watch("vehicleType.model.restriction.minVolume", function(e, t) {
        e > a.vehicleType.model.restriction.maxVolume && (i.show("error", o("translate")("vehicleTypes.errorMessage.minVolume>maxVolume")), 
        a.vehicleType.model.restriction.minVolume = t);
    }), a.$watch("vehicleType.model.restriction.maxVolume", function(e, t) {
        e > a.vehicleType.model.volume ? (i.show("error", o("translate")("vehicleTypes.errorMessage.maxVolume>volume")), 
        a.vehicleType.model.restriction.maxVolume = t) : e < a.vehicleType.model.restriction.minVolume && (i.show("error", o("translate")("vehicleTypes.errorMessage.maxVolume<minVolume")), 
        a.vehicleType.model.restriction.maxVolume = t);
    }), a.$watch("vehicleType.model.name", function() {
        if (null == a.vehicleType.model.name || "" == a.vehicleType.model.name) return a.name_required = !0;
        a.name_required = !1;
    }), r.vehicleType ? (s = {
        id: (s = r.vehicleType).id,
        name: s.name,
        weight: s.weight / 1e3,
        volume: s.volume,
        capability: s.capability,
        measure: {
            height: s.measure.height,
            width: s.measure.width,
            depth: s.measure.depth
        },
        restriction: {
            minWeight: s.restriction.minWeight / 1e3,
            minVolume: s.restriction.minVolume,
            maxWeight: s.restriction.maxWeight / 1e3,
            maxVolume: s.restriction.maxVolume
        }
    }, a.vehicleType.model = s) : a.vehicleType.model = a.vehicleType.model;
} ]), 
/**=========================================================
 * Module: visits_controller.js
 * controllador para el modulo de visitas
 =========================================================*/
App.controller("VisitsController", [ "$scope", "$rootScope", "$filter", "$state", "$stateParams", "VisitsHttp", "RoutesHttp", "config", "tempStorageData", function(t, e, a, o, r, n, i, s, l) {
    null === r.returnTo.data.journey && void 0 === r.journey && void 0 === l.data.journeyRoutes ? o.go("app.routes.list") : (t.VISITED = 0, 
    t.VISIT_PENDING = 1, t.VISIT_FINISHED = 2, t.Visits = {
        paginations: {
            maxSize: 3,
            itemsPerPage: 20,
            currentPage: 0,
            totalItems: 0
        },
        selectedAll: !1,
        filterText: "",
        dataSource: [],
        selectedItems: [],
        data: [],
        loading: !1,
        selectAll: function() {
            for (var e in t.Visits.selectedAll = !t.Visits.selectedAll, t.Visits.selectedItems) t.Visits.selectedItems[e].check = t.Visits.selectedAll;
        },
        goToMap: function(e) {
            o.go("app.maps.assigned", {
                map_mode_use: "assigned",
                address: e,
                returnTo: {
                    state: o.current,
                    data: {
                        journey: t.journey,
                        packages: t.Visits.data
                    }
                }
            });
        },
        detail: function(e) {
            o.go("app.visits.detail");
        },
        removeItem: function(e) {
            console.log(e);
        },
        add: function() {
            o.go("app.visits.add");
        },
        goToBack: function() {
            o.go("app.routes.list", {
                journey: t.journey
            });
            /*        if ($stateParams.returnTo.state.name == 'app.routes.list') {
        }*/
        },
        filter: function() {
            var e = [ {
                key: "$",
                value: t.Visits.filterText,
                precision: !1
            } ];
            angular.isDefined(t.statusFilter.current) && null != t.statusFilter.current && e.push({
                key: "status",
                value: t.statusFilter.current.value,
                precision: !1
            }), t.Visits.selectedItems = a("arrayFilter")(t.Visits.dataSource, e), 
            t.Visits.paginations.totalItems = t.Visits.selectedItems.length, t.Visits.paginations.currentPage = 1, 
            t.Visits.changePage();
        },
        changePage: function() {
            var e = 1 == t.Visits.paginations.currentPage ? 0 : t.Visits.paginations.currentPage * t.Visits.paginations.itemsPerPage - t.Visits.paginations.itemsPerPage;
            t.Visits.data = t.Visits.selectedItems.slice(e, t.Visits.paginations.currentPage * t.Visits.paginations.itemsPerPage);
        },
        setData: function(e) {
            t.Visits.selectedItems = e, t.Visits.dataSource = e, t.Visits.paginations.totalItems = t.Visits.selectedItems.length, 
            t.Visits.paginations.currentPage = 1, t.Visits.changePage();
        }
    }, 
    /*
    $scope.routes = {
      current: {},
      add : function() {
        $state.go('app.routes.add');
      },
      data : []
    };

    RoutesHttp.getList(function(response) {
      $scope.routes.data = response;
    })
    */
    t.statusFilter = {
        current: {},
        data: s().visits.status
    }, void 0 !== r.returnTo.data.journey && (t.journey = r.returnTo.data.journey), 
    null !== r.journey && (t.journey = r.journey), void 0 !== r.packages && t.Visits.setData(r.packages), 
    l.data.journeyRoutes = t.journey);
} ]), 
/**=========================================================
 * Module: visits_unattended_list_controller.js
 * controllador para la lista de visitas sin atender
 =========================================================*/
App.controller("VisitsUnattendedListController", [ "$scope", "$rootScope", function(e, t) {
    // body...
} ]), 
/**=========================================================
 * Module: visit_unattended_controller.js
 * controllador para el modulo Visitas sin Atender
 =========================================================*/
App.controller("VisitsUnattendedController", [ "$scope", "$rootScope", function(e, t) {
    // body...
} ]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
